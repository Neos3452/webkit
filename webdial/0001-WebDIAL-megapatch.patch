From aaa51cd75df8d8544226255548504a97325cbcd1 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Micha=C5=82=20D=C4=99bski?= <debski.mi.zd@gmail.com>
Date: Fri, 18 Mar 2016 15:19:48 +0100
Subject: [PATCH] WebDIAL megapatch

Add IDL stub files for WebDial

Discovery API

Publishing service side

Missing is data passed to embedder for decision making.

Permission request for WebDial

Proper enumeration permission request

Launch sequence

Refactoring

Message sending draft

Fixes after upversion

Message sending

build fix

Crash fixes

User scripts support for MiniBrowser

Final fixes

Disable unrelated failing asserts

WebDial for IOS

More changes
---
 LayoutTests/webdial/presence-expected.txt          |  16 ++
 LayoutTests/webdial/presence.html                  |  18 ++
 .../Configurations/FeatureDefines.xcconfig         |   3 +-
 .../inspector/InjectedScriptBase.cpp               |   2 +-
 Source/WTF/wtf/FeatureDefines.h                    |  12 +
 .../WebCore/Configurations/FeatureDefines.xcconfig |   3 +-
 Source/WebCore/DerivedSources.make                 |   7 +
 .../Modules/webdial/DiscoveryServiceChannel.cpp    |  53 ++++
 .../Modules/webdial/DiscoveryServiceChannel.h      |  67 +++++
 .../WebCore/Modules/webdial/LocalNetworkDevice.cpp |  50 ++++
 .../WebCore/Modules/webdial/LocalNetworkDevice.h   |  71 ++++++
 .../WebCore/Modules/webdial/LocalNetworkDevice.idl |  36 +++
 .../webdial/LocalNetworkDeviceDescriptor.cpp       |  44 ++++
 .../Modules/webdial/LocalNetworkDeviceDescriptor.h |  59 +++++
 .../webdial/LocalNetworkDeviceDescriptor.idl       |  35 +++
 .../Modules/webdial/LocalNetworkDevices.cpp        |  88 +++++++
 .../WebCore/Modules/webdial/LocalNetworkDevices.h  |  71 ++++++
 .../Modules/webdial/LocalNetworkDevices.idl        |  35 +++
 .../Modules/webdial/LocalNetworkDiscovererClient.h |  55 +++++
 .../webdial/LocalNetworkDiscoveryController.cpp    |  72 ++++++
 .../webdial/LocalNetworkDiscoveryController.h      |  67 +++++
 .../webdial/LocalNetworkDiscoveryProvider.h        |  53 ++++
 .../webdial/LocalNetworkEnumerationRequest.cpp     | 133 ++++++++++
 .../webdial/LocalNetworkEnumerationRequest.h       |  75 ++++++
 .../webdial/LocalNetworkLaunchingProvider.h        |  53 ++++
 .../webdial/NavigatorLocalNetworkDevices.cpp       | 109 +++++++++
 .../Modules/webdial/NavigatorLocalNetworkDevices.h |  67 +++++
 .../webdial/NavigatorLocalNetworkDevices.idl       |  34 +++
 .../WebCore/Modules/webdial/RemoteApplication.cpp  | 270 +++++++++++++++++++++
 Source/WebCore/Modules/webdial/RemoteApplication.h | 112 +++++++++
 .../WebCore/Modules/webdial/RemoteApplication.idl  |  52 ++++
 .../WebCore/Modules/webdial/StateChangedEvent.cpp  |  53 ++++
 Source/WebCore/Modules/webdial/StateChangedEvent.h |  79 ++++++
 .../WebCore/Modules/webdial/StateChangedEvent.idl  |  34 +++
 Source/WebCore/Modules/webdial/WebDialMessages.cpp | 245 +++++++++++++++++++
 Source/WebCore/Modules/webdial/WebDialMessages.h   | 227 +++++++++++++++++
 Source/WebCore/WebCore.xcodeproj/project.pbxproj   | 184 ++++++++++++++
 Source/WebCore/dom/EventNames.in                   |   1 +
 Source/WebCore/dom/EventTargetFactory.in           |   1 +
 .../WebCore/loader/cache/CachedResourceLoader.cpp  |   2 +-
 Source/WebCore/platform/Logging.h                  |   1 +
 .../platform/cocoa/DiscoveryServiceChannelCocoa.h  |  75 ++++++
 .../platform/cocoa/DiscoveryServiceChannelCocoa.mm | 202 +++++++++++++++
 .../cocoa/LocalNetworkDiscoveryProviderCocoa.h     |  69 ++++++
 .../cocoa/LocalNetworkDiscoveryProviderCocoa.mm    | 145 +++++++++++
 .../cocoa/LocalNetworkLaunchingProviderCocoa.h     |  79 ++++++
 .../cocoa/LocalNetworkLaunchingProviderCocoa.mm    | 156 ++++++++++++
 Source/WebCore/platform/mac/LoggingMac.mm          |   5 +-
 Source/WebKit/WebKit.xcodeproj/project.pbxproj     |   8 +
 .../mac/Configurations/FeatureDefines.xcconfig     |   3 +-
 .../WebLocalNetworkDiscovererClient.h              |  58 +++++
 .../WebLocalNetworkDiscovererClient.mm             |  63 +++++
 Source/WebKit/mac/WebView/WebView.mm               |   5 +
 .../WebKit2/Configurations/FeatureDefines.xcconfig |   3 +-
 Source/WebKit2/Platform/Logging.h                  |   1 +
 Source/WebKit2/Shared/API/APIObject.h              |   5 +
 .../Cocoa/DiscoveryServicePrivateCocoa.h           |  75 ++++++
 .../Cocoa/DiscoveryServicePrivateCocoa.mm          | 256 +++++++++++++++++++
 .../Shared/DiscoveryService/DiscoveryService.cpp   | 132 ++++++++++
 .../Shared/DiscoveryService/DiscoveryService.h     |  75 ++++++
 .../DiscoveryServiceChannelProxy.cpp               | 105 ++++++++
 .../DiscoveryServiceChannelProxy.h                 |  62 +++++
 .../DiscoveryService/DiscoveryServiceClient.h      |  59 +++++
 .../DiscoveryService/DiscoveryServiceInvoker.cpp   |  96 ++++++++
 .../DiscoveryService/DiscoveryServiceInvoker.h     |  64 +++++
 .../DiscoveryService/DiscoveryServicePrivate.h     |  61 +++++
 Source/WebKit2/UIProcess/API/APIUIClient.h         |   1 +
 .../UIProcess/API/Cocoa/WKDiscoveryDelegate.h      |  51 ++++
 .../UIProcess/API/Cocoa/WKDiscoveryService.h       |  51 ++++
 .../UIProcess/API/Cocoa/WKDiscoveryService.mm      |  90 +++++++
 .../API/Cocoa/WKDiscoveryServiceInternal.h         |  53 ++++
 .../API/Cocoa/WKDiscoveryServicePrivate.h          |  41 ++++
 Source/WebKit2/UIProcess/Cocoa/DiscoveryDelegate.h |  60 +++++
 .../WebKit2/UIProcess/Cocoa/DiscoveryDelegate.mm   |  65 +++++
 Source/WebKit2/UIProcess/Cocoa/UIDelegate.h        |   2 +
 Source/WebKit2/UIProcess/Cocoa/UIDelegate.mm       |  22 ++
 ...tworkDiscoveryPermissionRequestManagerProxy.cpp |  79 ++++++
 ...NetworkDiscoveryPermissionRequestManagerProxy.h |  58 +++++
 ...LocalNetworkDiscoveryPermissionRequestProxy.cpp |  63 +++++
 .../LocalNetworkDiscoveryPermissionRequestProxy.h  |  60 +++++
 Source/WebKit2/UIProcess/PageClient.h              |   5 +
 Source/WebKit2/UIProcess/WebPageProxy.cpp          |  54 +++++
 Source/WebKit2/UIProcess/WebPageProxy.h            |  17 ++
 Source/WebKit2/UIProcess/WebPageProxy.messages.in  |  11 +
 Source/WebKit2/WebKit2.xcodeproj/project.pbxproj   | 126 +++++++++-
 .../WebLocalNetworkDiscovererClient.cpp            |  63 +++++
 .../WebLocalNetworkDiscovererClient.h              |  58 +++++
 ...calNetworkDiscoveryPermissionRequestManager.cpp | 107 ++++++++
 ...LocalNetworkDiscoveryPermissionRequestManager.h |  60 +++++
 Source/WebKit2/WebProcess/WebPage/WebPage.cpp      |  37 +++
 Source/WebKit2/WebProcess/WebPage/WebPage.h        |  25 ++
 .../WebKit2/WebProcess/WebPage/WebPage.messages.in |  13 +
 Source/cmake/OptionsMac.cmake                      |   1 +
 Source/cmake/WebKitFeatures.cmake                  |   1 +
 .../MiniBrowser.xcodeproj/project.pbxproj          |  10 +
 .../UserScriptsManagerWindowController.h           |  53 ++++
 Tools/MiniBrowser/mac/AppDelegate.h                |   2 +
 Tools/MiniBrowser/mac/AppDelegate.m                |  12 +
 Tools/MiniBrowser/mac/MainMenu.xib                 |  10 +-
 .../mac/UserScriptsManagerWindowController.m       | 226 +++++++++++++++++
 .../mac/UserScriptsManagerWindowController.xib     | 209 ++++++++++++++++
 Tools/MiniBrowser/mac/WK2BrowserWindowController.m |  18 +-
 Tools/Scripts/webkitdirs.pm                        |  15 ++
 Tools/Scripts/webkitperl/FeatureList.pm            |   4 +
 .../Configurations/FeatureDefines.xcconfig         |   3 +-
 .../xcshareddata/xcschemes/All Source.xcscheme     |  30 ++-
 106 files changed, 6356 insertions(+), 21 deletions(-)
 create mode 100644 LayoutTests/webdial/presence-expected.txt
 create mode 100644 LayoutTests/webdial/presence.html
 create mode 100644 Source/WebCore/Modules/webdial/DiscoveryServiceChannel.cpp
 create mode 100644 Source/WebCore/Modules/webdial/DiscoveryServiceChannel.h
 create mode 100644 Source/WebCore/Modules/webdial/LocalNetworkDevice.cpp
 create mode 100644 Source/WebCore/Modules/webdial/LocalNetworkDevice.h
 create mode 100644 Source/WebCore/Modules/webdial/LocalNetworkDevice.idl
 create mode 100644 Source/WebCore/Modules/webdial/LocalNetworkDeviceDescriptor.cpp
 create mode 100644 Source/WebCore/Modules/webdial/LocalNetworkDeviceDescriptor.h
 create mode 100644 Source/WebCore/Modules/webdial/LocalNetworkDeviceDescriptor.idl
 create mode 100644 Source/WebCore/Modules/webdial/LocalNetworkDevices.cpp
 create mode 100644 Source/WebCore/Modules/webdial/LocalNetworkDevices.h
 create mode 100644 Source/WebCore/Modules/webdial/LocalNetworkDevices.idl
 create mode 100644 Source/WebCore/Modules/webdial/LocalNetworkDiscovererClient.h
 create mode 100644 Source/WebCore/Modules/webdial/LocalNetworkDiscoveryController.cpp
 create mode 100644 Source/WebCore/Modules/webdial/LocalNetworkDiscoveryController.h
 create mode 100644 Source/WebCore/Modules/webdial/LocalNetworkDiscoveryProvider.h
 create mode 100644 Source/WebCore/Modules/webdial/LocalNetworkEnumerationRequest.cpp
 create mode 100644 Source/WebCore/Modules/webdial/LocalNetworkEnumerationRequest.h
 create mode 100644 Source/WebCore/Modules/webdial/LocalNetworkLaunchingProvider.h
 create mode 100644 Source/WebCore/Modules/webdial/NavigatorLocalNetworkDevices.cpp
 create mode 100644 Source/WebCore/Modules/webdial/NavigatorLocalNetworkDevices.h
 create mode 100644 Source/WebCore/Modules/webdial/NavigatorLocalNetworkDevices.idl
 create mode 100644 Source/WebCore/Modules/webdial/RemoteApplication.cpp
 create mode 100644 Source/WebCore/Modules/webdial/RemoteApplication.h
 create mode 100644 Source/WebCore/Modules/webdial/RemoteApplication.idl
 create mode 100644 Source/WebCore/Modules/webdial/StateChangedEvent.cpp
 create mode 100644 Source/WebCore/Modules/webdial/StateChangedEvent.h
 create mode 100644 Source/WebCore/Modules/webdial/StateChangedEvent.idl
 create mode 100644 Source/WebCore/Modules/webdial/WebDialMessages.cpp
 create mode 100644 Source/WebCore/Modules/webdial/WebDialMessages.h
 create mode 100644 Source/WebCore/platform/cocoa/DiscoveryServiceChannelCocoa.h
 create mode 100644 Source/WebCore/platform/cocoa/DiscoveryServiceChannelCocoa.mm
 create mode 100644 Source/WebCore/platform/cocoa/LocalNetworkDiscoveryProviderCocoa.h
 create mode 100644 Source/WebCore/platform/cocoa/LocalNetworkDiscoveryProviderCocoa.mm
 create mode 100644 Source/WebCore/platform/cocoa/LocalNetworkLaunchingProviderCocoa.h
 create mode 100644 Source/WebCore/platform/cocoa/LocalNetworkLaunchingProviderCocoa.mm
 create mode 100644 Source/WebKit/mac/WebCoreSupport/WebLocalNetworkDiscovererClient.h
 create mode 100644 Source/WebKit/mac/WebCoreSupport/WebLocalNetworkDiscovererClient.mm
 create mode 100644 Source/WebKit2/Shared/DiscoveryService/Cocoa/DiscoveryServicePrivateCocoa.h
 create mode 100644 Source/WebKit2/Shared/DiscoveryService/Cocoa/DiscoveryServicePrivateCocoa.mm
 create mode 100644 Source/WebKit2/Shared/DiscoveryService/DiscoveryService.cpp
 create mode 100644 Source/WebKit2/Shared/DiscoveryService/DiscoveryService.h
 create mode 100644 Source/WebKit2/Shared/DiscoveryService/DiscoveryServiceChannelProxy.cpp
 create mode 100644 Source/WebKit2/Shared/DiscoveryService/DiscoveryServiceChannelProxy.h
 create mode 100644 Source/WebKit2/Shared/DiscoveryService/DiscoveryServiceClient.h
 create mode 100644 Source/WebKit2/Shared/DiscoveryService/DiscoveryServiceInvoker.cpp
 create mode 100644 Source/WebKit2/Shared/DiscoveryService/DiscoveryServiceInvoker.h
 create mode 100644 Source/WebKit2/Shared/DiscoveryService/DiscoveryServicePrivate.h
 create mode 100644 Source/WebKit2/UIProcess/API/Cocoa/WKDiscoveryDelegate.h
 create mode 100644 Source/WebKit2/UIProcess/API/Cocoa/WKDiscoveryService.h
 create mode 100644 Source/WebKit2/UIProcess/API/Cocoa/WKDiscoveryService.mm
 create mode 100644 Source/WebKit2/UIProcess/API/Cocoa/WKDiscoveryServiceInternal.h
 create mode 100644 Source/WebKit2/UIProcess/API/Cocoa/WKDiscoveryServicePrivate.h
 create mode 100644 Source/WebKit2/UIProcess/Cocoa/DiscoveryDelegate.h
 create mode 100644 Source/WebKit2/UIProcess/Cocoa/DiscoveryDelegate.mm
 create mode 100644 Source/WebKit2/UIProcess/LocalNetworkDiscoveryPermissionRequestManagerProxy.cpp
 create mode 100644 Source/WebKit2/UIProcess/LocalNetworkDiscoveryPermissionRequestManagerProxy.h
 create mode 100644 Source/WebKit2/UIProcess/LocalNetworkDiscoveryPermissionRequestProxy.cpp
 create mode 100644 Source/WebKit2/UIProcess/LocalNetworkDiscoveryPermissionRequestProxy.h
 create mode 100644 Source/WebKit2/WebProcess/WebCoreSupport/WebLocalNetworkDiscovererClient.cpp
 create mode 100644 Source/WebKit2/WebProcess/WebCoreSupport/WebLocalNetworkDiscovererClient.h
 create mode 100644 Source/WebKit2/WebProcess/WebDial/LocalNetworkDiscoveryPermissionRequestManager.cpp
 create mode 100644 Source/WebKit2/WebProcess/WebDial/LocalNetworkDiscoveryPermissionRequestManager.h
 create mode 100644 Tools/MiniBrowser/UserScriptsManagerWindowController.h
 create mode 100644 Tools/MiniBrowser/mac/UserScriptsManagerWindowController.m
 create mode 100644 Tools/MiniBrowser/mac/UserScriptsManagerWindowController.xib

diff --git a/LayoutTests/webdial/presence-expected.txt b/LayoutTests/webdial/presence-expected.txt
new file mode 100644
index 00000000000..70810f4a638
--- /dev/null
+++ b/LayoutTests/webdial/presence-expected.txt
@@ -0,0 +1,16 @@
+Is WebDial present on navigator
+
+On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".
+
+
+PASS [object LocalNetworkDevices] is defined.
+PASS function getRemoteInvoker() {
+    [native code]
+} is defined.
+PASS function enumerateDevices() {
+    [native code]
+} is defined.
+PASS successfullyParsed is true
+
+TEST COMPLETE
+
diff --git a/LayoutTests/webdial/presence.html b/LayoutTests/webdial/presence.html
new file mode 100644
index 00000000000..c2df23e576f
--- /dev/null
+++ b/LayoutTests/webdial/presence.html
@@ -0,0 +1,18 @@
+<!DOCTYPE html>
+<html>
+<head>
+    <script src="../resources/js-test-pre.js"></script>
+</head>
+<body>
+    <script>
+        description("Is WebDial present on navigator");
+        shouldBeDefined(navigator.localNetworkDevices);
+        shouldBeDefined(navigator.getRemoteInvoker);
+        var devices = navigator.localNetworkDevices;
+        if (devices) {
+            shouldBeDefined(devices.enumerateDevices);
+        }
+    </script>
+    <script src="../resources/js-test-post.js"></script>
+</body>
+</html>
diff --git a/Source/JavaScriptCore/Configurations/FeatureDefines.xcconfig b/Source/JavaScriptCore/Configurations/FeatureDefines.xcconfig
index 625c2c72a6f..ccad2aba169 100644
--- a/Source/JavaScriptCore/Configurations/FeatureDefines.xcconfig
+++ b/Source/JavaScriptCore/Configurations/FeatureDefines.xcconfig
@@ -215,6 +215,7 @@ ENABLE_WEBGPU = ENABLE_WEBGPU;
 ENABLE_WEBGPU[sdk=iphonesimulator*] = ;
 ENABLE_WEB_ANIMATIONS = ENABLE_WEB_ANIMATIONS;
 ENABLE_WEB_AUDIO = ENABLE_WEB_AUDIO;
+ENABLE_WEB_DIAL = ENABLE_WEB_DIAL;
 ENABLE_WEB_REPLAY = $(ENABLE_WEB_REPLAY_$(PLATFORM_NAME)_$(CONFIGURATION));
 ENABLE_WEB_REPLAY_macosx_Debug = ENABLE_WEB_REPLAY;
 ENABLE_WEB_REPLAY_macosx_Release = ENABLE_WEB_REPLAY;
@@ -250,4 +251,4 @@ ENABLE_DRAG_SUPPORT[sdk=iphonesimulator11*] = ENABLE_DRAG_SUPPORT;
 ENABLE_DATA_INTERACTION[sdk=iphoneos11*] = ENABLE_DATA_INTERACTION;
 ENABLE_DATA_INTERACTION[sdk=iphonesimulator11*] = ENABLE_DATA_INTERACTION;
 
-FEATURE_DEFINES = $(ENABLE_3D_TRANSFORMS) $(ENABLE_ACCELERATED_2D_CANVAS) $(ENABLE_ACCELERATED_OVERFLOW_SCROLLING) $(ENABLE_APPLE_PAY) $(ENABLE_APPLE_PAY_SESSION_V3) $(ENABLE_ATTACHMENT_ELEMENT) $(ENABLE_AVF_CAPTIONS) $(ENABLE_CACHE_PARTITIONING) $(ENABLE_CANVAS_PATH) $(ENABLE_CANVAS_PROXY) $(ENABLE_CHANNEL_MESSAGING) $(ENABLE_CONTENT_FILTERING) $(ENABLE_CSS_ANIMATIONS_LEVEL_2) $(ENABLE_CSS_BOX_DECORATION_BREAK) $(ENABLE_CSS_COMPOSITING) $(ENABLE_CSS_DEVICE_ADAPTATION) $(ENABLE_CSS_IMAGE_ORIENTATION) $(ENABLE_CSS_IMAGE_RESOLUTION) $(ENABLE_CSS_REGIONS) $(ENABLE_CSS_SCROLL_SNAP) $(ENABLE_CSS_SELECTORS_LEVEL4) $(ENABLE_CSS_TRAILING_WORD) $(ENABLE_CSS3_TEXT) $(ENABLE_CURSOR_VISIBILITY) $(ENABLE_CUSTOM_SCHEME_HANDLER) $(ENABLE_DASHBOARD_SUPPORT) $(ENABLE_DATA_INTERACTION) $(ENABLE_DATA_TRANSFER_ITEMS) $(ENABLE_DATACUE_VALUE) $(ENABLE_DATALIST_ELEMENT) $(ENABLE_DEVICE_ORIENTATION) $(ENABLE_DRAG_SUPPORT) $(ENABLE_ENCRYPTED_MEDIA) $(ENABLE_FAST_JIT_PERMISSIONS) $(ENABLE_FETCH_API) $(ENABLE_FILTERS_LEVEL_2) $(ENABLE_FTL_JIT) $(ENABLE_FULLSCREEN_API) $(ENABLE_GAMEPAD_DEPRECATED) $(ENABLE_GAMEPAD) $(ENABLE_GEOLOCATION) $(ENABLE_ICONDATABASE) $(ENABLE_INDEXED_DATABASE_IN_WORKERS) $(ENABLE_INDEXED_DATABASE) $(ENABLE_INPUT_TYPE_COLOR_POPOVER) $(ENABLE_INPUT_TYPE_COLOR) $(ENABLE_INPUT_TYPE_DATE) $(ENABLE_INPUT_TYPE_DATETIME_INCOMPLETE) $(ENABLE_INPUT_TYPE_DATETIMELOCAL) $(ENABLE_INPUT_TYPE_MONTH) $(ENABLE_INPUT_TYPE_TIME) $(ENABLE_INPUT_TYPE_WEEK) $(ENABLE_INTERSECTION_OBSERVER) $(ENABLE_INTL) $(ENABLE_IOS_GESTURE_EVENTS) $(ENABLE_IOS_TOUCH_EVENTS) $(ENABLE_JIT) $(ENABLE_KEYBOARD_KEY_ATTRIBUTE) $(ENABLE_KEYBOARD_CODE_ATTRIBUTE) $(ENABLE_LEGACY_CSS_VENDOR_PREFIXES) $(ENABLE_LEGACY_ENCRYPTED_MEDIA) $(ENABLE_LEGACY_VENDOR_PREFIXES) $(ENABLE_LETTERPRESS) $(ENABLE_LINK_PREFETCH) $(ENABLE_MAC_GESTURE_EVENTS) $(ENABLE_MATHML) $(ENABLE_MEDIA_CAPTURE) $(ENABLE_MEDIA_CONTROLS_SCRIPT) $(ENABLE_MEDIA_SESSION) $(ENABLE_MEDIA_SOURCE) $(ENABLE_MEDIA_STATISTICS) $(ENABLE_MEDIA_STREAM) $(ENABLE_METER_ELEMENT) $(ENABLE_MHTML) $(ENABLE_MOUSE_CURSOR_SCALE) $(ENABLE_NAVIGATOR_CONTENT_UTILS) $(ENABLE_NAVIGATOR_HWCONCURRENCY) $(ENABLE_NAVIGATOR_STANDALONE) $(ENABLE_NOSNIFF) $(ENABLE_NOTIFICATIONS) $(ENABLE_PDFKIT_PLUGIN) $(ENABLE_POINTER_LOCK) $(ENABLE_PROXIMITY_EVENTS) $(ENABLE_PUBLIC_SUFFIX_LIST) $(ENABLE_QUOTA) $(ENABLE_REMOTE_INSPECTOR) $(ENABLE_REQUEST_AUTOCOMPLETE) $(ENABLE_RESOLUTION_MEDIA_QUERY) $(ENABLE_RESOURCE_USAGE) $(ENABLE_RUBBER_BANDING) $(ENABLE_SERVICE_CONTROLS) $(ENABLE_SPEECH_SYNTHESIS) $(ENABLE_STREAMS_API) $(ENABLE_SUBTLE_CRYPTO) $(ENABLE_SVG_FONTS) $(ENABLE_TELEPHONE_NUMBER_DETECTION) $(ENABLE_TEXT_AUTOSIZING) $(ENABLE_TOUCH_EVENTS) $(ENABLE_TOUCH_ICON_LOADING) $(ENABLE_USERSELECT_ALL) $(ENABLE_VARIATION_FONTS) $(ENABLE_VIDEO_PRESENTATION_MODE) $(ENABLE_MAC_VIDEO_TOOLBOX) $(ENABLE_VIDEO_TRACK) $(ENABLE_VIDEO) $(ENABLE_VIEW_MODE_CSS_MEDIA) $(ENABLE_WEB_ANIMATIONS) $(ENABLE_WEB_AUDIO) $(ENABLE_WEB_REPLAY) $(ENABLE_WEB_RTC) $(ENABLE_WEB_SOCKETS) $(ENABLE_WEB_TIMING) $(ENABLE_WEBASSEMBLY) $(ENABLE_WEBGL) $(ENABLE_WEBGL2) $(ENABLE_WEBGPU) $(ENABLE_WIRELESS_PLAYBACK_TARGET) $(ENABLE_XSLT);
+FEATURE_DEFINES = $(ENABLE_3D_TRANSFORMS) $(ENABLE_ACCELERATED_2D_CANVAS) $(ENABLE_ACCELERATED_OVERFLOW_SCROLLING) $(ENABLE_APPLE_PAY) $(ENABLE_APPLE_PAY_SESSION_V3) $(ENABLE_ATTACHMENT_ELEMENT) $(ENABLE_AVF_CAPTIONS) $(ENABLE_CACHE_PARTITIONING) $(ENABLE_CANVAS_PATH) $(ENABLE_CANVAS_PROXY) $(ENABLE_CHANNEL_MESSAGING) $(ENABLE_CONTENT_FILTERING) $(ENABLE_CSS_ANIMATIONS_LEVEL_2) $(ENABLE_CSS_BOX_DECORATION_BREAK) $(ENABLE_CSS_COMPOSITING) $(ENABLE_CSS_DEVICE_ADAPTATION) $(ENABLE_CSS_IMAGE_ORIENTATION) $(ENABLE_CSS_IMAGE_RESOLUTION) $(ENABLE_CSS_REGIONS) $(ENABLE_CSS_SCROLL_SNAP) $(ENABLE_CSS_SELECTORS_LEVEL4) $(ENABLE_CSS_TRAILING_WORD) $(ENABLE_CSS3_TEXT) $(ENABLE_CURSOR_VISIBILITY) $(ENABLE_CUSTOM_SCHEME_HANDLER) $(ENABLE_DASHBOARD_SUPPORT) $(ENABLE_DATA_INTERACTION) $(ENABLE_DATA_TRANSFER_ITEMS) $(ENABLE_DATACUE_VALUE) $(ENABLE_DATALIST_ELEMENT) $(ENABLE_DEVICE_ORIENTATION) $(ENABLE_DRAG_SUPPORT) $(ENABLE_ENCRYPTED_MEDIA) $(ENABLE_FAST_JIT_PERMISSIONS) $(ENABLE_FETCH_API) $(ENABLE_FILTERS_LEVEL_2) $(ENABLE_FTL_JIT) $(ENABLE_FULLSCREEN_API) $(ENABLE_GAMEPAD_DEPRECATED) $(ENABLE_GAMEPAD) $(ENABLE_GEOLOCATION) $(ENABLE_ICONDATABASE) $(ENABLE_INDEXED_DATABASE_IN_WORKERS) $(ENABLE_INDEXED_DATABASE) $(ENABLE_INPUT_TYPE_COLOR_POPOVER) $(ENABLE_INPUT_TYPE_COLOR) $(ENABLE_INPUT_TYPE_DATE) $(ENABLE_INPUT_TYPE_DATETIME_INCOMPLETE) $(ENABLE_INPUT_TYPE_DATETIMELOCAL) $(ENABLE_INPUT_TYPE_MONTH) $(ENABLE_INPUT_TYPE_TIME) $(ENABLE_INPUT_TYPE_WEEK) $(ENABLE_INTERSECTION_OBSERVER) $(ENABLE_INTL) $(ENABLE_IOS_GESTURE_EVENTS) $(ENABLE_IOS_TOUCH_EVENTS) $(ENABLE_JIT) $(ENABLE_KEYBOARD_KEY_ATTRIBUTE) $(ENABLE_KEYBOARD_CODE_ATTRIBUTE) $(ENABLE_LEGACY_CSS_VENDOR_PREFIXES) $(ENABLE_LEGACY_ENCRYPTED_MEDIA) $(ENABLE_LEGACY_VENDOR_PREFIXES) $(ENABLE_LETTERPRESS) $(ENABLE_LINK_PREFETCH) $(ENABLE_MAC_GESTURE_EVENTS) $(ENABLE_MATHML) $(ENABLE_MEDIA_CAPTURE) $(ENABLE_MEDIA_CONTROLS_SCRIPT) $(ENABLE_MEDIA_SESSION) $(ENABLE_MEDIA_SOURCE) $(ENABLE_MEDIA_STATISTICS) $(ENABLE_MEDIA_STREAM) $(ENABLE_METER_ELEMENT) $(ENABLE_MHTML) $(ENABLE_MOUSE_CURSOR_SCALE) $(ENABLE_NAVIGATOR_CONTENT_UTILS) $(ENABLE_NAVIGATOR_HWCONCURRENCY) $(ENABLE_NAVIGATOR_STANDALONE) $(ENABLE_NOSNIFF) $(ENABLE_NOTIFICATIONS) $(ENABLE_PDFKIT_PLUGIN) $(ENABLE_POINTER_LOCK) $(ENABLE_PROXIMITY_EVENTS) $(ENABLE_PUBLIC_SUFFIX_LIST) $(ENABLE_QUOTA) $(ENABLE_REMOTE_INSPECTOR) $(ENABLE_REQUEST_AUTOCOMPLETE) $(ENABLE_RESOLUTION_MEDIA_QUERY) $(ENABLE_RESOURCE_USAGE) $(ENABLE_RUBBER_BANDING) $(ENABLE_SERVICE_CONTROLS) $(ENABLE_SPEECH_SYNTHESIS) $(ENABLE_STREAMS_API) $(ENABLE_SUBTLE_CRYPTO) $(ENABLE_SVG_FONTS) $(ENABLE_TELEPHONE_NUMBER_DETECTION) $(ENABLE_TEXT_AUTOSIZING) $(ENABLE_TOUCH_EVENTS) $(ENABLE_TOUCH_ICON_LOADING) $(ENABLE_USERSELECT_ALL) $(ENABLE_VARIATION_FONTS) $(ENABLE_VIDEO_PRESENTATION_MODE) $(ENABLE_MAC_VIDEO_TOOLBOX) $(ENABLE_VIDEO_TRACK) $(ENABLE_VIDEO) $(ENABLE_VIEW_MODE_CSS_MEDIA) $(ENABLE_WEB_ANIMATIONS) $(ENABLE_WEB_AUDIO) $(ENABLE_WEB_DIAL) $(ENABLE_WEB_REPLAY) $(ENABLE_WEB_RTC) $(ENABLE_WEB_SOCKETS) $(ENABLE_WEB_TIMING) $(ENABLE_WEBASSEMBLY) $(ENABLE_WEBGL) $(ENABLE_WEBGL2) $(ENABLE_WEBGPU) $(ENABLE_WIRELESS_PLAYBACK_TARGET) $(ENABLE_XSLT);
diff --git a/Source/JavaScriptCore/inspector/InjectedScriptBase.cpp b/Source/JavaScriptCore/inspector/InjectedScriptBase.cpp
index 9caa4eb93fe..60c8cd8b639 100644
--- a/Source/JavaScriptCore/inspector/InjectedScriptBase.cpp
+++ b/Source/JavaScriptCore/inspector/InjectedScriptBase.cpp
@@ -85,7 +85,7 @@ void InjectedScriptBase::makeCall(Deprecated::ScriptFunctionCall& function, RefP
     bool hadException = false;
     auto resultValue = callFunctionWithEvalEnabled(function, hadException);
 
-    ASSERT(!hadException);
+//    ASSERT(!hadException);
     if (!hadException) {
         *result = toInspectorValue(*m_injectedScriptObject.scriptState(), resultValue);
         if (!*result)
diff --git a/Source/WTF/wtf/FeatureDefines.h b/Source/WTF/wtf/FeatureDefines.h
index 0a2ce751b2d..a4beba8af5a 100644
--- a/Source/WTF/wtf/FeatureDefines.h
+++ b/Source/WTF/wtf/FeatureDefines.h
@@ -168,6 +168,10 @@ the public iOS SDK. We will also need to update the FeatureDefines.xcconfig file
 #define ENABLE_DOWNLOAD_ATTRIBUTE 0
 #endif
 
+#if !defined(ENABLE_WEB_DIAL)
+#define ENABLE_WEB_DIAL 1
+#endif
+
 #endif /* PLATFORM(IOS) */
 
 /* --------- Apple MAC port (not IOS) --------- */
@@ -223,6 +227,10 @@ the public iOS SDK. We will also need to update the FeatureDefines.xcconfig file
 #define ENABLE_WEB_AUDIO 1
 #endif
 
+#if !defined(ENABLE_WEB_DIAL)
+#define ENABLE_WEB_DIAL 1
+#endif
+
 #if !defined(ENABLE_CURSOR_VISIBILITY)
 #define ENABLE_CURSOR_VISIBILITY 1
 #endif
@@ -716,6 +724,10 @@ the public iOS SDK. We will also need to update the FeatureDefines.xcconfig file
 #define ENABLE_WEB_AUDIO 0
 #endif
 
+#if !defined(ENABLE_WEB_DIAL)
+#define ENABLE_WEB_DIAL 0
+#endif
+
 #if !defined(ENABLE_WEB_REPLAY)
 #define ENABLE_WEB_REPLAY 0
 #endif
diff --git a/Source/WebCore/Configurations/FeatureDefines.xcconfig b/Source/WebCore/Configurations/FeatureDefines.xcconfig
index 625c2c72a6f..ccad2aba169 100644
--- a/Source/WebCore/Configurations/FeatureDefines.xcconfig
+++ b/Source/WebCore/Configurations/FeatureDefines.xcconfig
@@ -215,6 +215,7 @@ ENABLE_WEBGPU = ENABLE_WEBGPU;
 ENABLE_WEBGPU[sdk=iphonesimulator*] = ;
 ENABLE_WEB_ANIMATIONS = ENABLE_WEB_ANIMATIONS;
 ENABLE_WEB_AUDIO = ENABLE_WEB_AUDIO;
+ENABLE_WEB_DIAL = ENABLE_WEB_DIAL;
 ENABLE_WEB_REPLAY = $(ENABLE_WEB_REPLAY_$(PLATFORM_NAME)_$(CONFIGURATION));
 ENABLE_WEB_REPLAY_macosx_Debug = ENABLE_WEB_REPLAY;
 ENABLE_WEB_REPLAY_macosx_Release = ENABLE_WEB_REPLAY;
@@ -250,4 +251,4 @@ ENABLE_DRAG_SUPPORT[sdk=iphonesimulator11*] = ENABLE_DRAG_SUPPORT;
 ENABLE_DATA_INTERACTION[sdk=iphoneos11*] = ENABLE_DATA_INTERACTION;
 ENABLE_DATA_INTERACTION[sdk=iphonesimulator11*] = ENABLE_DATA_INTERACTION;
 
-FEATURE_DEFINES = $(ENABLE_3D_TRANSFORMS) $(ENABLE_ACCELERATED_2D_CANVAS) $(ENABLE_ACCELERATED_OVERFLOW_SCROLLING) $(ENABLE_APPLE_PAY) $(ENABLE_APPLE_PAY_SESSION_V3) $(ENABLE_ATTACHMENT_ELEMENT) $(ENABLE_AVF_CAPTIONS) $(ENABLE_CACHE_PARTITIONING) $(ENABLE_CANVAS_PATH) $(ENABLE_CANVAS_PROXY) $(ENABLE_CHANNEL_MESSAGING) $(ENABLE_CONTENT_FILTERING) $(ENABLE_CSS_ANIMATIONS_LEVEL_2) $(ENABLE_CSS_BOX_DECORATION_BREAK) $(ENABLE_CSS_COMPOSITING) $(ENABLE_CSS_DEVICE_ADAPTATION) $(ENABLE_CSS_IMAGE_ORIENTATION) $(ENABLE_CSS_IMAGE_RESOLUTION) $(ENABLE_CSS_REGIONS) $(ENABLE_CSS_SCROLL_SNAP) $(ENABLE_CSS_SELECTORS_LEVEL4) $(ENABLE_CSS_TRAILING_WORD) $(ENABLE_CSS3_TEXT) $(ENABLE_CURSOR_VISIBILITY) $(ENABLE_CUSTOM_SCHEME_HANDLER) $(ENABLE_DASHBOARD_SUPPORT) $(ENABLE_DATA_INTERACTION) $(ENABLE_DATA_TRANSFER_ITEMS) $(ENABLE_DATACUE_VALUE) $(ENABLE_DATALIST_ELEMENT) $(ENABLE_DEVICE_ORIENTATION) $(ENABLE_DRAG_SUPPORT) $(ENABLE_ENCRYPTED_MEDIA) $(ENABLE_FAST_JIT_PERMISSIONS) $(ENABLE_FETCH_API) $(ENABLE_FILTERS_LEVEL_2) $(ENABLE_FTL_JIT) $(ENABLE_FULLSCREEN_API) $(ENABLE_GAMEPAD_DEPRECATED) $(ENABLE_GAMEPAD) $(ENABLE_GEOLOCATION) $(ENABLE_ICONDATABASE) $(ENABLE_INDEXED_DATABASE_IN_WORKERS) $(ENABLE_INDEXED_DATABASE) $(ENABLE_INPUT_TYPE_COLOR_POPOVER) $(ENABLE_INPUT_TYPE_COLOR) $(ENABLE_INPUT_TYPE_DATE) $(ENABLE_INPUT_TYPE_DATETIME_INCOMPLETE) $(ENABLE_INPUT_TYPE_DATETIMELOCAL) $(ENABLE_INPUT_TYPE_MONTH) $(ENABLE_INPUT_TYPE_TIME) $(ENABLE_INPUT_TYPE_WEEK) $(ENABLE_INTERSECTION_OBSERVER) $(ENABLE_INTL) $(ENABLE_IOS_GESTURE_EVENTS) $(ENABLE_IOS_TOUCH_EVENTS) $(ENABLE_JIT) $(ENABLE_KEYBOARD_KEY_ATTRIBUTE) $(ENABLE_KEYBOARD_CODE_ATTRIBUTE) $(ENABLE_LEGACY_CSS_VENDOR_PREFIXES) $(ENABLE_LEGACY_ENCRYPTED_MEDIA) $(ENABLE_LEGACY_VENDOR_PREFIXES) $(ENABLE_LETTERPRESS) $(ENABLE_LINK_PREFETCH) $(ENABLE_MAC_GESTURE_EVENTS) $(ENABLE_MATHML) $(ENABLE_MEDIA_CAPTURE) $(ENABLE_MEDIA_CONTROLS_SCRIPT) $(ENABLE_MEDIA_SESSION) $(ENABLE_MEDIA_SOURCE) $(ENABLE_MEDIA_STATISTICS) $(ENABLE_MEDIA_STREAM) $(ENABLE_METER_ELEMENT) $(ENABLE_MHTML) $(ENABLE_MOUSE_CURSOR_SCALE) $(ENABLE_NAVIGATOR_CONTENT_UTILS) $(ENABLE_NAVIGATOR_HWCONCURRENCY) $(ENABLE_NAVIGATOR_STANDALONE) $(ENABLE_NOSNIFF) $(ENABLE_NOTIFICATIONS) $(ENABLE_PDFKIT_PLUGIN) $(ENABLE_POINTER_LOCK) $(ENABLE_PROXIMITY_EVENTS) $(ENABLE_PUBLIC_SUFFIX_LIST) $(ENABLE_QUOTA) $(ENABLE_REMOTE_INSPECTOR) $(ENABLE_REQUEST_AUTOCOMPLETE) $(ENABLE_RESOLUTION_MEDIA_QUERY) $(ENABLE_RESOURCE_USAGE) $(ENABLE_RUBBER_BANDING) $(ENABLE_SERVICE_CONTROLS) $(ENABLE_SPEECH_SYNTHESIS) $(ENABLE_STREAMS_API) $(ENABLE_SUBTLE_CRYPTO) $(ENABLE_SVG_FONTS) $(ENABLE_TELEPHONE_NUMBER_DETECTION) $(ENABLE_TEXT_AUTOSIZING) $(ENABLE_TOUCH_EVENTS) $(ENABLE_TOUCH_ICON_LOADING) $(ENABLE_USERSELECT_ALL) $(ENABLE_VARIATION_FONTS) $(ENABLE_VIDEO_PRESENTATION_MODE) $(ENABLE_MAC_VIDEO_TOOLBOX) $(ENABLE_VIDEO_TRACK) $(ENABLE_VIDEO) $(ENABLE_VIEW_MODE_CSS_MEDIA) $(ENABLE_WEB_ANIMATIONS) $(ENABLE_WEB_AUDIO) $(ENABLE_WEB_REPLAY) $(ENABLE_WEB_RTC) $(ENABLE_WEB_SOCKETS) $(ENABLE_WEB_TIMING) $(ENABLE_WEBASSEMBLY) $(ENABLE_WEBGL) $(ENABLE_WEBGL2) $(ENABLE_WEBGPU) $(ENABLE_WIRELESS_PLAYBACK_TARGET) $(ENABLE_XSLT);
+FEATURE_DEFINES = $(ENABLE_3D_TRANSFORMS) $(ENABLE_ACCELERATED_2D_CANVAS) $(ENABLE_ACCELERATED_OVERFLOW_SCROLLING) $(ENABLE_APPLE_PAY) $(ENABLE_APPLE_PAY_SESSION_V3) $(ENABLE_ATTACHMENT_ELEMENT) $(ENABLE_AVF_CAPTIONS) $(ENABLE_CACHE_PARTITIONING) $(ENABLE_CANVAS_PATH) $(ENABLE_CANVAS_PROXY) $(ENABLE_CHANNEL_MESSAGING) $(ENABLE_CONTENT_FILTERING) $(ENABLE_CSS_ANIMATIONS_LEVEL_2) $(ENABLE_CSS_BOX_DECORATION_BREAK) $(ENABLE_CSS_COMPOSITING) $(ENABLE_CSS_DEVICE_ADAPTATION) $(ENABLE_CSS_IMAGE_ORIENTATION) $(ENABLE_CSS_IMAGE_RESOLUTION) $(ENABLE_CSS_REGIONS) $(ENABLE_CSS_SCROLL_SNAP) $(ENABLE_CSS_SELECTORS_LEVEL4) $(ENABLE_CSS_TRAILING_WORD) $(ENABLE_CSS3_TEXT) $(ENABLE_CURSOR_VISIBILITY) $(ENABLE_CUSTOM_SCHEME_HANDLER) $(ENABLE_DASHBOARD_SUPPORT) $(ENABLE_DATA_INTERACTION) $(ENABLE_DATA_TRANSFER_ITEMS) $(ENABLE_DATACUE_VALUE) $(ENABLE_DATALIST_ELEMENT) $(ENABLE_DEVICE_ORIENTATION) $(ENABLE_DRAG_SUPPORT) $(ENABLE_ENCRYPTED_MEDIA) $(ENABLE_FAST_JIT_PERMISSIONS) $(ENABLE_FETCH_API) $(ENABLE_FILTERS_LEVEL_2) $(ENABLE_FTL_JIT) $(ENABLE_FULLSCREEN_API) $(ENABLE_GAMEPAD_DEPRECATED) $(ENABLE_GAMEPAD) $(ENABLE_GEOLOCATION) $(ENABLE_ICONDATABASE) $(ENABLE_INDEXED_DATABASE_IN_WORKERS) $(ENABLE_INDEXED_DATABASE) $(ENABLE_INPUT_TYPE_COLOR_POPOVER) $(ENABLE_INPUT_TYPE_COLOR) $(ENABLE_INPUT_TYPE_DATE) $(ENABLE_INPUT_TYPE_DATETIME_INCOMPLETE) $(ENABLE_INPUT_TYPE_DATETIMELOCAL) $(ENABLE_INPUT_TYPE_MONTH) $(ENABLE_INPUT_TYPE_TIME) $(ENABLE_INPUT_TYPE_WEEK) $(ENABLE_INTERSECTION_OBSERVER) $(ENABLE_INTL) $(ENABLE_IOS_GESTURE_EVENTS) $(ENABLE_IOS_TOUCH_EVENTS) $(ENABLE_JIT) $(ENABLE_KEYBOARD_KEY_ATTRIBUTE) $(ENABLE_KEYBOARD_CODE_ATTRIBUTE) $(ENABLE_LEGACY_CSS_VENDOR_PREFIXES) $(ENABLE_LEGACY_ENCRYPTED_MEDIA) $(ENABLE_LEGACY_VENDOR_PREFIXES) $(ENABLE_LETTERPRESS) $(ENABLE_LINK_PREFETCH) $(ENABLE_MAC_GESTURE_EVENTS) $(ENABLE_MATHML) $(ENABLE_MEDIA_CAPTURE) $(ENABLE_MEDIA_CONTROLS_SCRIPT) $(ENABLE_MEDIA_SESSION) $(ENABLE_MEDIA_SOURCE) $(ENABLE_MEDIA_STATISTICS) $(ENABLE_MEDIA_STREAM) $(ENABLE_METER_ELEMENT) $(ENABLE_MHTML) $(ENABLE_MOUSE_CURSOR_SCALE) $(ENABLE_NAVIGATOR_CONTENT_UTILS) $(ENABLE_NAVIGATOR_HWCONCURRENCY) $(ENABLE_NAVIGATOR_STANDALONE) $(ENABLE_NOSNIFF) $(ENABLE_NOTIFICATIONS) $(ENABLE_PDFKIT_PLUGIN) $(ENABLE_POINTER_LOCK) $(ENABLE_PROXIMITY_EVENTS) $(ENABLE_PUBLIC_SUFFIX_LIST) $(ENABLE_QUOTA) $(ENABLE_REMOTE_INSPECTOR) $(ENABLE_REQUEST_AUTOCOMPLETE) $(ENABLE_RESOLUTION_MEDIA_QUERY) $(ENABLE_RESOURCE_USAGE) $(ENABLE_RUBBER_BANDING) $(ENABLE_SERVICE_CONTROLS) $(ENABLE_SPEECH_SYNTHESIS) $(ENABLE_STREAMS_API) $(ENABLE_SUBTLE_CRYPTO) $(ENABLE_SVG_FONTS) $(ENABLE_TELEPHONE_NUMBER_DETECTION) $(ENABLE_TEXT_AUTOSIZING) $(ENABLE_TOUCH_EVENTS) $(ENABLE_TOUCH_ICON_LOADING) $(ENABLE_USERSELECT_ALL) $(ENABLE_VARIATION_FONTS) $(ENABLE_VIDEO_PRESENTATION_MODE) $(ENABLE_MAC_VIDEO_TOOLBOX) $(ENABLE_VIDEO_TRACK) $(ENABLE_VIDEO) $(ENABLE_VIEW_MODE_CSS_MEDIA) $(ENABLE_WEB_ANIMATIONS) $(ENABLE_WEB_AUDIO) $(ENABLE_WEB_DIAL) $(ENABLE_WEB_REPLAY) $(ENABLE_WEB_RTC) $(ENABLE_WEB_SOCKETS) $(ENABLE_WEB_TIMING) $(ENABLE_WEBASSEMBLY) $(ENABLE_WEBGL) $(ENABLE_WEBGL2) $(ENABLE_WEBGPU) $(ENABLE_WIRELESS_PLAYBACK_TARGET) $(ENABLE_XSLT);
diff --git a/Source/WebCore/DerivedSources.make b/Source/WebCore/DerivedSources.make
index 6297ebe5242..54d9ca0fcf8 100644
--- a/Source/WebCore/DerivedSources.make
+++ b/Source/WebCore/DerivedSources.make
@@ -49,6 +49,7 @@ VPATH = \
     $(WebCore)/Modules/streams \
     $(WebCore)/Modules/webaudio \
     $(WebCore)/Modules/webdatabase \
+    $(WebCore)/Modules/webdial \
     $(WebCore)/Modules/webdriver \
     $(WebCore)/Modules/websockets \
     $(WebCore)/animation \
@@ -275,6 +276,12 @@ JS_BINDING_IDLS = \
     $(WebCore)/Modules/webdatabase/SQLTransaction.idl \
     $(WebCore)/Modules/webdatabase/SQLTransactionCallback.idl \
     $(WebCore)/Modules/webdatabase/SQLTransactionErrorCallback.idl \
+    $(WebCore)/Modules/webdial/LocalNetworkDevice.idl \
+    $(WebCore)/Modules/webdial/LocalNetworkDeviceDescriptor.idl \
+    $(WebCore)/Modules/webdial/LocalNetworkDevices.idl \
+    $(WebCore)/Modules/webdial/NavigatorLocalNetworkDevices.idl \
+    $(WebCore)/Modules/webdial/RemoteApplication.idl \
+    $(WebCore)/Modules/webdial/StateChangedEvent.idl \
     $(WebCore)/Modules/webdriver/NavigatorWebDriver.idl \
     $(WebCore)/Modules/websockets/CloseEvent.idl \
     $(WebCore)/Modules/websockets/WebSocket.idl \
diff --git a/Source/WebCore/Modules/webdial/DiscoveryServiceChannel.cpp b/Source/WebCore/Modules/webdial/DiscoveryServiceChannel.cpp
new file mode 100644
index 00000000000..fdb1d4dd086
--- /dev/null
+++ b/Source/WebCore/Modules/webdial/DiscoveryServiceChannel.cpp
@@ -0,0 +1,53 @@
+/*
+ * Copyright (C) 2016 Michal Debski <mi.zd.debski@gmail.com>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1.  Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ * 2.  Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ * 3.  Neither the name of Apple Inc. ("Apple") nor the names of
+ *     its contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include "config.h"
+
+#if ENABLE(WEB_DIAL)
+#include "DiscoveryServiceChannel.h"
+
+namespace WebCore {
+
+void DiscoveryServiceChannel::setMessageCallback(MessageCallback&& cb)
+{
+    m_messageCallback = WTFMove(cb);
+}
+
+void DiscoveryServiceChannel::setErrorCallback(ErrorCallback&& cb)
+{
+    m_errorCallback = WTFMove(cb);
+}
+
+void DiscoveryServiceChannel::setClosedCallback(ClosedCallback&& cb)
+{
+    m_closedCallback = WTFMove(cb);
+}
+
+} // namespace WebCore
+
+#endif // ENABLE(WEB_DIAL)
diff --git a/Source/WebCore/Modules/webdial/DiscoveryServiceChannel.h b/Source/WebCore/Modules/webdial/DiscoveryServiceChannel.h
new file mode 100644
index 00000000000..d822e803a98
--- /dev/null
+++ b/Source/WebCore/Modules/webdial/DiscoveryServiceChannel.h
@@ -0,0 +1,67 @@
+/*
+ * Copyright (C) 2016 Michal Debski <mi.zd.debski@gmail.com>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1.  Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ * 2.  Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ * 3.  Neither the name of Apple Inc. ("Apple") nor the names of
+ *     its contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef DiscoveryServiceChannel_h
+#define DiscoveryServiceChannel_h
+
+#if ENABLE(WEB_DIAL)
+
+#include <functional>
+#include <wtf/RefCounted.h>
+#include <wtf/text/WTFString.h>
+#include <wtf/Vector.h>
+
+namespace WebCore {
+
+class DiscoveryServiceChannel : public RefCounted<DiscoveryServiceChannel> {
+public:
+    using MessageCallback = std::function<void(const uint8_t* data, size_t size)>;
+    using ErrorCallback = std::function<void(const String&)>;
+    using ClosedCallback = std::function<void()>;
+
+    virtual ~DiscoveryServiceChannel() = default;
+
+    WEBCORE_EXPORT virtual void open() = 0;
+    WEBCORE_EXPORT virtual void reopen() = 0;
+    WEBCORE_EXPORT virtual size_t send(const uint8_t* data, size_t size) = 0;
+    WEBCORE_EXPORT virtual void close() = 0;
+
+    WEBCORE_EXPORT void setMessageCallback(MessageCallback&& cb);
+    WEBCORE_EXPORT void setErrorCallback(ErrorCallback&& cb);
+    WEBCORE_EXPORT void setClosedCallback(ClosedCallback&& cb);
+
+protected:
+    MessageCallback m_messageCallback;
+    ErrorCallback m_errorCallback;
+    ClosedCallback m_closedCallback;
+};
+
+} // namespace WebCore
+
+#endif // ENABLE(WEB_DIAL)
+#endif // DiscoveryServiceChannel_h
diff --git a/Source/WebCore/Modules/webdial/LocalNetworkDevice.cpp b/Source/WebCore/Modules/webdial/LocalNetworkDevice.cpp
new file mode 100644
index 00000000000..e32e562dc41
--- /dev/null
+++ b/Source/WebCore/Modules/webdial/LocalNetworkDevice.cpp
@@ -0,0 +1,50 @@
+/*
+ * Copyright (C) 2016 Michal Debski <mi.zd.debski@gmail.com>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1.  Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ * 2.  Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ * 3.  Neither the name of Apple Inc. ("Apple") nor the names of
+ *     its contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include "config.h"
+
+#if ENABLE(WEB_DIAL)
+#include "LocalNetworkDevice.h"
+
+#include <wtf/RefPtr.h>
+
+namespace WebCore {
+    
+LocalNetworkDevice::LocalNetworkDevice(Ref<LocalNetworkDeviceDescriptor>&& descriptor, Ref<LocalNetworkLaunchingProvider>&& provider)
+    : m_descriptor(WTFMove(descriptor))
+    , m_launchingProvider(WTFMove(provider))
+{ }
+
+void LocalNetworkDevice::launch(ScriptExecutionContext& context, const String& url, LocalNetworkLaunchingProvider::Promise&& promise)
+{
+    m_launchingProvider->launch(context, url, WTFMove(promise));
+}
+
+} // namespace WebCore
+
+#endif // ENABLE(WEB_DIAL)
diff --git a/Source/WebCore/Modules/webdial/LocalNetworkDevice.h b/Source/WebCore/Modules/webdial/LocalNetworkDevice.h
new file mode 100644
index 00000000000..94a6dac5718
--- /dev/null
+++ b/Source/WebCore/Modules/webdial/LocalNetworkDevice.h
@@ -0,0 +1,71 @@
+/*
+ * Copyright (C) 2016 Michal Debski <mi.zd.debski@gmail.com>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1.  Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ * 2.  Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ * 3.  Neither the name of Apple Inc. ("Apple") nor the names of
+ *     its contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef LocalNetworkDevice_h
+#define LocalNetworkDevice_h
+
+#if ENABLE(WEB_DIAL)
+
+#include "JSDOMPromiseDeferred.h"
+#include "LocalNetworkDeviceDescriptor.h"
+#include "LocalNetworkLaunchingProvider.h"
+#include <wtf/Ref.h>
+#include <wtf/RefCounted.h>
+#include <wtf/text/WTFString.h>
+#include <wtf/Vector.h>
+
+namespace WebCore {
+
+class LocalNetworkLaunchingProvider;
+class ScriptExecutionContext;
+
+class LocalNetworkDevice : public RefCounted<LocalNetworkDevice> {
+public:
+    static Ref<LocalNetworkDevice> create(Ref<LocalNetworkDeviceDescriptor>&& descriptor, Ref<LocalNetworkLaunchingProvider>&& provider)
+    {
+        return adoptRef(*new LocalNetworkDevice(WTFMove(descriptor), WTFMove(provider)));
+    }
+
+    LocalNetworkDeviceDescriptor& descriptor() { return m_descriptor.get(); }
+    
+    void launch(ScriptExecutionContext&, const String& url, LocalNetworkLaunchingProvider::Promise&&);
+    
+private:
+    LocalNetworkDevice(Ref<LocalNetworkDeviceDescriptor>&&, Ref<LocalNetworkLaunchingProvider>&&);
+    
+    Ref<LocalNetworkDeviceDescriptor> m_descriptor;
+    Ref<LocalNetworkLaunchingProvider> m_launchingProvider;
+};
+
+using LocalNetworkDeviceVector = Vector<RefPtr<LocalNetworkDevice>>;
+
+} // namespace WebCore
+
+#endif // ENABLE(WEB_DIAL)
+
+#endif // LocalNetworkDevice_h
diff --git a/Source/WebCore/Modules/webdial/LocalNetworkDevice.idl b/Source/WebCore/Modules/webdial/LocalNetworkDevice.idl
new file mode 100644
index 00000000000..d8db83f0457
--- /dev/null
+++ b/Source/WebCore/Modules/webdial/LocalNetworkDevice.idl
@@ -0,0 +1,36 @@
+/*
+ * Copyright (C) 2016 Michal Debski <mi.zd.debski@gmail.com>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1.  Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ * 2.  Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ * 3.  Neither the name of Apple Inc. ("Apple") nor the names of
+ *     its contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+[
+    Conditional=WEB_DIAL,
+    ImplementationLacksVTable
+]
+interface LocalNetworkDevice {
+    readonly attribute LocalNetworkDeviceDescriptor descriptor;
+    [CallWith=ScriptExecutionContext] Promise<RemoteApplication> launch(DOMString url);
+};
diff --git a/Source/WebCore/Modules/webdial/LocalNetworkDeviceDescriptor.cpp b/Source/WebCore/Modules/webdial/LocalNetworkDeviceDescriptor.cpp
new file mode 100644
index 00000000000..cc5f59fe9a4
--- /dev/null
+++ b/Source/WebCore/Modules/webdial/LocalNetworkDeviceDescriptor.cpp
@@ -0,0 +1,44 @@
+/*
+ * Copyright (C) 2016 Michal Debski <mi.zd.debski@gmail.com>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1.  Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ * 2.  Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ * 3.  Neither the name of Apple Inc. ("Apple") nor the names of
+ *     its contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include "config.h"
+
+#if ENABLE(WEB_DIAL)
+#include "LocalNetworkDeviceDescriptor.h"
+
+#include <wtf/RefPtr.h>
+
+namespace WebCore {
+    
+LocalNetworkDeviceDescriptor::LocalNetworkDeviceDescriptor(const String& userAgent)
+    : m_userAgent(userAgent)
+{ }
+    
+} // namespace WebCore
+
+#endif // ENABLE(WEB_DIAL)
diff --git a/Source/WebCore/Modules/webdial/LocalNetworkDeviceDescriptor.h b/Source/WebCore/Modules/webdial/LocalNetworkDeviceDescriptor.h
new file mode 100644
index 00000000000..b8a453ca30f
--- /dev/null
+++ b/Source/WebCore/Modules/webdial/LocalNetworkDeviceDescriptor.h
@@ -0,0 +1,59 @@
+/*
+ * Copyright (C) 2016 Michal Debski <mi.zd.debski@gmail.com>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1.  Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ * 2.  Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ * 3.  Neither the name of Apple Inc. ("Apple") nor the names of
+ *     its contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef LocalNetworkDeviceDescriptor_h
+#define LocalNetworkDeviceDescriptor_h
+
+#if ENABLE(WEB_DIAL)
+
+#include <wtf/Ref.h>
+#include <wtf/RefCounted.h>
+#include <wtf/text/WTFString.h>
+
+namespace WebCore {
+    
+class LocalNetworkDeviceDescriptor : public RefCounted<LocalNetworkDeviceDescriptor> {
+public:
+    static Ref<LocalNetworkDeviceDescriptor> create(const String& userAgent)
+    {
+        return adoptRef(*new LocalNetworkDeviceDescriptor(userAgent));
+    }
+    
+    const String& userAgent() const { return m_userAgent; }
+    
+private:
+    LocalNetworkDeviceDescriptor(const String& userAgent);
+    
+    String m_userAgent;
+};
+    
+} // namespace WebCore
+
+#endif // ENABLE(WEB_DIAL)
+
+#endif // LocalNetworkDeviceDescriptor_h
diff --git a/Source/WebCore/Modules/webdial/LocalNetworkDeviceDescriptor.idl b/Source/WebCore/Modules/webdial/LocalNetworkDeviceDescriptor.idl
new file mode 100644
index 00000000000..c8c932e7fbb
--- /dev/null
+++ b/Source/WebCore/Modules/webdial/LocalNetworkDeviceDescriptor.idl
@@ -0,0 +1,35 @@
+/*
+ * Copyright (C) 2016 Michal Debski <mi.zd.debski@gmail.com>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1.  Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ * 2.  Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ * 3.  Neither the name of Apple Inc. ("Apple") nor the names of
+ *     its contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+[
+    Conditional=WEB_DIAL,
+    ImplementationLacksVTable
+]
+interface LocalNetworkDeviceDescriptor {
+    readonly attribute DOMString userAgent;
+};
diff --git a/Source/WebCore/Modules/webdial/LocalNetworkDevices.cpp b/Source/WebCore/Modules/webdial/LocalNetworkDevices.cpp
new file mode 100644
index 00000000000..9664b84e8e7
--- /dev/null
+++ b/Source/WebCore/Modules/webdial/LocalNetworkDevices.cpp
@@ -0,0 +1,88 @@
+/*
+ * Copyright (C) 2016 Michal Debski <mi.zd.debski@gmail.com>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1.  Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ * 2.  Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ * 3.  Neither the name of Apple Inc. ("Apple") nor the names of
+ *     its contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include "config.h"
+
+#if ENABLE(WEB_DIAL)
+#include "LocalNetworkDevices.h"
+
+#include "Document.h"
+#include "Frame.h"
+#include "Logging.h"
+#include "LocalNetworkEnumerationRequest.h"
+#include "NotImplemented.h"
+#include "Page.h"
+
+namespace WebCore {
+
+Ref<LocalNetworkDevices> LocalNetworkDevices::create(ScriptExecutionContext* context)
+{
+    auto devices = adoptRef(*new LocalNetworkDevices(context));
+    devices.get().suspendIfNeeded();
+    return devices;
+}
+
+LocalNetworkDevices::LocalNetworkDevices(ScriptExecutionContext* context)
+    : ActiveDOMObject(context)
+{
+}
+
+ExceptionOr<void> LocalNetworkDevices::enumerateDevices(EnumeratePromise&& promise)
+{
+    LOG(WebDial, "LocalNetworkDevices::enumerateDevices()");
+    return LocalNetworkEnumerationRequest::start(downcast<Document>(scriptExecutionContext()), WTFMove(promise));
+}
+
+void LocalNetworkDevices::LocalNetworkDevices::stop()
+{
+    // FIXME: stop permission request?
+}
+
+bool LocalNetworkDevices::canSuspendForDocumentSuspension() const
+{
+    return true;
+}
+
+void LocalNetworkDevices::suspend(ReasonForSuspension)
+{
+
+}
+
+void LocalNetworkDevices::resume()
+{
+
+}
+
+const char* LocalNetworkDevices::activeDOMObjectName() const
+{
+    return "LocalNetworkDevices";
+}
+    
+} // namespace WebCore
+
+#endif // ENABLE(WEB_DIAL)
diff --git a/Source/WebCore/Modules/webdial/LocalNetworkDevices.h b/Source/WebCore/Modules/webdial/LocalNetworkDevices.h
new file mode 100644
index 00000000000..9e6498a3ef6
--- /dev/null
+++ b/Source/WebCore/Modules/webdial/LocalNetworkDevices.h
@@ -0,0 +1,71 @@
+/*
+ * Copyright (C) 2016 Michal Debski <mi.zd.debski@gmail.com>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1.  Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ * 2.  Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ * 3.  Neither the name of Apple Inc. ("Apple") nor the names of
+ *     its contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef LocalNetworkDevices_h
+#define LocalNetworkDevices_h
+
+#if ENABLE(WEB_DIAL)
+
+#include "ActiveDOMObject.h"
+#include "JSDOMPromiseDeferred.h"
+#include "LocalNetworkDevice.h"
+#include <wtf/Ref.h>
+#include <wtf/RefCounted.h>
+#include <wtf/text/WTFString.h>
+
+namespace WebCore {
+
+class Page;
+class SecurityOrigin;
+
+class LocalNetworkDevices : public ScriptWrappable, public ActiveDOMObject, public RefCounted<LocalNetworkDevices> {
+public:
+    static Ref<LocalNetworkDevices> create(ScriptExecutionContext*);
+
+    using EnumeratePromise = DOMPromiseDeferred<IDLSequence<IDLInterface<LocalNetworkDevice>>>;
+    
+    ExceptionOr<void> enumerateDevices(EnumeratePromise&&);
+
+private:
+    explicit LocalNetworkDevices(ScriptExecutionContext*);
+
+    Page* page() const;
+
+    // ActiveDOMObject
+    void stop() override;
+    bool canSuspendForDocumentSuspension() const override;
+    void suspend(ReasonForSuspension) override;
+    void resume() override;
+    const char* activeDOMObjectName() const override;
+};
+    
+} // namespace WebCore
+
+#endif // ENABLE(WEB_DIAL)
+
+#endif // LocalNetworkDevices_h
diff --git a/Source/WebCore/Modules/webdial/LocalNetworkDevices.idl b/Source/WebCore/Modules/webdial/LocalNetworkDevices.idl
new file mode 100644
index 00000000000..6118d3a1abf
--- /dev/null
+++ b/Source/WebCore/Modules/webdial/LocalNetworkDevices.idl
@@ -0,0 +1,35 @@
+/*
+ * Copyright (C) 2016 Michal Debski <mi.zd.debski@gmail.com>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1.  Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ * 2.  Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ * 3.  Neither the name of Apple Inc. ("Apple") nor the names of
+ *     its contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+[
+    Conditional=WEB_DIAL,
+    NoInterfaceObject
+]
+interface LocalNetworkDevices {
+    [MayThrowException] Promise<sequence<LocalNetworkDevice>> enumerateDevices();
+};
diff --git a/Source/WebCore/Modules/webdial/LocalNetworkDiscovererClient.h b/Source/WebCore/Modules/webdial/LocalNetworkDiscovererClient.h
new file mode 100644
index 00000000000..d3fff4f13cd
--- /dev/null
+++ b/Source/WebCore/Modules/webdial/LocalNetworkDiscovererClient.h
@@ -0,0 +1,55 @@
+/*
+ * Copyright (C) 2016 Michal Debski <mi.zd.debski@gmail.com>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1.  Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ * 2.  Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ * 3.  Neither the name of Apple Inc. ("Apple") nor the names of
+ *     its contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef LocalNetworkDiscovererClient_h
+#define LocalNetworkDiscovererClient_h
+
+#include "DiscoveryServiceChannel.h"
+
+namespace WebCore {
+
+class LocalNetworkEnumerationRequest;
+class Page;
+
+class LocalNetworkDiscovererClient {
+public:
+    virtual ~LocalNetworkDiscovererClient() = default;
+    
+    virtual void pageDestroyed() = 0;
+
+    virtual void requestPermission(LocalNetworkEnumerationRequest&) = 0;
+    virtual void cancelPermissionRequest(LocalNetworkEnumerationRequest&) = 0;
+
+    virtual RefPtr<DiscoveryServiceChannel> getInvokerChannel() = 0;
+};
+
+WEBCORE_EXPORT void provideLocalNetworkDiscoveryTo(Page*, LocalNetworkDiscovererClient*);
+
+} // namespace WebCore
+
+#endif // LocalNetworkDiscovererClient_h
diff --git a/Source/WebCore/Modules/webdial/LocalNetworkDiscoveryController.cpp b/Source/WebCore/Modules/webdial/LocalNetworkDiscoveryController.cpp
new file mode 100644
index 00000000000..5b19dfb6f10
--- /dev/null
+++ b/Source/WebCore/Modules/webdial/LocalNetworkDiscoveryController.cpp
@@ -0,0 +1,72 @@
+/*
+ * Copyright (C) 2016 Michal Debski <mi.zd.debski@gmail.com>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1.  Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ * 2.  Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ * 3.  Neither the name of Apple Inc. ("Apple") nor the names of
+ *     its contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include "config.h"
+#include "LocalNetworkDiscoveryController.h"
+
+#if ENABLE(WEB_DIAL)
+
+#include "LocalNetworkDevices.h"
+
+namespace WebCore {
+
+LocalNetworkDiscoveryController::LocalNetworkDiscoveryController(LocalNetworkDiscovererClient& client)
+: m_client(client)
+{
+}
+
+LocalNetworkDiscoveryController::~LocalNetworkDiscoveryController()
+{
+    m_client.pageDestroyed();
+}
+
+void LocalNetworkDiscoveryController::requestPermission(LocalNetworkEnumerationRequest& requester)
+{
+    m_client.requestPermission(requester);
+}
+
+void LocalNetworkDiscoveryController::cancelPermissionRequest(LocalNetworkEnumerationRequest& requester)
+{
+    m_client.cancelPermissionRequest(requester);
+}
+
+const char* LocalNetworkDiscoveryController::supplementName()
+{
+    return "LocalNetworkDiscoveryController";
+}
+
+void provideLocalNetworkDiscoveryTo(Page* page, LocalNetworkDiscovererClient* client)
+{
+    ASSERT(page);
+    ASSERT(client);
+    Supplement<Page>::provideTo(page, LocalNetworkDiscoveryController::supplementName(), std::make_unique<LocalNetworkDiscoveryController>(*client));
+}
+    
+} // namespace WebCore
+
+#endif // ENABLE(GEOLOCATION)
diff --git a/Source/WebCore/Modules/webdial/LocalNetworkDiscoveryController.h b/Source/WebCore/Modules/webdial/LocalNetworkDiscoveryController.h
new file mode 100644
index 00000000000..5392f4c57d7
--- /dev/null
+++ b/Source/WebCore/Modules/webdial/LocalNetworkDiscoveryController.h
@@ -0,0 +1,67 @@
+/*
+ * Copyright (C) 2016 Michal Debski <mi.zd.debski@gmail.com>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1.  Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ * 2.  Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ * 3.  Neither the name of Apple Inc. ("Apple") nor the names of
+ *     its contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef LocalNetworkDiscoveryController_h
+#define LocalNetworkDiscoveryController_h
+
+#if ENABLE(WEB_DIAL)
+
+#include "LocalNetworkDiscovererClient.h"
+#include "Page.h"
+#include <wtf/HashSet.h>
+#include <wtf/Noncopyable.h>
+#include <wtf/RefPtr.h>
+
+namespace WebCore {
+
+class LocalNetworkDevices;
+
+class LocalNetworkDiscoveryController : public Supplement<Page> {
+    WTF_MAKE_FAST_ALLOCATED;
+    WTF_MAKE_NONCOPYABLE(LocalNetworkDiscoveryController);
+public:
+    LocalNetworkDiscoveryController(LocalNetworkDiscovererClient&);
+    ~LocalNetworkDiscoveryController();
+
+    void requestPermission(LocalNetworkEnumerationRequest&);
+    void cancelPermissionRequest(LocalNetworkEnumerationRequest&);
+
+    LocalNetworkDiscovererClient& client() { return m_client; }
+
+    WEBCORE_EXPORT static const char* supplementName();
+    static LocalNetworkDiscoveryController* from(Page* page) { return static_cast<LocalNetworkDiscoveryController*>(Supplement<Page>::from(page, supplementName())); }
+
+private:
+    LocalNetworkDiscovererClient& m_client;
+};
+    
+} // namespace WebCore
+
+#endif // ENABLE(WEB_DIAL)
+
+#endif // LocalNetworkDiscoveryController_h
diff --git a/Source/WebCore/Modules/webdial/LocalNetworkDiscoveryProvider.h b/Source/WebCore/Modules/webdial/LocalNetworkDiscoveryProvider.h
new file mode 100644
index 00000000000..fa6d3c4279f
--- /dev/null
+++ b/Source/WebCore/Modules/webdial/LocalNetworkDiscoveryProvider.h
@@ -0,0 +1,53 @@
+/*
+ * Copyright (C) 2016 Michal Debski <mi.zd.debski@gmail.com>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1.  Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ * 2.  Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ * 3.  Neither the name of Apple Inc. ("Apple") nor the names of
+ *     its contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef LocalNetworkDiscoveryProvider_h
+#define LocalNetworkDiscoveryProvider_h
+
+#if ENABLE(WEB_DIAL)
+
+#include <memory>
+
+namespace WebCore {
+
+class LocalNetworkEnumerationRequest;
+
+class LocalNetworkDiscoveryProvider {
+public:
+    static std::unique_ptr<LocalNetworkDiscoveryProvider> create(LocalNetworkEnumerationRequest&);
+
+    virtual ~LocalNetworkDiscoveryProvider() = default;
+
+    virtual void startDiscovery() = 0;
+    virtual void cancelDiscovery() = 0;
+};
+
+} // namespace WebCore
+
+#endif // ENABLE(WEB_DIAL)
+#endif // LocalNetworkDiscoveryProvider_h
diff --git a/Source/WebCore/Modules/webdial/LocalNetworkEnumerationRequest.cpp b/Source/WebCore/Modules/webdial/LocalNetworkEnumerationRequest.cpp
new file mode 100644
index 00000000000..49bdcfe36ae
--- /dev/null
+++ b/Source/WebCore/Modules/webdial/LocalNetworkEnumerationRequest.cpp
@@ -0,0 +1,133 @@
+/*
+ * Copyright (C) 2016 Michal Debski <mi.zd.debski@gmail.com>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1.  Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ * 2.  Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ * 3.  Neither the name of Apple Inc. ("Apple") nor the names of
+ *     its contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include "config.h"
+
+#if ENABLE(WEB_DIAL)
+#include "LocalNetworkEnumerationRequest.h"
+
+#include "Document.h"
+#include "ExceptionCode.h"
+#include "JSLocalNetworkDevice.h"
+#include "LocalNetworkDiscoveryController.h"
+#include "Logging.h"
+#include "NotImplemented.h"
+#include "ScriptExecutionContext.h"
+
+namespace WebCore {
+
+ExceptionOr<void> LocalNetworkEnumerationRequest::start(Document* document, LocalNetworkDevices::EnumeratePromise&& promise)
+{
+    LocalNetworkDiscoveryController* discoveryController = LocalNetworkDiscoveryController::from(document ? document->page() : nullptr);
+    if (!discoveryController) {
+        return Exception{NOT_SUPPORTED_ERR};
+    }
+
+    Ref<LocalNetworkEnumerationRequest> request = adoptRef(*new LocalNetworkEnumerationRequest(document, discoveryController, WTFMove(promise)));
+    request->start();
+    return { };
+}
+
+LocalNetworkEnumerationRequest::LocalNetworkEnumerationRequest(ScriptExecutionContext* context, LocalNetworkDiscoveryController* controller, LocalNetworkDevices::EnumeratePromise&& promise)
+    : ContextDestructionObserver(context)
+    , m_controller(controller)
+    , m_promise(WTFMove(promise))
+{
+}
+
+LocalNetworkEnumerationRequest::~LocalNetworkEnumerationRequest()
+{
+}
+
+SecurityOrigin* LocalNetworkEnumerationRequest::localNetworkDevicesDocumentOrigin() const
+{
+    if (!m_scriptExecutionContext)
+        return nullptr;
+
+    return m_scriptExecutionContext->securityOrigin();
+}
+
+SecurityOrigin& LocalNetworkEnumerationRequest::topLevelDocumentOrigin() const
+{
+    ASSERT(m_scriptExecutionContext);
+    return m_scriptExecutionContext->topOrigin();
+}
+
+void LocalNetworkEnumerationRequest::start()
+{
+    m_controller->requestPermission(*this);
+}
+
+void LocalNetworkEnumerationRequest::permissionGranted()
+{
+    if (!m_scriptExecutionContext)
+        return;
+
+    LOG(WebDial, "LocalNetworkEnumerationRequest::permissionGranted()");
+    m_provider = LocalNetworkDiscoveryProvider::create(*this);
+    m_provider->startDiscovery();
+}
+
+void LocalNetworkEnumerationRequest::permissionDenied()
+{
+    if (!m_scriptExecutionContext)
+        return;
+
+    LOG(WebDial, "LocalNetworkEnumerationRequest::permissionDenied()");
+    m_promise.reject(SECURITY_ERR);
+}
+
+void LocalNetworkEnumerationRequest::discoveryHasFinished(LocalNetworkDeviceVector&& devices)
+{
+    m_promise.resolve(WTFMove(devices));
+}
+
+void LocalNetworkEnumerationRequest::failedToPerformDiscovery(const ExceptionCode& ec)
+{
+    m_promise.reject(ec);
+}
+
+void LocalNetworkEnumerationRequest::contextDestroyed()
+{
+    Ref<LocalNetworkEnumerationRequest> protect(*this);
+    
+    if (m_controller) {
+        m_controller->cancelPermissionRequest(*this);
+        m_controller = nullptr;
+    }
+    if (m_provider) {
+        m_provider->cancelDiscovery();
+        m_provider = nullptr;
+    }
+    
+    ContextDestructionObserver::contextDestroyed();
+}
+    
+} // namespace WebCore
+
+#endif // ENABLE(WEB_DIAL)
diff --git a/Source/WebCore/Modules/webdial/LocalNetworkEnumerationRequest.h b/Source/WebCore/Modules/webdial/LocalNetworkEnumerationRequest.h
new file mode 100644
index 00000000000..c48bbe383f8
--- /dev/null
+++ b/Source/WebCore/Modules/webdial/LocalNetworkEnumerationRequest.h
@@ -0,0 +1,75 @@
+/*
+ * Copyright (C) 2016 Michal Debski <mi.zd.debski@gmail.com>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1.  Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ * 2.  Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ * 3.  Neither the name of Apple Inc. ("Apple") nor the names of
+ *     its contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef LocalNetworkEnumerationRequest_h
+#define LocalNetworkEnumerationRequest_h
+
+#if ENABLE(WEB_DIAL)
+
+#include "ContextDestructionObserver.h"
+#include "LocalNetworkDevices.h"
+#include "LocalNetworkDiscoveryProvider.h"
+#include <memory>
+#include <wtf/RefCounted.h>
+
+namespace WebCore {
+
+class LocalNetworkDiscoveryController;
+
+class LocalNetworkEnumerationRequest : public ContextDestructionObserver, public RefCounted<LocalNetworkEnumerationRequest> {
+public:
+    static ExceptionOr<void> start(Document*, LocalNetworkDevices::EnumeratePromise&&);
+
+    ~LocalNetworkEnumerationRequest();
+
+    WEBCORE_EXPORT SecurityOrigin* localNetworkDevicesDocumentOrigin() const;
+    WEBCORE_EXPORT SecurityOrigin& topLevelDocumentOrigin() const;
+
+    void start();
+    WEBCORE_EXPORT void permissionGranted();
+    WEBCORE_EXPORT void permissionDenied();
+
+    void discoveryHasFinished(LocalNetworkDeviceVector&&);
+    void failedToPerformDiscovery(const ExceptionCode&);
+
+private:
+    LocalNetworkEnumerationRequest(ScriptExecutionContext*, LocalNetworkDiscoveryController*, LocalNetworkDevices::EnumeratePromise&&);
+
+    // ContextDestructionObserver
+    void contextDestroyed() final;
+    
+    LocalNetworkDiscoveryController* m_controller;
+    LocalNetworkDevices::EnumeratePromise m_promise;
+    std::unique_ptr<LocalNetworkDiscoveryProvider> m_provider;
+};
+
+} // namespace WebCore
+
+#endif // ENABLE(WEB_DIAL)
+
+#endif // LocalNetworkEnumerationRequest_h
diff --git a/Source/WebCore/Modules/webdial/LocalNetworkLaunchingProvider.h b/Source/WebCore/Modules/webdial/LocalNetworkLaunchingProvider.h
new file mode 100644
index 00000000000..9f020b46053
--- /dev/null
+++ b/Source/WebCore/Modules/webdial/LocalNetworkLaunchingProvider.h
@@ -0,0 +1,53 @@
+/*
+ * Copyright (C) 2016 Michal Debski <mi.zd.debski@gmail.com>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1.  Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ * 2.  Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ * 3.  Neither the name of Apple Inc. ("Apple") nor the names of
+ *     its contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef LocalNetworkLaunchingProvider_h
+#define LocalNetworkLaunchingProvider_h
+
+#if ENABLE(WEB_DIAL)
+
+#include "JSDOMPromiseDeferred.h"
+#include "RemoteApplication.h"
+#include <wtf/RefCounted.h>
+#include <wtf/RefPtr.h>
+
+namespace WebCore {
+
+class LocalNetworkLaunchingProvider : public RefCounted<LocalNetworkLaunchingProvider> {
+public:
+    using Promise = DOMPromiseDeferred<IDLInterface<RemoteApplication>>;
+
+    virtual ~LocalNetworkLaunchingProvider() = default;
+    virtual void launch(ScriptExecutionContext&, const String& url, Promise&&) = 0;
+    virtual void cancelLaunch() = 0;
+};
+
+} // namespace WebCore
+
+#endif // ENABLE(WEB_DIAL)
+#endif // LocalNetworkLaunchingProvider_h
diff --git a/Source/WebCore/Modules/webdial/NavigatorLocalNetworkDevices.cpp b/Source/WebCore/Modules/webdial/NavigatorLocalNetworkDevices.cpp
new file mode 100644
index 00000000000..69782ae2621
--- /dev/null
+++ b/Source/WebCore/Modules/webdial/NavigatorLocalNetworkDevices.cpp
@@ -0,0 +1,109 @@
+/*
+ * Copyright (C) 2016 Michal Debski <mi.zd.debski@gmail.com>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1.  Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ * 2.  Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ * 3.  Neither the name of Apple Inc. ("Apple") nor the names of
+ *     its contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include "config.h"
+
+#if ENABLE(WEB_DIAL)
+#include "NavigatorLocalNetworkDevices.h"
+
+#include "Document.h"
+#include "Frame.h"
+#include "LocalNetworkDevices.h"
+#include "LocalNetworkDiscoveryController.h"
+#include "Navigator.h"
+#include "NotImplemented.h"
+#include "RemoteApplication.h"
+#include "WebDialMessages.h"
+
+namespace WebCore {
+
+NavigatorLocalNetworkDevices::NavigatorLocalNetworkDevices(Frame* frame)
+    : DOMWindowProperty(frame)
+{
+}
+
+NavigatorLocalNetworkDevices* NavigatorLocalNetworkDevices::from(Navigator* navigator)
+{
+    NavigatorLocalNetworkDevices* supplement
+        = static_cast<NavigatorLocalNetworkDevices*>(Supplement<Navigator>::from(navigator, supplementName()));
+
+    if (!supplement) {
+        auto newSupplement = std::make_unique<NavigatorLocalNetworkDevices>(navigator->frame());
+        supplement = newSupplement.get();
+        provideTo(navigator, supplementName(), WTFMove(newSupplement));
+    }
+    
+    return supplement;
+}
+
+LocalNetworkDevices* NavigatorLocalNetworkDevices::localNetworkDevices(Navigator& navigator)
+{
+    return NavigatorLocalNetworkDevices::from(&navigator)->localNetworkDevices();
+}
+
+LocalNetworkDevices* NavigatorLocalNetworkDevices::localNetworkDevices() const
+{
+    if (!m_localNetworkDevices)
+        m_localNetworkDevices = LocalNetworkDevices::create(frame()->document());
+
+    return m_localNetworkDevices.get();
+}
+
+RemoteApplication* NavigatorLocalNetworkDevices::getRemoteInvoker(Navigator& navigator, ScriptExecutionContext& context)
+{
+    return NavigatorLocalNetworkDevices::from(&navigator)->getRemoteInvoker(context);
+}
+
+RemoteApplication* NavigatorLocalNetworkDevices::getRemoteInvoker(ScriptExecutionContext& context)
+{
+    if (m_remoteApplication) {
+        return m_remoteApplication.get();
+    }
+
+    if (frame()->isMainFrame()) {
+        if (LocalNetworkDiscoveryController* discoveryController = LocalNetworkDiscoveryController::from(frame()->document()->page())) {
+            if (RefPtr<DiscoveryServiceChannel> channel = discoveryController->client().getInvokerChannel()) {
+                // channel should be opened because launched message was send
+                const auto openedMessage = WebCore::WebDialMessageOpened::create()->serialize();
+                channel->send(openedMessage.data(), openedMessage.size());
+                m_remoteApplication = RemoteApplication::create(&context, channel.releaseNonNull());
+                return m_remoteApplication.get();
+            }
+        }
+    }
+    return nullptr;
+}
+
+const char* NavigatorLocalNetworkDevices::supplementName()
+{
+    return "NavigatorLocalNetworkDevices";
+}
+
+} // namespace WebCore
+
+#endif // ENABLE(WEB_DIAL)
diff --git a/Source/WebCore/Modules/webdial/NavigatorLocalNetworkDevices.h b/Source/WebCore/Modules/webdial/NavigatorLocalNetworkDevices.h
new file mode 100644
index 00000000000..e8eb38db140
--- /dev/null
+++ b/Source/WebCore/Modules/webdial/NavigatorLocalNetworkDevices.h
@@ -0,0 +1,67 @@
+/*
+ * Copyright (C) 2016 Michal Debski <mi.zd.debski@gmail.com>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1.  Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ * 2.  Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ * 3.  Neither the name of Apple Inc. ("Apple") nor the names of
+ *     its contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef NavigatorLocalNetworkDevices_h
+#define NavigatorLocalNetworkDevices_h
+
+#if ENABLE(WEB_DIAL)
+
+#include "DOMWindowProperty.h"
+#include "RemoteApplication.h"
+#include "Supplementable.h"
+
+namespace WebCore {
+
+class Frame;
+class LocalNetworkDevices;
+class Navigator;
+
+class NavigatorLocalNetworkDevices : public Supplement<Navigator>, public DOMWindowProperty {
+    WTF_MAKE_FAST_ALLOCATED;
+public:
+    explicit NavigatorLocalNetworkDevices(Frame*);
+    virtual ~NavigatorLocalNetworkDevices() = default;
+    static NavigatorLocalNetworkDevices* from(Navigator*);
+
+    static LocalNetworkDevices* localNetworkDevices(Navigator&);
+    LocalNetworkDevices* localNetworkDevices() const;
+    static RemoteApplication* getRemoteInvoker(Navigator&, ScriptExecutionContext&);
+    RemoteApplication* getRemoteInvoker(ScriptExecutionContext&);
+    
+private:
+    static const char* supplementName();
+    
+    mutable RefPtr<LocalNetworkDevices> m_localNetworkDevices;
+    RefPtr<RemoteApplication> m_remoteApplication;
+};
+
+} // namespace WebCore
+
+#endif // ENABLE(WEB_DIAL)
+
+#endif // NavigatorLocalNetworkDevices_h
diff --git a/Source/WebCore/Modules/webdial/NavigatorLocalNetworkDevices.idl b/Source/WebCore/Modules/webdial/NavigatorLocalNetworkDevices.idl
new file mode 100644
index 00000000000..7e4e9c8a9d9
--- /dev/null
+++ b/Source/WebCore/Modules/webdial/NavigatorLocalNetworkDevices.idl
@@ -0,0 +1,34 @@
+/*
+ * Copyright (C) 2016 Michal Debski <mi.zd.debski@gmail.com>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1.  Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ * 2.  Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ * 3.  Neither the name of Apple Inc. ("Apple") nor the names of
+ *     its contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+[Conditional=WEB_DIAL]
+partial interface Navigator {
+    readonly attribute LocalNetworkDevices localNetworkDevices;
+
+    [CallWith=ScriptExecutionContext] RemoteApplication? getRemoteInvoker();
+};
diff --git a/Source/WebCore/Modules/webdial/RemoteApplication.cpp b/Source/WebCore/Modules/webdial/RemoteApplication.cpp
new file mode 100644
index 00000000000..97ac9d1380c
--- /dev/null
+++ b/Source/WebCore/Modules/webdial/RemoteApplication.cpp
@@ -0,0 +1,270 @@
+/*
+ * Copyright (C) 2016 Michal Debski <mi.zd.debski@gmail.com>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1.  Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ * 2.  Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ * 3.  Neither the name of Apple Inc. ("Apple") nor the names of
+ *     its contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include "config.h"
+
+#if ENABLE(WEB_DIAL)
+#include "RemoteApplication.h"
+
+#include "Event.h"
+#include "EventNames.h"
+#include "ExceptionCode.h"
+#include "Logging.h"
+#include "MessageEvent.h"
+#include "NotImplemented.h"
+#include "StateChangedEvent.h"
+#include "WebDialMessages.h"
+
+namespace {
+
+const char* stateAsString(WebCore::RemoteApplication::ConnectionState state) {
+    switch(state) {
+        case WebCore::RemoteApplication::ConnectionState::Connecting:
+            return "ConnectionState::Connecting";
+        case WebCore::RemoteApplication::ConnectionState::Connected:
+            return "ConnectionState::Connected";
+        case WebCore::RemoteApplication::ConnectionState::Opened:
+            return "ConnectionState::Opened";
+        case WebCore::RemoteApplication::ConnectionState::Disconnected:
+            return "ConnectionState::Disconnected";
+    }
+    ASSERT_NOT_REACHED();
+}
+
+} // anonymouse namespace
+
+namespace WebCore {
+
+Ref<RemoteApplication> RemoteApplication::create(ScriptExecutionContext* context, Ref<DiscoveryServiceChannel>&& channel)
+{
+    auto application = adoptRef(*new RemoteApplication(context, WTFMove(channel)));
+    application->suspendIfNeeded();
+    // right now RemoteApplication should always receive opened channel from remote invoker
+    application->m_connectionState = ConnectionState::Opened;
+    return application;
+}
+
+RefPtr<RemoteApplication> RemoteApplication::createAndLaunch(ScriptExecutionContext* context, Ref<DiscoveryServiceChannel>&& channel, const String& url)
+{
+    auto application = RemoteApplication::create(context, WTFMove(channel));
+
+    if (!application->launch(url))
+        return nullptr;
+    // if launching succeded we are waiting for the connection to establish
+    application->m_connectionState = ConnectionState::Connecting;
+    return WTFMove(application);
+}
+
+RemoteApplication::RemoteApplication(ScriptExecutionContext* context, Ref<DiscoveryServiceChannel>&& channel)
+    : ActiveDOMObject(context)
+    , m_asyncEventQueue(*this)
+    , m_connectionState(ConnectionState::Disconnected)
+    , m_channel(WTFMove(channel))
+{
+    LOG(WebDial, "RemoteApplication::RemoteApplication creating for channel %p", m_channel.ptr());
+    m_channel->setMessageCallback([this](const uint8_t* const data, const size_t size){
+        messageReceived(data, size);
+    });
+    m_channel->setErrorCallback([this](const String& reason){
+        changeState(ConnectionState::Disconnected, reason);
+    });
+    m_channel->setClosedCallback([this](){
+        changeState(ConnectionState::Disconnected, "closed");
+    });
+}
+
+bool RemoteApplication::hasPendingActivity() const
+{
+    return m_asyncEventQueue.hasPendingEvents();
+}
+
+ExceptionOr<void> RemoteApplication::reconnect()
+{
+    if (m_connectionState != ConnectionState::Disconnected) {
+        return Exception{INVALID_STATE_ERR};
+    }
+    notImplemented();
+    return {};
+}
+
+void RemoteApplication::disconnect()
+{
+    const auto disconnectMessage = WebCore::WebDialMessageDisconnect::create(emptyString())->serialize();
+    m_channel->send(disconnectMessage.data(), disconnectMessage.size());
+}
+
+ExceptionOr<void> RemoteApplication::canSendMessage() const
+{
+    if (m_connectionState != ConnectionState::Opened)
+        return Exception{INVALID_STATE_ERR};
+    return { };
+}
+
+ExceptionOr<void> RemoteApplication::send(const String& msg)
+{
+    auto exception = canSendMessage();
+    if (!exception.hasException()) {
+        const auto message = WebCore::WebDialMessageTextMessage::create(msg)->serialize();
+        m_channel->send(message.data(), message.size());
+    }
+    return exception;
+}
+
+ExceptionOr<void> RemoteApplication::send(Blob& msg)
+{
+    auto exception = canSendMessage();
+    if (!exception.hasException()) {
+        const auto message = WebCore::WebDialMessageBlobMessage::create(Ref<Blob>(msg))->serialize();
+        m_channel->send(message.data(), message.size());
+    }
+    return exception;
+}
+
+ExceptionOr<void> RemoteApplication::send(ArrayBuffer& msg)
+{
+    auto exception = canSendMessage();
+    if (!exception.hasException()) {
+        const auto message = WebCore::WebDialMessageArrayBufferMessage::create(Ref<ArrayBuffer>(msg))->serialize();
+        m_channel->send(message.data(), message.size());
+    }
+    return exception;
+}
+
+ExceptionOr<void> RemoteApplication::send(Ref<ArrayBufferView>&& msg)
+{
+    if (msg->isNeutered())
+        return Exception{TypeError};
+    return send(*msg->possiblySharedBuffer());
+}
+
+bool RemoteApplication::canSuspendForDocumentSuspension() const
+{
+    return !hasPendingActivity();
+}
+
+const char* RemoteApplication::activeDOMObjectName() const
+{
+    return "RemoteApplication";
+}
+
+void RemoteApplication::scheduleEvent(Ref<Event> &&event)
+{
+    m_asyncEventQueue.enqueueEvent(WTFMove(event));
+}
+
+void RemoteApplication::changeState(const ConnectionState newState, const String& disconnectReason)
+{
+    LOG(WebDial, "RemoteApplication::changeState() changing from %s to %s, reason: %s", stateAsString(m_connectionState), stateAsString(newState), disconnectReason.utf8().data());
+    m_connectionState = newState;
+    if (m_connectionState == ConnectionState::Disconnected)
+        m_disconnectReason = disconnectReason;
+
+    scheduleEvent(StateChangedEvent::create(
+        eventNames().statechangeEvent,
+//        m_connectionState,
+        m_disconnectReason));
+}
+
+bool RemoteApplication::launch(const String& url)
+{
+    m_channel->open();
+
+    const auto request = WebDialMessageRequest::create(url)->serialize();
+    const auto bytes = m_channel->send(request.data(), request.size());
+
+    return bytes == request.size();
+}
+
+void RemoteApplication::messageReceived(const uint8_t* data, size_t size)
+{
+    LOG(WebDial, "RemoteApplication::messageReceived() Got message of size %zu", size);
+
+    RefPtr<WebDialMessage> message = WebCore::WebDialMessage::deserialize(data, size);
+    if (!message) {
+        LOG(WebDial, "RemoteApplication::messageReceived() Could not deserialize message");
+        return;
+    }
+    LOG(WebDial, "RemoteApplication::messageReceived() message of type %s", toString(message->type()));
+    switch (message->type()) {
+        case WebDialMessageType::Message:
+            if (m_connectionState == ConnectionState::Opened) {
+                handleMessageMessage(static_cast<const WebDialMessageMessage&>(*message));
+            } else
+                LOG(WebDial, "RemoteApplication::messageReceived()  received message not in opened state");
+            break;
+        case WebDialMessageType::Error:
+            changeState(ConnectionState::Disconnected, static_cast<const WebDialMessageError&>(*message).errorMessage());
+            m_channel->close();
+            break;
+        case WebDialMessageType::Disconnect: {
+            const auto& reason = static_cast<const WebDialMessageDisconnect&>(*message).reason();
+            changeState(ConnectionState::Disconnected, reason.isEmpty() ? "closed" : reason);
+            m_channel->close();
+            break;
+        }
+        case WebDialMessageType::Launched:
+            if (ConnectionState::Connecting == m_connectionState)
+                changeState(ConnectionState::Connected);
+            else
+                LOG(WebDial, "RemoteApplication::messageReceived() Launch confirmation in illegal state %s", stateAsString(m_connectionState));
+
+            break;
+        case WebDialMessageType::Opened:
+            if (ConnectionState::Connected == m_connectionState)
+                changeState(ConnectionState::Opened);
+            else
+                LOG(WebDial, "RemoteApplication::messageReceived() Open confirmation in illegal state %s", stateAsString(m_connectionState));
+
+            break;
+        case WebDialMessageType::Request:
+            LOG(WebDial, "RemoteApplication::messageReceived() Illegal message");
+    }
+}
+
+void RemoteApplication::handleMessageMessage(const WebDialMessageMessage& message)
+{
+    switch (message.dataType()) {
+        case WebDialDataType::Text:
+            scheduleEvent(MessageEvent::create(static_cast<const WebDialMessageTextMessage&>(message).data()));
+            break;
+        case WebDialDataType::Binary:
+            switch (static_cast<const WebDialMessageBinaryMessage&>(message).binaryType()) {
+                case WebDialBinaryType::ArrayBuffer:
+                    scheduleEvent(MessageEvent::create(static_cast<const WebDialMessageArrayBufferMessage&>(message).data().copyRef()));
+                    break;
+                case WebDialBinaryType::Blob:
+                    scheduleEvent(MessageEvent::create(static_cast<const WebDialMessageBlobMessage&>(message).data().copyRef(), {}));
+                    break;
+            }
+            break;
+    }
+}
+
+} // namespace WebCore
+
+#endif // ENABLE(WEB_DIAL)
diff --git a/Source/WebCore/Modules/webdial/RemoteApplication.h b/Source/WebCore/Modules/webdial/RemoteApplication.h
new file mode 100644
index 00000000000..e2534b32a63
--- /dev/null
+++ b/Source/WebCore/Modules/webdial/RemoteApplication.h
@@ -0,0 +1,112 @@
+/*
+ * Copyright (C) 2016 Michal Debski <mi.zd.debski@gmail.com>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1.  Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ * 2.  Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ * 3.  Neither the name of Apple Inc. ("Apple") nor the names of
+ *     its contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef RemoteApplication_h
+#define RemoteApplication_h
+
+#if ENABLE(WEB_DIAL)
+
+#include "ActiveDOMObject.h"
+#include "Blob.h"
+#include "DiscoveryServiceChannel.h"
+#include "EventTarget.h"
+#include "ExceptionOr.h"
+#include "GenericEventQueue.h"
+#include <runtime/ArrayBufferView.h>
+#include <wtf/Ref.h>
+#include <wtf/RefCounted.h>
+#include <wtf/text/WTFString.h>
+
+namespace WebCore {
+
+class WebDialMessageMessage;
+
+class RemoteApplication final : public RefCounted<RemoteApplication>, public EventTargetWithInlineData, public ActiveDOMObject {
+public:
+    using ParameterType = RemoteApplication;
+    enum class ConnectionState { Connecting, Connected, Opened, Disconnected };
+
+    static Ref<RemoteApplication> create(ScriptExecutionContext*, Ref<DiscoveryServiceChannel>&&);
+    static RefPtr<RemoteApplication> createAndLaunch(ScriptExecutionContext*, Ref<DiscoveryServiceChannel>&&, const String& url);
+
+    // EventTarget interface
+    ScriptExecutionContext* scriptExecutionContext() const override { return ActiveDOMObject::scriptExecutionContext(); }
+    EventTargetInterface eventTargetInterface() const override { return RemoteApplicationEventTargetInterfaceType; }
+
+    using RefCounted<RemoteApplication>::ref;
+    using RefCounted<RemoteApplication>::deref;
+
+    // ActiveDOMObject API.
+    bool hasPendingActivity() const override;
+
+    // RemoteApplication.idl
+    ConnectionState connectionState() const { return m_connectionState; }
+    ExceptionOr<void> reconnect();
+    void disconnect();
+    ExceptionOr<void> send(const String&);
+    ExceptionOr<void> send(Blob&);
+    ExceptionOr<void> send(ArrayBuffer&);
+    ExceptionOr<void> send(Ref<ArrayBufferView>&&);
+
+protected:
+    // EventTarget interface
+    void refEventTarget() override { ref(); }
+    void derefEventTarget() override { deref(); }
+
+private:
+    RemoteApplication(ScriptExecutionContext*, Ref<DiscoveryServiceChannel>&&);
+    
+    // ActiveDOMObject API.
+    const char* activeDOMObjectName() const override;
+    bool canSuspendForDocumentSuspension() const override;
+
+    // EventTarget helper
+    void scheduleEvent(Ref<Event> &&event);
+
+    void changeState(ConnectionState newState, const String& disconnectReason = emptyString());
+    ExceptionOr<void> canSendMessage() const;
+
+    bool launch(const String& url);
+
+    void messageReceived(const uint8_t* data, size_t size);
+    void handleMessageMessage(const WebDialMessageMessage&);
+
+    // EventTarget helper
+    GenericEventQueue m_asyncEventQueue;
+
+    ConnectionState m_connectionState;
+    String m_disconnectReason;
+
+    Ref<DiscoveryServiceChannel> m_channel;
+};
+
+} // namespace WebCore
+
+#endif // ENABLE(WEB_DIAL)
+
+#endif // RemoteApplication_h
diff --git a/Source/WebCore/Modules/webdial/RemoteApplication.idl b/Source/WebCore/Modules/webdial/RemoteApplication.idl
new file mode 100644
index 00000000000..b10dd32db6f
--- /dev/null
+++ b/Source/WebCore/Modules/webdial/RemoteApplication.idl
@@ -0,0 +1,52 @@
+/*
+ * Copyright (C) Michal Debski <mi.zd.debski@gmail.com>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1.  Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ * 2.  Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ * 3.  Neither the name of Apple Inc. ("Apple") nor the names of
+ *     its contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+enum RemoteApplicationConnectionState {
+    "connecting",    
+    "connected",
+    "opened",
+    "disconnected"
+};
+
+[
+    Conditional=WEB_DIAL,
+    ActiveDOMObject
+]
+interface RemoteApplication : EventTarget {
+    readonly attribute RemoteApplicationConnectionState connectionState;
+    [MayThrowException] void reconnect();
+    void disconnect();
+
+    [MayThrowException] void send(DOMString message);
+    [MayThrowException] void send(Blob data);
+    [MayThrowException] void send(ArrayBuffer data);
+    [MayThrowException] void send(ArrayBufferView data);
+    
+    attribute EventHandler onstatechange;
+    attribute EventHandler onmessage;
+};
diff --git a/Source/WebCore/Modules/webdial/StateChangedEvent.cpp b/Source/WebCore/Modules/webdial/StateChangedEvent.cpp
new file mode 100644
index 00000000000..410c8bed082
--- /dev/null
+++ b/Source/WebCore/Modules/webdial/StateChangedEvent.cpp
@@ -0,0 +1,53 @@
+/*
+ * Copyright (C) 2016 Michal Debski <mi.zd.debski@gmail.com>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1.  Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ * 2.  Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ * 3.  Neither the name of Apple Inc. ("Apple") nor the names of
+ *     its contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+#include "config.h"
+#include "StateChangedEvent.h"
+
+#if ENABLE(WEB_DIAL)
+
+namespace WebCore {
+
+StateChangedEvent::StateChangedEvent(const AtomicString& eventType,
+//                                     RemoteApplication::ConnectionState state,
+                                     const String& reason)
+    : Event(eventType, false, false)
+//    , m_state(state)
+    , m_reason(reason)
+{
+}
+
+//StateChangedEvent::StateChangedEvent(const AtomicString& eventType, const StateChangedEventInit& initializer)
+//    : Event(eventType, initializer)
+////    , m_state(initializer.state)
+//    , m_reason(initializer.reason)
+//{
+//}
+
+} // namespace WebCore
+
+#endif // ENABLE(WEB_DIAL)
diff --git a/Source/WebCore/Modules/webdial/StateChangedEvent.h b/Source/WebCore/Modules/webdial/StateChangedEvent.h
new file mode 100644
index 00000000000..fb185847542
--- /dev/null
+++ b/Source/WebCore/Modules/webdial/StateChangedEvent.h
@@ -0,0 +1,79 @@
+/*
+ * Copyright (C) 2016 Michal Debski <mi.zd.debski@gmail.com>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1.  Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ * 2.  Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ * 3.  Neither the name of Apple Inc. ("Apple") nor the names of
+ *     its contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+#ifndef StateChangedEvent_h
+#define StateChangedEvent_h
+
+#if ENABLE(WEB_DIAL)
+
+#include "Event.h"
+#include "RemoteApplication.h"
+#include <wtf/RefPtr.h>
+#include <wtf/text/WTFString.h>
+
+namespace WebCore {
+
+//struct StateChangedEventInit : public EventInit {
+////    RemoteApplication::ConnectionState state;
+//    String reason;
+//};
+
+class StateChangedEvent : public Event {
+public:
+    ~StateChangedEvent() = default;
+
+    static Ref<StateChangedEvent> create(const AtomicString& eventType,
+//                                         RemoteApplication::ConnectionState state,
+                                         const String& reason)
+    {
+        return adoptRef(*new StateChangedEvent(eventType, /*state, */reason));
+    }
+
+//    static Ref<StateChangedEvent> createForBindings(const AtomicString& eventType, const StateChangedEventInit& initializer)
+//    {
+//        return adoptRef(*new StateChangedEvent(eventType, initializer));
+//    }
+
+//    RemoteApplication::ConnectionState state() const { return m_state; }
+    const String& reason() const { return m_reason; }
+
+    EventInterface eventInterface() const override { return StateChangedEventInterfaceType; }
+
+private:
+    explicit StateChangedEvent(const AtomicString& eventType,
+//                               RemoteApplication::ConnectionState,
+                               const String&);
+//    StateChangedEvent(const AtomicString& eventType, const StateChangedEventInit&);
+
+//    RemoteApplication::ConnectionState m_state;
+    String m_reason;
+};
+
+} // namespace WebCore
+
+#endif // ENABLE(WEB_DIAL)
+#endif // StateChangedEvent_h
diff --git a/Source/WebCore/Modules/webdial/StateChangedEvent.idl b/Source/WebCore/Modules/webdial/StateChangedEvent.idl
new file mode 100644
index 00000000000..0d29ffdbd0c
--- /dev/null
+++ b/Source/WebCore/Modules/webdial/StateChangedEvent.idl
@@ -0,0 +1,34 @@
+/*
+* Copyright (C) 2016 Michal Debski <mi.zd.debski@gmail.com>
+*
+* Redistribution and use in source and binary forms, with or without
+* modification, are permitted provided that the following conditions
+* are met:
+*
+* 1.  Redistributions of source code must retain the above copyright
+*     notice, this list of conditions and the following disclaimer.
+* 2.  Redistributions in binary form must reproduce the above copyright
+*     notice, this list of conditions and the following disclaimer in the
+*     documentation and/or other materials provided with the distribution.
+* 3.  Neither the name of Apple Inc. ("Apple") nor the names of
+*     its contributors may be used to endorse or promote products derived
+*     from this software without specific prior written permission.
+*
+* THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
+* EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+* WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+* DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+* DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+* LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+* THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+*/
+
+[
+    Conditional=WEB_DIAL,
+] interface StateChangedEvent : Event {
+    readonly attribute DOMString reason;
+};
+
diff --git a/Source/WebCore/Modules/webdial/WebDialMessages.cpp b/Source/WebCore/Modules/webdial/WebDialMessages.cpp
new file mode 100644
index 00000000000..3dc32cacd9b
--- /dev/null
+++ b/Source/WebCore/Modules/webdial/WebDialMessages.cpp
@@ -0,0 +1,245 @@
+/*
+ * Copyright (C) 2016 Michal Debski <mi.zd.debski@gmail.com>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1.  Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ * 2.  Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ * 3.  Neither the name of Apple Inc. ("Apple") nor the names of
+ *     its contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include "config.h"
+
+#if ENABLE(WEB_DIAL)
+#include "WebDialMessages.h"
+
+#include "Logging.h"
+#include "NotImplemented.h"
+#include <arpa/inet.h>
+#include <type_traits>
+
+namespace {
+
+template<class T>
+T readPOD(const uint8_t*& buffer, size_t& size, typename std::enable_if<std::is_pod<T>::value, int>::type = 0)
+{
+    ASSERT(size >= sizeof(T));
+    size -= sizeof(T);
+    auto oldBuffer = buffer;
+    buffer += sizeof(T);
+    return *reinterpret_cast<const T*>(oldBuffer);
+}
+
+}
+
+namespace WebCore {
+
+RefPtr<WebDialMessage> WebDialMessage::deserialize(const uint8_t* buffer, size_t size)
+{
+    if (size < 8) {
+        LOG(WebDial, "WebDialMessage::deserialize() buffer is too small");
+        return nullptr;
+    }
+
+    const uint32_t version = ntohl(readPOD<decltype(version)>(buffer, size));
+    if (version != kWebDialMessageDraftVersion) {
+        LOG(WebDial, "WebDialMessage::deserialize() incorrect version %u", version);
+        return nullptr;
+    }
+
+    RefPtr<WebDialMessage> deserializedMessage;
+    
+    const WebDialMessageType type = static_cast<WebDialMessageType>(ntohl(readPOD<uint32_t>(buffer, size)));
+    switch(type) {
+        case WebDialMessageType::Error:
+        {
+            String reason;
+            if (size >= 4) {
+                const uint32_t bodySize = ntohl(readPOD<decltype(bodySize)>(buffer, size));
+                if (size < bodySize) {
+                    LOG(WebDial, "WebDialMessage::deserialize() Not enough data");
+                    break;
+                }
+                reason = String(buffer, bodySize);
+                buffer += bodySize;
+                size -= bodySize;
+            }
+            deserializedMessage = WebDialMessageError::create(reason);
+            break;
+        }
+        case WebDialMessageType::Request:
+        {
+            if (size < 4) {
+                LOG(WebDial, "WebDialMessage::deserialize() Not enough data");
+                break;
+            }
+            const uint32_t bodySize = ntohl(readPOD<decltype(bodySize)>(buffer, size));
+            if (size < bodySize) {
+                LOG(WebDial, "WebDialMessage::deserialize() Not enough data");
+                break;
+            }
+            String url(buffer, bodySize);
+            buffer += bodySize;
+            size -= bodySize;
+            deserializedMessage = WebDialMessageRequest::create(url);
+            break;
+        }
+        case WebDialMessageType::Launched:
+        {
+            deserializedMessage = WebDialMessageLaunched::create();
+            break;
+        }
+        case WebDialMessageType::Opened:
+        {
+            deserializedMessage = WebDialMessageOpened::create();
+            break;
+        }
+        case WebDialMessageType::Disconnect:
+        {
+            String reason;
+            if (size >= 4) {
+                const uint32_t bodySize = ntohl(readPOD<decltype(bodySize)>(buffer, size));
+                if (size < bodySize) {
+                    LOG(WebDial, "WebDialMessage::deserialize() Not enough data");
+                    break;
+                }
+                reason = String(buffer, bodySize);
+                buffer += bodySize;
+                size -= bodySize;
+            }
+            deserializedMessage = WebDialMessageDisconnect::create(reason);
+            break;
+        }
+        case WebDialMessageType::Message:
+        {
+            if (size < 5) {
+                LOG(WebDial, "WebDialMessage::deserialize() Not enough data");
+                break;
+            }
+            const uint8_t messageType = ntohl(readPOD<uint8_t>(buffer, size));
+            if (messageType != 0) {
+                // TODO support
+                LOG(WebDial, "WebDialMessage::deserialize() Binary type not supported");
+                notImplemented();
+                break;
+            }
+            const uint32_t bodySize = ntohl(readPOD<decltype(bodySize)>(buffer, size));
+            if (size < bodySize) {
+                LOG(WebDial, "WebDialMessage::deserialize() Not enough data");
+                break;
+            }
+            String data(buffer, bodySize);
+            buffer += bodySize;
+            size -= bodySize;
+            deserializedMessage = WebDialMessageTextMessage::create(data);
+            break;
+        }
+    }
+    if (size > 0) {
+        LOG(WebDial, "WebDialMessage::deserialize() there is some data left");
+    }
+    return deserializedMessage;
+}
+
+Vector<uint8_t> WebDialMessage::serialize()
+{
+    Vector<uint8_t> result;
+    const uint32_t vers = htonl(version());
+    const uint32_t typ = htonl(static_cast<uint32_t>(type()));
+    result.reserveCapacity(sizeof(vers) + sizeof(typ));
+    result.append(reinterpret_cast<const uint8_t*>(&vers), sizeof(vers));
+    result.append(reinterpret_cast<const uint8_t*>(&typ), sizeof(typ));
+    return result;
+}
+
+Vector<uint8_t> WebDialMessageError::serialize()
+{
+    Vector<uint8_t> result = WebDialMessage::serialize();
+    if (!m_errorMessage.isEmpty()) {
+        CString urlInUtf8 = m_errorMessage.utf8();
+        result.reserveCapacity(result.capacity() + sizeof(uint32_t) + urlInUtf8.length());
+        const uint32_t strSize = htonl(urlInUtf8.length());
+        result.append(reinterpret_cast<const uint8_t*>(&strSize), sizeof(strSize));
+        result.append(urlInUtf8.data(), urlInUtf8.length());
+    }
+    return result;
+}
+
+Vector<uint8_t> WebDialMessageRequest::serialize()
+{
+    Vector<uint8_t> result = WebDialMessage::serialize();
+    CString urlInUtf8 = m_url.utf8();
+    result.reserveCapacity(result.capacity() + sizeof(uint32_t) + urlInUtf8.length());
+    const uint32_t strSize = htonl(urlInUtf8.length());
+    result.append(reinterpret_cast<const uint8_t*>(&strSize), sizeof(strSize));
+    result.append(urlInUtf8.data(), urlInUtf8.length());
+    return result;
+}
+
+Vector<uint8_t> WebDialMessageDisconnect::serialize()
+{
+    Vector<uint8_t> result = WebDialMessage::serialize();
+    if (!m_reason.isEmpty()) {
+        CString urlInUtf8 = m_reason.utf8();
+        result.reserveCapacity(result.capacity() + sizeof(uint32_t) + urlInUtf8.length());
+        const uint32_t strSize = htonl(urlInUtf8.length());
+        result.append(reinterpret_cast<const uint8_t*>(&strSize), sizeof(strSize));
+        result.append(urlInUtf8.data(), urlInUtf8.length());
+    }
+    return result;
+}
+
+Vector<uint8_t> WebDialMessageMessage::serialize()
+{
+    Vector<uint8_t> result = WebDialMessage::serialize();
+    static_assert(sizeof(std::underlying_type<decltype(dataType())>::type) == 1, "Need hton when using more than one byte");
+    const uint8_t dType = static_cast<uint8_t>(dataType());
+    result.append(reinterpret_cast<const uint8_t*>(&dType), sizeof(dType));
+    return result;
+}
+
+Vector<uint8_t> WebDialMessageTextMessage::serialize()
+{
+    Vector<uint8_t> result = WebDialMessageMessage::serialize();
+    CString urlInUtf8 = m_data.utf8();
+    result.reserveCapacity(result.capacity() + sizeof(uint32_t) + urlInUtf8.length());
+    const uint32_t strSize = htonl(urlInUtf8.length());
+    result.append(reinterpret_cast<const uint8_t*>(&strSize), sizeof(strSize));    result.append(urlInUtf8.data(), urlInUtf8.length());
+    return result;
+}
+
+Vector<uint8_t> WebDialMessageArrayBufferMessage::serialize()
+{
+    Vector<uint8_t> result = WebDialMessage::serialize();
+    ASSERT_NOT_REACHED();
+    return result;
+}
+
+Vector<uint8_t> WebDialMessageBlobMessage::serialize()
+{
+    Vector<uint8_t> result = WebDialMessage::serialize();
+    ASSERT_NOT_REACHED();
+    return result;
+}
+
+} // namespace WebCore
+
+#endif // ENABLE(WEB_DIAL)
diff --git a/Source/WebCore/Modules/webdial/WebDialMessages.h b/Source/WebCore/Modules/webdial/WebDialMessages.h
new file mode 100644
index 00000000000..ce77e4a4052
--- /dev/null
+++ b/Source/WebCore/Modules/webdial/WebDialMessages.h
@@ -0,0 +1,227 @@
+/*
+ * Copyright (C) 2016 Michal Debski <mi.zd.debski@gmail.com>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1.  Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ * 2.  Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ * 3.  Neither the name of Apple Inc. ("Apple") nor the names of
+ *     its contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef WebDialMessages_h
+#define WebDialMessages_h
+
+#if ENABLE(WEB_DIAL)
+
+#include "Blob.h"
+#include <limits>
+#include <runtime/ArrayBufferView.h>
+#include <wtf/RefCounted.h>
+#include <wtf/text/WTFString.h>
+#include <wtf/Vector.h>
+
+namespace WebCore {
+
+enum class WebDialMessageType : uint32_t {
+    Error = 0,
+    Request = 1,
+    Launched = 2,
+    Opened = 3,
+    Disconnect = 4,
+    Message = 5,
+};
+
+inline const char* toString(const WebDialMessageType& type) {
+    switch (type) {
+        case WebDialMessageType::Error:
+            return "Error";
+        case WebDialMessageType::Request:
+            return "Request";
+        case WebDialMessageType::Launched:
+            return "Launched";
+        case WebDialMessageType::Opened:
+            return "Opened";
+        case WebDialMessageType::Disconnect:
+            return "Disconnect";
+        case WebDialMessageType::Message:
+            return "Message";
+        default:
+            return "UNKNOWN_MESSAGE_TYPE";
+    }
+}
+
+enum class WebDialDataType : uint8_t {
+    Text = 0,
+    Binary = std::numeric_limits<uint8_t>::max(),
+};
+
+enum class WebDialBinaryType : uint8_t {
+    ArrayBuffer = 0,
+    Blob = 1,
+};
+
+constexpr const uint32_t kWebDialMessageDraftVersion = 1;
+
+class WEBCORE_EXPORT WebDialMessage : public RefCounted<WebDialMessage> {
+public:
+    static RefPtr<WebDialMessage> deserialize(const uint8_t* data, size_t size);
+
+    virtual ~WebDialMessage() = default;
+
+    virtual Vector<uint8_t> serialize();
+
+    virtual WebDialMessageType type() const = 0;
+    uint32_t version() const { return kWebDialMessageDraftVersion; }
+
+protected:
+    WebDialMessage() = default;
+};
+
+class WEBCORE_EXPORT WebDialMessageError : public WebDialMessage {
+public:
+    static Ref<WebDialMessageError> create(const String& errorMessage) { return *adoptRef(new WebDialMessageError(errorMessage)); }
+    ~WebDialMessageError() = default;
+
+    Vector<uint8_t> serialize() final;
+
+    WebDialMessageType type() const final { return WebDialMessageType::Error; }
+    const String& errorMessage() const { return m_errorMessage; }
+
+private:
+    WebDialMessageError(const String& errorMessage) : m_errorMessage(errorMessage) {}
+
+    String m_errorMessage;
+};
+
+class WEBCORE_EXPORT WebDialMessageRequest : public WebDialMessage {
+public:
+    static Ref<WebDialMessageRequest> create(const String& url) { return *adoptRef(new WebDialMessageRequest(url)); }
+    ~WebDialMessageRequest() = default;
+
+    Vector<uint8_t> serialize() final;
+
+    WebDialMessageType type() const final { return WebDialMessageType::Request; }
+    const String& url() const { return m_url; }
+    
+private:
+    WebDialMessageRequest(const String& url) : m_url(url) {}
+
+    String m_url;
+};
+
+template <WebDialMessageType messageType>
+class WEBCORE_EXPORT WebDialSimpleMessage : public WebDialMessage {
+public:
+    static Ref<WebDialSimpleMessage> create() { return *adoptRef(new WebDialSimpleMessage()); }
+    ~WebDialSimpleMessage() = default;
+
+    WebDialMessageType type() const final { return messageType; }
+};
+
+using WebDialMessageLaunched = WebDialSimpleMessage<WebDialMessageType::Launched>;
+using WebDialMessageOpened = WebDialSimpleMessage<WebDialMessageType::Opened>;
+
+class WEBCORE_EXPORT WebDialMessageDisconnect : public WebDialMessage {
+public:
+    static Ref<WebDialMessageDisconnect> create(const String& reason) { return *adoptRef(new WebDialMessageDisconnect(reason)); }
+    ~WebDialMessageDisconnect() = default;
+
+    Vector<uint8_t> serialize() final;
+
+    WebDialMessageType type() const final { return WebDialMessageType::Disconnect; }
+    const String& reason() const { return m_reason; }
+
+private:
+    WebDialMessageDisconnect(const String& reason) : m_reason(reason) {}
+
+    String m_reason;
+};
+
+class WEBCORE_EXPORT WebDialMessageMessage : public WebDialMessage {
+public:
+    virtual ~WebDialMessageMessage() = default;
+
+    Vector<uint8_t> serialize() override;
+
+    WebDialMessageType type() const final { return WebDialMessageType::Message; }
+    virtual WebDialDataType dataType() const = 0;
+};
+
+class WEBCORE_EXPORT WebDialMessageTextMessage : public WebDialMessageMessage {
+public:
+    static Ref<WebDialMessageTextMessage> create(const String& data) { return *adoptRef(new WebDialMessageTextMessage(data)); }
+    ~WebDialMessageTextMessage() = default;
+
+    Vector<uint8_t> serialize() final;
+
+    WebDialDataType dataType() const final { return WebDialDataType::Text; }
+    const String& data() const { return m_data; }
+
+private:
+    WebDialMessageTextMessage(const String& data) : m_data(data) {}
+
+    String m_data;
+};
+
+class WEBCORE_EXPORT WebDialMessageBinaryMessage : public WebDialMessageMessage {
+public:
+    virtual ~WebDialMessageBinaryMessage() = default;
+
+    WebDialDataType dataType() const final { return WebDialDataType::Binary; }
+    virtual WebDialBinaryType binaryType() const = 0;
+};
+
+class WEBCORE_EXPORT WebDialMessageArrayBufferMessage : public WebDialMessageBinaryMessage {
+public:
+    static Ref<WebDialMessageArrayBufferMessage> create(Ref<ArrayBuffer>&& data) { return *adoptRef(new WebDialMessageArrayBufferMessage(WTFMove(data))); }
+    ~WebDialMessageArrayBufferMessage() = default;
+
+    Vector<uint8_t> serialize() final;
+
+    WebDialBinaryType binaryType() const final { return WebDialBinaryType::ArrayBuffer; }
+    const Ref<ArrayBuffer>& data() const { return m_data; }
+
+private:
+    WebDialMessageArrayBufferMessage(Ref<ArrayBuffer>&& data) : m_data(WTFMove(data)) {}
+    
+    Ref<ArrayBuffer> m_data;
+};
+
+class WEBCORE_EXPORT WebDialMessageBlobMessage : public WebDialMessageBinaryMessage {
+public:
+    static Ref<WebDialMessageBlobMessage> create(Ref<Blob>&& data) { return *adoptRef(new WebDialMessageBlobMessage(WTFMove(data))); }
+    ~WebDialMessageBlobMessage() = default;
+
+    Vector<uint8_t> serialize() final;
+
+    WebDialBinaryType binaryType() const final { return WebDialBinaryType::Blob; }
+    const Ref<Blob>& data() const { return m_data; }
+
+private:
+    WebDialMessageBlobMessage(Ref<Blob>&& data) : m_data(WTFMove(data)) {}
+    
+    Ref<Blob> m_data;
+};
+
+} // namespace WebCore
+
+#endif // ENABLE(WEB_DIAL)
+#endif // WebDialMessages_h
diff --git a/Source/WebCore/WebCore.xcodeproj/project.pbxproj b/Source/WebCore/WebCore.xcodeproj/project.pbxproj
index 8211cb9e454..88001ebb2f0 100644
--- a/Source/WebCore/WebCore.xcodeproj/project.pbxproj
+++ b/Source/WebCore/WebCore.xcodeproj/project.pbxproj
@@ -1031,18 +1031,57 @@
 		1CCDF5BD1990332400BCEBAD /* SVGToOTFFontConversion.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 1CCDF5BB1990332400BCEBAD /* SVGToOTFFontConversion.cpp */; };
 		1CCDF5BE1990332400BCEBAD /* SVGToOTFFontConversion.h in Headers */ = {isa = PBXBuildFile; fileRef = 1CCDF5BC1990332400BCEBAD /* SVGToOTFFontConversion.h */; };
 		1CFAE3230A6D6A3F0032593D /* libobjc.dylib in Frameworks */ = {isa = PBXBuildFile; fileRef = 1CFAE3220A6D6A3F0032593D /* libobjc.dylib */; };
+		1F0FE1081F0EBEE20057D049 /* DiscoveryServiceChannel.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 1F0FE1071F0EBEE20057D049 /* DiscoveryServiceChannel.cpp */; };
 		1F36EA9C1E21BA1700621E25 /* WebBackgroundTaskController.h in Headers */ = {isa = PBXBuildFile; fileRef = 1F36EA9A1E21BA1700621E25 /* WebBackgroundTaskController.h */; settings = {ATTRIBUTES = (Private, ); }; };
 		1F36EA9D1E21BA1700621E25 /* WebBackgroundTaskController.mm in Sources */ = {isa = PBXBuildFile; fileRef = 1F36EA9B1E21BA1700621E25 /* WebBackgroundTaskController.mm */; };
+		1F37CF4F1CDA5227003B676B /* LocalNetworkDiscoveryProvider.h in Headers */ = {isa = PBXBuildFile; fileRef = 1F37CF4D1CDA5227003B676B /* LocalNetworkDiscoveryProvider.h */; settings = {ATTRIBUTES = (Private, ); }; };
 		1F3C3BEA135CAF3C00B8C1AC /* MediaControls.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 1F3C3BE8135CAF3C00B8C1AC /* MediaControls.cpp */; };
 		1F3C3BEB135CAF3C00B8C1AC /* MediaControls.h in Headers */ = {isa = PBXBuildFile; fileRef = 1F3C3BE9135CAF3C00B8C1AC /* MediaControls.h */; };
 		1F4B419B1E2301C900AC037F /* WebSQLiteDatabaseTrackerClient.mm in Sources */ = {isa = PBXBuildFile; fileRef = 1F8756B01E22BEEF0042C40D /* WebSQLiteDatabaseTrackerClient.mm */; };
+		1F5E6EB21C9B64CC00705954 /* JSRemoteApplication.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 1F5E6EB11C9B612400705954 /* JSRemoteApplication.cpp */; };
+		1F5E6EBC1C9B65FE00705954 /* JSLocalNetworkDevice.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 1F5E6EB31C9B65FE00705954 /* JSLocalNetworkDevice.cpp */; };
+		1F5E6EBD1C9B65FE00705954 /* JSLocalNetworkDevice.h in Headers */ = {isa = PBXBuildFile; fileRef = 1F5E6EB41C9B65FE00705954 /* JSLocalNetworkDevice.h */; };
+		1F5E6EBE1C9B65FE00705954 /* JSLocalNetworkDeviceDescriptor.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 1F5E6EB51C9B65FE00705954 /* JSLocalNetworkDeviceDescriptor.cpp */; };
+		1F5E6EBF1C9B65FE00705954 /* JSLocalNetworkDeviceDescriptor.h in Headers */ = {isa = PBXBuildFile; fileRef = 1F5E6EB61C9B65FE00705954 /* JSLocalNetworkDeviceDescriptor.h */; };
+		1F5E6EC01C9B65FE00705954 /* JSLocalNetworkDevices.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 1F5E6EB71C9B65FE00705954 /* JSLocalNetworkDevices.cpp */; };
+		1F5E6EC11C9B65FE00705954 /* JSLocalNetworkDevices.h in Headers */ = {isa = PBXBuildFile; fileRef = 1F5E6EB81C9B65FE00705954 /* JSLocalNetworkDevices.h */; };
+		1F5E6EC41C9B65FE00705954 /* JSRemoteApplication.h in Headers */ = {isa = PBXBuildFile; fileRef = 1F5E6EBB1C9B65FE00705954 /* JSRemoteApplication.h */; };
+		1F68C3601CC0F87C00FAE38F /* LocalNetworkDiscovererClient.h in Headers */ = {isa = PBXBuildFile; fileRef = 1F68C35F1CC0F87C00FAE38F /* LocalNetworkDiscovererClient.h */; settings = {ATTRIBUTES = (Private, ); }; };
+		1F68C3631CC0FA2600FAE38F /* LocalNetworkDiscoveryController.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 1F68C3611CC0FA2600FAE38F /* LocalNetworkDiscoveryController.cpp */; };
+		1F68C3641CC0FA2600FAE38F /* LocalNetworkDiscoveryController.h in Headers */ = {isa = PBXBuildFile; fileRef = 1F68C3621CC0FA2600FAE38F /* LocalNetworkDiscoveryController.h */; settings = {ATTRIBUTES = (Private, ); }; };
+		1F69D4A01D78B7EF00BA419C /* DiscoveryServiceChannel.h in Headers */ = {isa = PBXBuildFile; fileRef = 1F69D49C1D78B64B00BA419C /* DiscoveryServiceChannel.h */; settings = {ATTRIBUTES = (Private, ); }; };
+		1F69D4A51D78BCB300BA419C /* LocalNetworkLaunchingProviderCocoa.h in Headers */ = {isa = PBXBuildFile; fileRef = 1F69D4A31D78BCAB00BA419C /* LocalNetworkLaunchingProviderCocoa.h */; };
+		1F69D4A61D78BCD000BA419C /* LocalNetworkLaunchingProviderCocoa.mm in Sources */ = {isa = PBXBuildFile; fileRef = 1F69D4A41D78BCAB00BA419C /* LocalNetworkLaunchingProviderCocoa.mm */; };
+		1F69D4A71D78BCD900BA419C /* LocalNetworkDiscoveryProviderCocoa.mm in Sources */ = {isa = PBXBuildFile; fileRef = 1F69D4A21D78BCAB00BA419C /* LocalNetworkDiscoveryProviderCocoa.mm */; };
+		1F69D4A81D78BCDE00BA419C /* LocalNetworkDiscoveryProviderCocoa.h in Headers */ = {isa = PBXBuildFile; fileRef = 1F69D4A11D78BCAB00BA419C /* LocalNetworkDiscoveryProviderCocoa.h */; };
+		1F6ECDB41DAA38F400E126BD /* JSStateChangedEvent.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 1F6ECDB31DAA38A200E126BD /* JSStateChangedEvent.cpp */; };
+		1F6ECDB51DAA38F800E126BD /* JSStateChangedEvent.h in Headers */ = {isa = PBXBuildFile; fileRef = 1F6ECDB21DAA38A200E126BD /* JSStateChangedEvent.h */; };
+		1F7290041C98A7910086C56A /* LocalNetworkDevices.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 1F7290021C98A7910086C56A /* LocalNetworkDevices.cpp */; };
+		1F7290051C98A7910086C56A /* LocalNetworkDevices.h in Headers */ = {isa = PBXBuildFile; fileRef = 1F7290031C98A7910086C56A /* LocalNetworkDevices.h */; settings = {ATTRIBUTES = (Private, ); }; };
+		1F7290081C98AD350086C56A /* NavigatorLocalNetworkDevices.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 1F7290061C98AD350086C56A /* NavigatorLocalNetworkDevices.cpp */; };
+		1F7290091C98AD350086C56A /* NavigatorLocalNetworkDevices.h in Headers */ = {isa = PBXBuildFile; fileRef = 1F7290071C98AD350086C56A /* NavigatorLocalNetworkDevices.h */; settings = {ATTRIBUTES = (Private, ); }; };
+		1F72900C1C98AFF70086C56A /* RemoteApplication.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 1F72900A1C98AFF70086C56A /* RemoteApplication.cpp */; };
+		1F72900D1C98AFF70086C56A /* RemoteApplication.h in Headers */ = {isa = PBXBuildFile; fileRef = 1F72900B1C98AFF70086C56A /* RemoteApplication.h */; settings = {ATTRIBUTES = (Private, ); }; };
 		1F72BF0A187FD4490009BCB3 /* TileControllerMemoryHandlerIOS.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 1F72BF08187FD4270009BCB3 /* TileControllerMemoryHandlerIOS.cpp */; };
 		1F72BF0B187FD45C0009BCB3 /* TileControllerMemoryHandlerIOS.h in Headers */ = {isa = PBXBuildFile; fileRef = 1F72BF09187FD4270009BCB3 /* TileControllerMemoryHandlerIOS.h */; settings = {ATTRIBUTES = (Private, ); }; };
+		1F80B7F21C93431000E9E195 /* LocalNetworkDevice.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 1F80B7F01C93431000E9E195 /* LocalNetworkDevice.cpp */; };
+		1F80B7F31C93431000E9E195 /* LocalNetworkDevice.h in Headers */ = {isa = PBXBuildFile; fileRef = 1F80B7F11C93431000E9E195 /* LocalNetworkDevice.h */; settings = {ATTRIBUTES = (Private, ); }; };
+		1F80B7F61C934B9B00E9E195 /* LocalNetworkDeviceDescriptor.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 1F80B7F41C934B9B00E9E195 /* LocalNetworkDeviceDescriptor.cpp */; };
+		1F80B7F71C934B9B00E9E195 /* LocalNetworkDeviceDescriptor.h in Headers */ = {isa = PBXBuildFile; fileRef = 1F80B7F51C934B9B00E9E195 /* LocalNetworkDeviceDescriptor.h */; settings = {ATTRIBUTES = (Private, ); }; };
 		1F8756B21E22C3350042C40D /* WebSQLiteDatabaseTrackerClient.h in Headers */ = {isa = PBXBuildFile; fileRef = 1F8756B11E22BEEF0042C40D /* WebSQLiteDatabaseTrackerClient.h */; settings = {ATTRIBUTES = (Private, ); }; };
+		1FA4EC831DA7F6D200ACD4BD /* StateChangedEvent.h in Headers */ = {isa = PBXBuildFile; fileRef = 1FA4EC811DA7E1AA00ACD4BD /* StateChangedEvent.h */; };
+		1FA4EC841DA7F6D500ACD4BD /* StateChangedEvent.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 1FA4EC801DA7E1AA00ACD4BD /* StateChangedEvent.cpp */; };
 		1FAFBF1815A5FA6E00083A20 /* UTIUtilities.mm in Sources */ = {isa = PBXBuildFile; fileRef = 1FAFBF1715A5FA5200083A20 /* UTIUtilities.mm */; };
 		1FAFBF1915A5FA7400083A20 /* UTIUtilities.h in Headers */ = {isa = PBXBuildFile; fileRef = 1FAFBF1615A5FA5200083A20 /* UTIUtilities.h */; };
+		1FAFFDA61CCD39D7008459A6 /* LocalNetworkEnumerationRequest.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 1FAFFDA41CCD39D7008459A6 /* LocalNetworkEnumerationRequest.cpp */; };
+		1FAFFDA71CCD39D7008459A6 /* LocalNetworkEnumerationRequest.h in Headers */ = {isa = PBXBuildFile; fileRef = 1FAFFDA51CCD39D7008459A6 /* LocalNetworkEnumerationRequest.h */; settings = {ATTRIBUTES = (Private, ); }; };
+		1FB32AB01D4909F400F90576 /* WebDialMessages.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 1FB32AAE1D4909F400F90576 /* WebDialMessages.cpp */; };
+		1FB32AB11D4909F400F90576 /* WebDialMessages.h in Headers */ = {isa = PBXBuildFile; fileRef = 1FB32AAF1D4909F400F90576 /* WebDialMessages.h */; settings = {ATTRIBUTES = (Private, ); }; };
+		1FB706FA1CDCCEFC00E3B594 /* LocalNetworkLaunchingProvider.h in Headers */ = {isa = PBXBuildFile; fileRef = 1FB706F81CDCCEFC00E3B594 /* LocalNetworkLaunchingProvider.h */; settings = {ATTRIBUTES = (Private, ); }; };
 		1FC40FB91655CCB60040F29E /* SubimageCacheWithTimer.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 1FC40FB81655C5910040F29E /* SubimageCacheWithTimer.cpp */; };
 		1FC40FBA1655CCB90040F29E /* SubimageCacheWithTimer.h in Headers */ = {isa = PBXBuildFile; fileRef = 1FC40FB71655C5910040F29E /* SubimageCacheWithTimer.h */; };
+		1FEAC8401D83132900C8C56E /* DiscoveryServiceChannelCocoa.h in Headers */ = {isa = PBXBuildFile; fileRef = 1F69D4A91D78C2E100BA419C /* DiscoveryServiceChannelCocoa.h */; settings = {ATTRIBUTES = (Private, ); }; };
+		1FEAC8411D83132D00C8C56E /* DiscoveryServiceChannelCocoa.mm in Sources */ = {isa = PBXBuildFile; fileRef = 1F69D4AB1D78C2E100BA419C /* DiscoveryServiceChannelCocoa.mm */; };
 		20D629261253690B00081543 /* InspectorInstrumentation.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 20D629241253690B00081543 /* InspectorInstrumentation.cpp */; };
 		20D629271253690B00081543 /* InspectorInstrumentation.h in Headers */ = {isa = PBXBuildFile; fileRef = 20D629251253690B00081543 /* InspectorInstrumentation.h */; };
 		225A16B50D5C11E900090295 /* WebEventRegion.h in Headers */ = {isa = PBXBuildFile; fileRef = 225A16B30D5C11E900090295 /* WebEventRegion.h */; settings = {ATTRIBUTES = (Private, ); }; };
@@ -8578,16 +8617,61 @@
 		1CDD45E50BA9C84600F90147 /* WebCore.xcconfig */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.xcconfig; path = WebCore.xcconfig; sourceTree = "<group>"; };
 		1CDD45E60BA9C84600F90147 /* Base.xcconfig */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.xcconfig; path = Base.xcconfig; sourceTree = "<group>"; };
 		1CFAE3220A6D6A3F0032593D /* libobjc.dylib */ = {isa = PBXFileReference; lastKnownFileType = "compiled.mach-o.dylib"; name = libobjc.dylib; path = /usr/lib/libobjc.dylib; sourceTree = "<absolute>"; };
+		1F0FE1071F0EBEE20057D049 /* DiscoveryServiceChannel.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = DiscoveryServiceChannel.cpp; sourceTree = "<group>"; };
 		1F36EA9A1E21BA1700621E25 /* WebBackgroundTaskController.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = WebBackgroundTaskController.h; sourceTree = "<group>"; };
 		1F36EA9B1E21BA1700621E25 /* WebBackgroundTaskController.mm */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.objcpp; path = WebBackgroundTaskController.mm; sourceTree = "<group>"; };
+		1F37CF4D1CDA5227003B676B /* LocalNetworkDiscoveryProvider.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = LocalNetworkDiscoveryProvider.h; sourceTree = "<group>"; };
 		1F3C3BE8135CAF3C00B8C1AC /* MediaControls.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = MediaControls.cpp; sourceTree = "<group>"; };
 		1F3C3BE9135CAF3C00B8C1AC /* MediaControls.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = MediaControls.h; sourceTree = "<group>"; };
+		1F5E6EB11C9B612400705954 /* JSRemoteApplication.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = JSRemoteApplication.cpp; sourceTree = "<group>"; };
+		1F5E6EB31C9B65FE00705954 /* JSLocalNetworkDevice.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = JSLocalNetworkDevice.cpp; sourceTree = "<group>"; };
+		1F5E6EB41C9B65FE00705954 /* JSLocalNetworkDevice.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = JSLocalNetworkDevice.h; sourceTree = "<group>"; };
+		1F5E6EB51C9B65FE00705954 /* JSLocalNetworkDeviceDescriptor.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = JSLocalNetworkDeviceDescriptor.cpp; sourceTree = "<group>"; };
+		1F5E6EB61C9B65FE00705954 /* JSLocalNetworkDeviceDescriptor.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = JSLocalNetworkDeviceDescriptor.h; sourceTree = "<group>"; };
+		1F5E6EB71C9B65FE00705954 /* JSLocalNetworkDevices.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = JSLocalNetworkDevices.cpp; sourceTree = "<group>"; };
+		1F5E6EB81C9B65FE00705954 /* JSLocalNetworkDevices.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = JSLocalNetworkDevices.h; sourceTree = "<group>"; };
+		1F5E6EBB1C9B65FE00705954 /* JSRemoteApplication.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = JSRemoteApplication.h; sourceTree = "<group>"; };
+		1F68C35F1CC0F87C00FAE38F /* LocalNetworkDiscovererClient.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = folder; path = LocalNetworkDiscovererClient.h; sourceTree = "<group>"; };
+		1F68C3611CC0FA2600FAE38F /* LocalNetworkDiscoveryController.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = LocalNetworkDiscoveryController.cpp; sourceTree = "<group>"; };
+		1F68C3621CC0FA2600FAE38F /* LocalNetworkDiscoveryController.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = LocalNetworkDiscoveryController.h; sourceTree = "<group>"; };
+		1F69D49C1D78B64B00BA419C /* DiscoveryServiceChannel.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = DiscoveryServiceChannel.h; sourceTree = "<group>"; };
+		1F69D4A11D78BCAB00BA419C /* LocalNetworkDiscoveryProviderCocoa.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = LocalNetworkDiscoveryProviderCocoa.h; sourceTree = "<group>"; };
+		1F69D4A21D78BCAB00BA419C /* LocalNetworkDiscoveryProviderCocoa.mm */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.objcpp; path = LocalNetworkDiscoveryProviderCocoa.mm; sourceTree = "<group>"; };
+		1F69D4A31D78BCAB00BA419C /* LocalNetworkLaunchingProviderCocoa.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = LocalNetworkLaunchingProviderCocoa.h; sourceTree = "<group>"; };
+		1F69D4A41D78BCAB00BA419C /* LocalNetworkLaunchingProviderCocoa.mm */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.objcpp; path = LocalNetworkLaunchingProviderCocoa.mm; sourceTree = "<group>"; };
+		1F69D4A91D78C2E100BA419C /* DiscoveryServiceChannelCocoa.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = DiscoveryServiceChannelCocoa.h; sourceTree = "<group>"; };
+		1F69D4AB1D78C2E100BA419C /* DiscoveryServiceChannelCocoa.mm */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.objcpp; path = DiscoveryServiceChannelCocoa.mm; sourceTree = "<group>"; };
+		1F6ECDB21DAA38A200E126BD /* JSStateChangedEvent.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = JSStateChangedEvent.h; sourceTree = "<group>"; };
+		1F6ECDB31DAA38A200E126BD /* JSStateChangedEvent.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = JSStateChangedEvent.cpp; sourceTree = "<group>"; };
+		1F7290021C98A7910086C56A /* LocalNetworkDevices.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = LocalNetworkDevices.cpp; sourceTree = "<group>"; };
+		1F7290031C98A7910086C56A /* LocalNetworkDevices.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = LocalNetworkDevices.h; sourceTree = "<group>"; };
+		1F7290061C98AD350086C56A /* NavigatorLocalNetworkDevices.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = NavigatorLocalNetworkDevices.cpp; sourceTree = "<group>"; };
+		1F7290071C98AD350086C56A /* NavigatorLocalNetworkDevices.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NavigatorLocalNetworkDevices.h; sourceTree = "<group>"; };
+		1F72900A1C98AFF70086C56A /* RemoteApplication.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = RemoteApplication.cpp; sourceTree = "<group>"; };
+		1F72900B1C98AFF70086C56A /* RemoteApplication.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = RemoteApplication.h; sourceTree = "<group>"; };
 		1F72BF08187FD4270009BCB3 /* TileControllerMemoryHandlerIOS.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = TileControllerMemoryHandlerIOS.cpp; sourceTree = "<group>"; };
 		1F72BF09187FD4270009BCB3 /* TileControllerMemoryHandlerIOS.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = TileControllerMemoryHandlerIOS.h; sourceTree = "<group>"; };
+		1F80B7EB1C93383300E9E195 /* LocalNetworkDevice.idl */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = LocalNetworkDevice.idl; sourceTree = "<group>"; };
+		1F80B7EC1C93383300E9E195 /* LocalNetworkDeviceDescriptor.idl */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = LocalNetworkDeviceDescriptor.idl; sourceTree = "<group>"; };
+		1F80B7ED1C93383300E9E195 /* LocalNetworkDevices.idl */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = LocalNetworkDevices.idl; sourceTree = "<group>"; };
+		1F80B7EE1C93383300E9E195 /* NavigatorLocalNetworkDevices.idl */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = NavigatorLocalNetworkDevices.idl; sourceTree = "<group>"; };
+		1F80B7EF1C93383300E9E195 /* RemoteApplication.idl */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = RemoteApplication.idl; sourceTree = "<group>"; };
+		1F80B7F01C93431000E9E195 /* LocalNetworkDevice.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = LocalNetworkDevice.cpp; sourceTree = "<group>"; };
+		1F80B7F11C93431000E9E195 /* LocalNetworkDevice.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = LocalNetworkDevice.h; sourceTree = "<group>"; };
+		1F80B7F41C934B9B00E9E195 /* LocalNetworkDeviceDescriptor.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = LocalNetworkDeviceDescriptor.cpp; sourceTree = "<group>"; };
+		1F80B7F51C934B9B00E9E195 /* LocalNetworkDeviceDescriptor.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = LocalNetworkDeviceDescriptor.h; sourceTree = "<group>"; };
 		1F8756B01E22BEEF0042C40D /* WebSQLiteDatabaseTrackerClient.mm */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.objcpp; path = WebSQLiteDatabaseTrackerClient.mm; sourceTree = "<group>"; };
 		1F8756B11E22BEEF0042C40D /* WebSQLiteDatabaseTrackerClient.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = WebSQLiteDatabaseTrackerClient.h; sourceTree = "<group>"; };
+		1FA4EC801DA7E1AA00ACD4BD /* StateChangedEvent.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = StateChangedEvent.cpp; sourceTree = "<group>"; };
+		1FA4EC811DA7E1AA00ACD4BD /* StateChangedEvent.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = StateChangedEvent.h; sourceTree = "<group>"; };
+		1FA4EC821DA7E1AA00ACD4BD /* StateChangedEvent.idl */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = StateChangedEvent.idl; sourceTree = "<group>"; };
 		1FAFBF1615A5FA5200083A20 /* UTIUtilities.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = UTIUtilities.h; sourceTree = "<group>"; };
 		1FAFBF1715A5FA5200083A20 /* UTIUtilities.mm */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.objcpp; path = UTIUtilities.mm; sourceTree = "<group>"; };
+		1FAFFDA41CCD39D7008459A6 /* LocalNetworkEnumerationRequest.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = LocalNetworkEnumerationRequest.cpp; sourceTree = "<group>"; };
+		1FAFFDA51CCD39D7008459A6 /* LocalNetworkEnumerationRequest.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = LocalNetworkEnumerationRequest.h; sourceTree = "<group>"; };
+		1FB32AAE1D4909F400F90576 /* WebDialMessages.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = WebDialMessages.cpp; sourceTree = "<group>"; };
+		1FB32AAF1D4909F400F90576 /* WebDialMessages.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = WebDialMessages.h; sourceTree = "<group>"; };
+		1FB706F81CDCCEFC00E3B594 /* LocalNetworkLaunchingProvider.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = LocalNetworkLaunchingProvider.h; sourceTree = "<group>"; };
 		1FC40FB71655C5910040F29E /* SubimageCacheWithTimer.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = SubimageCacheWithTimer.h; sourceTree = "<group>"; };
 		1FC40FB81655C5910040F29E /* SubimageCacheWithTimer.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = SubimageCacheWithTimer.cpp; sourceTree = "<group>"; };
 		20D629241253690B00081543 /* InspectorInstrumentation.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = InspectorInstrumentation.cpp; sourceTree = "<group>"; };
@@ -16828,6 +16912,7 @@
 				E1C8BE4B0E8BD0D10064CB7D /* Threads */,
 				BC9854530CD3DA8F00069BC1 /* Traversal */,
 				FDA15E7B12B03E04003A583A /* WebAudio */,
+				1F5E6EB01C9B5DC800705954 /* WebDial */,
 				5DA5E0F9102B950400088CF9 /* WebSockets */,
 				BC9854430CD3D9D000069BC1 /* Window */,
 				A83B79220CCB00F0000B0825 /* XML */,
@@ -17378,6 +17463,59 @@
 			tabWidth = 4;
 			usesTabs = 0;
 		};
+		1F5E6EB01C9B5DC800705954 /* WebDial */ = {
+			isa = PBXGroup;
+			children = (
+				1F5E6EB31C9B65FE00705954 /* JSLocalNetworkDevice.cpp */,
+				1F5E6EB41C9B65FE00705954 /* JSLocalNetworkDevice.h */,
+				1F5E6EB51C9B65FE00705954 /* JSLocalNetworkDeviceDescriptor.cpp */,
+				1F5E6EB61C9B65FE00705954 /* JSLocalNetworkDeviceDescriptor.h */,
+				1F5E6EB71C9B65FE00705954 /* JSLocalNetworkDevices.cpp */,
+				1F5E6EB81C9B65FE00705954 /* JSLocalNetworkDevices.h */,
+				1F5E6EB11C9B612400705954 /* JSRemoteApplication.cpp */,
+				1F5E6EBB1C9B65FE00705954 /* JSRemoteApplication.h */,
+				1F6ECDB31DAA38A200E126BD /* JSStateChangedEvent.cpp */,
+				1F6ECDB21DAA38A200E126BD /* JSStateChangedEvent.h */,
+			);
+			name = WebDial;
+			sourceTree = "<group>";
+		};
+		1F80B7EA1C9337E800E9E195 /* webdial */ = {
+			isa = PBXGroup;
+			children = (
+				1F0FE1071F0EBEE20057D049 /* DiscoveryServiceChannel.cpp */,
+				1F69D49C1D78B64B00BA419C /* DiscoveryServiceChannel.h */,
+				1F80B7F01C93431000E9E195 /* LocalNetworkDevice.cpp */,
+				1F80B7F11C93431000E9E195 /* LocalNetworkDevice.h */,
+				1F80B7EB1C93383300E9E195 /* LocalNetworkDevice.idl */,
+				1F80B7F41C934B9B00E9E195 /* LocalNetworkDeviceDescriptor.cpp */,
+				1F80B7F51C934B9B00E9E195 /* LocalNetworkDeviceDescriptor.h */,
+				1F80B7EC1C93383300E9E195 /* LocalNetworkDeviceDescriptor.idl */,
+				1F7290021C98A7910086C56A /* LocalNetworkDevices.cpp */,
+				1F7290031C98A7910086C56A /* LocalNetworkDevices.h */,
+				1F80B7ED1C93383300E9E195 /* LocalNetworkDevices.idl */,
+				1F68C35F1CC0F87C00FAE38F /* LocalNetworkDiscovererClient.h */,
+				1F68C3611CC0FA2600FAE38F /* LocalNetworkDiscoveryController.cpp */,
+				1F68C3621CC0FA2600FAE38F /* LocalNetworkDiscoveryController.h */,
+				1F37CF4D1CDA5227003B676B /* LocalNetworkDiscoveryProvider.h */,
+				1FAFFDA41CCD39D7008459A6 /* LocalNetworkEnumerationRequest.cpp */,
+				1FAFFDA51CCD39D7008459A6 /* LocalNetworkEnumerationRequest.h */,
+				1FB706F81CDCCEFC00E3B594 /* LocalNetworkLaunchingProvider.h */,
+				1F7290061C98AD350086C56A /* NavigatorLocalNetworkDevices.cpp */,
+				1F7290071C98AD350086C56A /* NavigatorLocalNetworkDevices.h */,
+				1F80B7EE1C93383300E9E195 /* NavigatorLocalNetworkDevices.idl */,
+				1F72900A1C98AFF70086C56A /* RemoteApplication.cpp */,
+				1F72900B1C98AFF70086C56A /* RemoteApplication.h */,
+				1F80B7EF1C93383300E9E195 /* RemoteApplication.idl */,
+				1FA4EC801DA7E1AA00ACD4BD /* StateChangedEvent.cpp */,
+				1FA4EC811DA7E1AA00ACD4BD /* StateChangedEvent.h */,
+				1FA4EC821DA7E1AA00ACD4BD /* StateChangedEvent.idl */,
+				1FB32AAE1D4909F400F90576 /* WebDialMessages.cpp */,
+				1FB32AAF1D4909F400F90576 /* WebDialMessages.h */,
+			);
+			path = webdial;
+			sourceTree = "<group>";
+		};
 		26B9998D1803ADFA00D01121 /* cssjit */ = {
 			isa = PBXGroup;
 			children = (
@@ -20718,6 +20856,7 @@
 				41A023EA1A39DB7900F722CF /* streams */,
 				FD315FA212B025B100C1A359 /* webaudio */,
 				97BC69D51505F054001B74AC /* webdatabase */,
+				1F80B7EA1C9337E800E9E195 /* webdial */,
 				996E59DA1DF00D45006612B9 /* webdriver */,
 				97AABCF714FA09B5007457AE /* websockets */,
 			);
@@ -21258,11 +21397,17 @@
 				CD7D33461C7A16BF00041293 /* CoreVideoSoftLink.h */,
 				7C7941E31C56C29300A4C58E /* DataDetectorsCoreSoftLink.h */,
 				7C7941E21C56C29300A4C58E /* DataDetectorsCoreSoftLink.mm */,
+				1F69D4A91D78C2E100BA419C /* DiscoveryServiceChannelCocoa.h */,
+				1F69D4AB1D78C2E100BA419C /* DiscoveryServiceChannelCocoa.mm */,
 				7A09CEF01F01D1F700E93BDB /* FileMonitorCocoa.mm */,
 				514B3F750C722055000530DF /* FileSystemCocoa.mm */,
 				A5C974CF11485FF10066F2AB /* KeyEventCocoa.h */,
 				A5C974D011485FF10066F2AB /* KeyEventCocoa.mm */,
 				1A4832B21A953BA6008B4DFE /* LocalizedStringsCocoa.mm */,
+				1F69D4A11D78BCAB00BA419C /* LocalNetworkDiscoveryProviderCocoa.h */,
+				1F69D4A21D78BCAB00BA419C /* LocalNetworkDiscoveryProviderCocoa.mm */,
+				1F69D4A31D78BCAB00BA419C /* LocalNetworkLaunchingProviderCocoa.h */,
+				1F69D4A41D78BCAB00BA419C /* LocalNetworkLaunchingProviderCocoa.mm */,
 				1A0409F21A43675C009E47F3 /* MachSendRight.cpp */,
 				1A0409DB1A4360B5009E47F3 /* MachSendRight.h */,
 				C53D39331C97892D007F3AE9 /* MIMETypeRegistryCocoa.mm */,
@@ -27189,6 +27334,8 @@
 				937FF3D51A1012D6008EBA31 /* DictionaryLookup.h in Headers */,
 				2D5646B01B8F8493003C4994 /* DictionaryPopupInfo.h in Headers */,
 				FDAF19991513D131008DB0C3 /* DirectConvolver.h in Headers */,
+				1F69D4A01D78B7EF00BA419C /* DiscoveryServiceChannel.h in Headers */,
+				1FEAC8401D83132900C8C56E /* DiscoveryServiceChannelCocoa.h in Headers */,
 				7EDAAFC919A2CCDC0034DFD1 /* DiskCacheMonitorCocoa.h in Headers */,
 				0FE5FBD31C3DD51E0007A2CA /* DisplayList.h in Headers */,
 				0FE5FBD51C3DD51E0007A2CA /* DisplayListItems.h in Headers */,
@@ -28188,6 +28335,9 @@
 				A86629D309DA2B48009633A5 /* JSKeyboardEvent.h in Headers */,
 				12A253E11C8FFF6600C22295 /* JSKeyframeEffect.h in Headers */,
 				935F45430F7C3B5F00D7C1FB /* JSLazyEventListener.h in Headers */,
+				1F5E6EBD1C9B65FE00705954 /* JSLocalNetworkDevice.h in Headers */,
+				1F5E6EBF1C9B65FE00705954 /* JSLocalNetworkDeviceDescriptor.h in Headers */,
+				1F5E6EC11C9B65FE00705954 /* JSLocalNetworkDevices.h in Headers */,
 				BCE1C43C0D9830D3003B02F2 /* JSLocation.h in Headers */,
 				93A806201E03B585008A1F26 /* JSLongRange.h in Headers */,
 				93D4379F1D57B15300AB85EA /* JSMainThreadExecState.h in Headers */,
@@ -28292,6 +28442,7 @@
 				7C4C96DF1AD4483500365A50 /* JSReadableStreamDefaultReader.h in Headers */,
 				4129DF861BB5B80C00322A16 /* JSReadableStreamPrivateConstructors.h in Headers */,
 				7E4C96DD1AD4483500365A51 /* JSReadableStreamSource.h in Headers */,
+				1F5E6EC41C9B65FE00705954 /* JSRemoteApplication.h in Headers */,
 				4998AECE13F9D6C90090B1AA /* JSRequestAnimationFrameCallback.h in Headers */,
 				57E233711DCD468F00F28D01 /* JSRsaHashedImportParams.h in Headers */,
 				5768E4341DB7524500D0A4F7 /* JSRsaHashedKeyGenParams.h in Headers */,
@@ -28341,6 +28492,7 @@
 				BC82432A0D0CE8A200460C8F /* JSSQLTransaction.h in Headers */,
 				B59DD69D11902A42007E9684 /* JSSQLTransactionCallback.h in Headers */,
 				B59DD6A111902A52007E9684 /* JSSQLTransactionErrorCallback.h in Headers */,
+				1F6ECDB51DAA38F800E126BD /* JSStateChangedEvent.h in Headers */,
 				A86629D309DA2B48009633A7 /* JSStaticRange.h in Headers */,
 				51E0BAEB0DA55D4A00A9E417 /* JSStorageEvent.h in Headers */,
 				89F60CDA15809D760075E157 /* JSStorageInfo.h in Headers */,
@@ -28671,6 +28823,16 @@
 				7633A72613D8B33A008501B6 /* LocaleToScriptMapping.h in Headers */,
 				A516E8B7136E04DB0076C3C0 /* LocalizedDateCache.h in Headers */,
 				935207BE09BD410A00F2038D /* LocalizedStrings.h in Headers */,
+				1F80B7F31C93431000E9E195 /* LocalNetworkDevice.h in Headers */,
+				1F80B7F71C934B9B00E9E195 /* LocalNetworkDeviceDescriptor.h in Headers */,
+				1F7290051C98A7910086C56A /* LocalNetworkDevices.h in Headers */,
+				1F68C3601CC0F87C00FAE38F /* LocalNetworkDiscovererClient.h in Headers */,
+				1F68C3641CC0FA2600FAE38F /* LocalNetworkDiscoveryController.h in Headers */,
+				1F37CF4F1CDA5227003B676B /* LocalNetworkDiscoveryProvider.h in Headers */,
+				1F69D4A81D78BCDE00BA419C /* LocalNetworkDiscoveryProviderCocoa.h in Headers */,
+				1FAFFDA71CCD39D7008459A6 /* LocalNetworkEnumerationRequest.h in Headers */,
+				1FB706FA1CDCCEFC00E3B594 /* LocalNetworkLaunchingProvider.h in Headers */,
+				1F69D4A51D78BCB300BA419C /* LocalNetworkLaunchingProviderCocoa.h in Headers */,
 				BCE1C41B0D982980003B02F2 /* Location.h in Headers */,
 				A8239E0109B3CF8A00B60641 /* Logging.h in Headers */,
 				9BA273F4172206BB0097CE47 /* LogicalSelectionOffsetCaches.h in Headers */,
@@ -28861,6 +29023,7 @@
 				E12719C70EEEC16800F61213 /* NavigatorBase.h in Headers */,
 				77D510201ED72D5F00DA4C87 /* NavigatorCredentials.h in Headers */,
 				9711460414EF009A00674FD9 /* NavigatorGeolocation.h in Headers */,
+				1F7290091C98AD350086C56A /* NavigatorLocalNetworkDevices.h in Headers */,
 				5EA725D61ACABD5700EAD17B /* NavigatorMediaDevices.h in Headers */,
 				996E59DF1DF0128D006612B9 /* NavigatorWebDriver.h in Headers */,
 				A19D93461A9FEC7200B46C24 /* NEFilterSourceSPI.h in Headers */,
@@ -29158,6 +29321,7 @@
 				26B9998F1803AE7200D01121 /* RegisterAllocator.h in Headers */,
 				85031B4C0A44EFC700F992E0 /* RegisteredEventListener.h in Headers */,
 				A578F43F1DE0B630003DFC6A /* RejectedPromiseTracker.h in Headers */,
+				1F72900D1C98AFF70086C56A /* RemoteApplication.h in Headers */,
 				CDFC360618CA61C20026E56F /* RemoteCommandListener.h in Headers */,
 				CD8ACA891D237AA200ECC59E /* RemoteCommandListenerMac.h in Headers */,
 				D06C0D8F0CFD11460065F43F /* RemoveFormatCommand.h in Headers */,
@@ -29590,6 +29754,7 @@
 				1A2E6E5A0CC55213004A2062 /* SQLValue.h in Headers */,
 				93F1996308245E59001E9ABC /* SSLKeyGenerator.h in Headers */,
 				26B999911803B3C900D01121 /* StackAllocator.h in Headers */,
+				1FA4EC831DA7F6D200ACD4BD /* StateChangedEvent.h in Headers */,
 				BC7FA62D0D1F0EFF00DB22A9 /* StaticNodeList.h in Headers */,
 				F433E9031DBBDBA200EF0D14 /* StaticPasteboard.h in Headers */,
 				F44EBBD91DB5D21400277334 /* StaticRange.h in Headers */,
@@ -30163,6 +30328,7 @@
 				44A20DB90F84166C00B3E1FE /* WebCoreURLResponseIOS.h in Headers */,
 				93F199F008245E59001E9ABC /* WebCoreView.h in Headers */,
 				A5E616741894581F009ADF50 /* WebDebuggerAgent.h in Headers */,
+				1FB32AB11D4909F400F90576 /* WebDialMessages.h in Headers */,
 				FE0D84E910484348001A179E /* WebEvent.h in Headers */,
 				225A16B50D5C11E900090295 /* WebEventRegion.h in Headers */,
 				A19D93471A9FEC7200B46C24 /* WebFilterEvaluatorSPI.h in Headers */,
@@ -31229,6 +31395,8 @@
 				D0BD4F5C1408850F006839B6 /* DictationCommandIOS.cpp in Sources */,
 				937FF3D71A10131B008EBA31 /* DictionaryLookup.mm in Sources */,
 				FDAF19981513D131008DB0C3 /* DirectConvolver.cpp in Sources */,
+				1F0FE1081F0EBEE20057D049 /* DiscoveryServiceChannel.cpp in Sources */,
+				1FEAC8411D83132D00C8C56E /* DiscoveryServiceChannelCocoa.mm in Sources */,
 				7E4DE10D198B10B60051CB02 /* DiskCacheMonitorCocoa.mm in Sources */,
 				0FE5FBD21C3DD51E0007A2CA /* DisplayList.cpp in Sources */,
 				0FE5FBD41C3DD51E0007A2CA /* DisplayListItems.cpp in Sources */,
@@ -32191,6 +32359,9 @@
 				A86629D409DA2B48009633A5 /* JSKeyboardEvent.cpp in Sources */,
 				12A253E01C8FFF6600C22295 /* JSKeyframeEffect.cpp in Sources */,
 				935F45420F7C3B5F00D7C1FB /* JSLazyEventListener.cpp in Sources */,
+				1F5E6EBC1C9B65FE00705954 /* JSLocalNetworkDevice.cpp in Sources */,
+				1F5E6EBE1C9B65FE00705954 /* JSLocalNetworkDeviceDescriptor.cpp in Sources */,
+				1F5E6EC01C9B65FE00705954 /* JSLocalNetworkDevices.cpp in Sources */,
 				BCE1C43B0D9830D3003B02F2 /* JSLocation.cpp in Sources */,
 				BCE1C4400D9830F4003B02F2 /* JSLocationCustom.cpp in Sources */,
 				93A8061F1E03B585008A1F26 /* JSLongRange.cpp in Sources */,
@@ -32307,6 +32478,7 @@
 				4129DF851BB5B80700322A16 /* JSReadableStreamPrivateConstructors.cpp in Sources */,
 				7E4C96DC1AD4483500365A51 /* JSReadableStreamSource.cpp in Sources */,
 				418C39601C8F0AAE0051C8A3 /* JSReadableStreamSourceCustom.cpp in Sources */,
+				1F5E6EB21C9B64CC00705954 /* JSRemoteApplication.cpp in Sources */,
 				4998AECD13F9D6C90090B1AA /* JSRequestAnimationFrameCallback.cpp in Sources */,
 				57E233731DCD46B600F28D01 /* JSRsaHashedImportParams.cpp in Sources */,
 				5768E4361DB7527400D0A4F7 /* JSRsaHashedKeyGenParams.cpp in Sources */,
@@ -32361,6 +32533,7 @@
 				514C76380CE9225E007EF3CD /* JSSQLTransaction.cpp in Sources */,
 				B59DD69E11902A42007E9684 /* JSSQLTransactionCallback.cpp in Sources */,
 				B59DD6A211902A52007E9684 /* JSSQLTransactionErrorCallback.cpp in Sources */,
+				1F6ECDB41DAA38F400E126BD /* JSStateChangedEvent.cpp in Sources */,
 				A86629D409DA2B48009633A7 /* JSStaticRange.cpp in Sources */,
 				51E3F9D60DA05E1D00250911 /* JSStorage.cpp in Sources */,
 				51D0C5160DAA90B7003B3831 /* JSStorageCustom.cpp in Sources */,
@@ -32716,6 +32889,13 @@
 				A516E8B8136E04DB0076C3C0 /* LocalizedDateCache.mm in Sources */,
 				C046E1AC1208A9FE00BA2CF7 /* LocalizedStrings.cpp in Sources */,
 				1A4832B31A953BA6008B4DFE /* LocalizedStringsCocoa.mm in Sources */,
+				1F80B7F21C93431000E9E195 /* LocalNetworkDevice.cpp in Sources */,
+				1F80B7F61C934B9B00E9E195 /* LocalNetworkDeviceDescriptor.cpp in Sources */,
+				1F7290041C98A7910086C56A /* LocalNetworkDevices.cpp in Sources */,
+				1F68C3631CC0FA2600FAE38F /* LocalNetworkDiscoveryController.cpp in Sources */,
+				1F69D4A71D78BCD900BA419C /* LocalNetworkDiscoveryProviderCocoa.mm in Sources */,
+				1FAFFDA61CCD39D7008459A6 /* LocalNetworkEnumerationRequest.cpp in Sources */,
+				1F69D4A61D78BCD000BA419C /* LocalNetworkLaunchingProviderCocoa.mm in Sources */,
 				BCE1C41C0D982981003B02F2 /* Location.cpp in Sources */,
 				A8239E0009B3CF8A00B60641 /* Logging.cpp in Sources */,
 				1402645E0AFDC19B005919E2 /* LoggingMac.mm in Sources */,
@@ -32881,6 +33061,7 @@
 				2D9BF7421DBFDC27007A7D99 /* NavigatorEME.cpp in Sources */,
 				51A4BB101954D62700FA5C2E /* NavigatorGamepad.cpp in Sources */,
 				9711460314EF009A00674FD9 /* NavigatorGeolocation.cpp in Sources */,
+				1F7290081C98AD350086C56A /* NavigatorLocalNetworkDevices.cpp in Sources */,
 				5EA725D51ACABD5700EAD17B /* NavigatorMediaDevices.cpp in Sources */,
 				996E59DE1DF01285006612B9 /* NavigatorWebDriver.cpp in Sources */,
 				5D874F130D161D3200796C3B /* NetscapePlugInStreamLoader.cpp in Sources */,
@@ -33075,6 +33256,7 @@
 				FD45A95A175D417100C21EC8 /* RectangleShape.cpp in Sources */,
 				BCAB418113E356E800D8AAF3 /* Region.cpp in Sources */,
 				A578F4401DE0B634003DFC6A /* RejectedPromiseTracker.cpp in Sources */,
+				1F72900C1C98AFF70086C56A /* RemoteApplication.cpp in Sources */,
 				CDFC360518CA61C20026E56F /* RemoteCommandListener.cpp in Sources */,
 				CDFC360718CA696C0026E56F /* RemoteCommandListenerIOS.mm in Sources */,
 				CD8ACA881D237AA200ECC59E /* RemoteCommandListenerMac.mm in Sources */,
@@ -33440,6 +33622,7 @@
 				FE36FD1616C7826500F887C1 /* SQLTransactionStateMachine.cpp in Sources */,
 				4476531B133170990006B789 /* SSLKeyGeneratorIOS.cpp in Sources */,
 				93F19AE608245E59001E9ABC /* SSLKeyGeneratorMac.mm in Sources */,
+				1FA4EC841DA7F6D500ACD4BD /* StateChangedEvent.cpp in Sources */,
 				BC7FA62E0D1F0EFF00DB22A9 /* StaticNodeList.cpp in Sources */,
 				F433E9051DBBDFCA00EF0D14 /* StaticPasteboard.cpp in Sources */,
 				F44EBBDB1DB5DD9D00277334 /* StaticRange.cpp in Sources */,
@@ -33879,6 +34062,7 @@
 				444D4E230F708B2E003158E0 /* WebCoreURLResponseIOS.mm in Sources */,
 				93F19B0708245E59001E9ABC /* WebCoreView.m in Sources */,
 				A5E616731894581F009ADF50 /* WebDebuggerAgent.cpp in Sources */,
+				1FB32AB01D4909F400F90576 /* WebDialMessages.cpp in Sources */,
 				FE0D84EB1048436E001A179E /* WebEvent.mm in Sources */,
 				225A16B60D5C11E900090295 /* WebEventRegion.mm in Sources */,
 				D3F3D36D1A69B7DC0059FC2B /* WebGL2RenderingContext.cpp in Sources */,
diff --git a/Source/WebCore/dom/EventNames.in b/Source/WebCore/dom/EventNames.in
index bbf1c277c61..1cd2f470c04 100644
--- a/Source/WebCore/dom/EventNames.in
+++ b/Source/WebCore/dom/EventNames.in
@@ -71,3 +71,4 @@ GamepadEvent conditional=GAMEPAD
 OverconstrainedErrorEvent conditional=MEDIA_STREAM
 MediaEncryptedEvent conditional=ENCRYPTED_MEDIA
 MediaKeyMessageEvent conditional=ENCRYPTED_MEDIA
+StateChangedEvent conditional=WEB_DIAL
diff --git a/Source/WebCore/dom/EventTargetFactory.in b/Source/WebCore/dom/EventTargetFactory.in
index 8fc58f559a3..deefffd3827 100644
--- a/Source/WebCore/dom/EventTargetFactory.in
+++ b/Source/WebCore/dom/EventTargetFactory.in
@@ -25,6 +25,7 @@ MessagePort
 Node
 Notification conditional=NOTIFICATIONS
 Performance conditional=WEB_TIMING
+RemoteApplication conditional=WEB_DIAL
 RTCDataChannel conditional=WEB_RTC
 RTCDTMFSender conditional=WEB_RTC_DTMF
 RTCPeerConnection conditional=WEB_RTC
diff --git a/Source/WebCore/loader/cache/CachedResourceLoader.cpp b/Source/WebCore/loader/cache/CachedResourceLoader.cpp
index dea7bc91c9b..a2781ad797b 100644
--- a/Source/WebCore/loader/cache/CachedResourceLoader.cpp
+++ b/Source/WebCore/loader/cache/CachedResourceLoader.cpp
@@ -161,7 +161,7 @@ CachedResource* CachedResourceLoader::cachedResource(const String& resourceURL)
 
 CachedResource* CachedResourceLoader::cachedResource(const URL& url) const
 {
-    ASSERT(!MemoryCache::shouldRemoveFragmentIdentifier(url));
+//    ASSERT(!MemoryCache::shouldRemoveFragmentIdentifier(url));
     return m_documentResources.get(url).get();
 }
 
diff --git a/Source/WebCore/platform/Logging.h b/Source/WebCore/platform/Logging.h
index e27196fc7bc..ca9b450ceff 100644
--- a/Source/WebCore/platform/Logging.h
+++ b/Source/WebCore/platform/Logging.h
@@ -89,6 +89,7 @@ namespace WebCore {
     M(Threading) \
     M(URLParser) \
     M(WebAudio) \
+    M(WebDial) \
     M(WebGL) \
     M(WebGPU) \
     M(WebRTC) \
diff --git a/Source/WebCore/platform/cocoa/DiscoveryServiceChannelCocoa.h b/Source/WebCore/platform/cocoa/DiscoveryServiceChannelCocoa.h
new file mode 100644
index 00000000000..5d6c922bc75
--- /dev/null
+++ b/Source/WebCore/platform/cocoa/DiscoveryServiceChannelCocoa.h
@@ -0,0 +1,75 @@
+/*
+ * Copyright (C) 2016 Michal Debski <mi.zd.debski@gmail.com>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1.  Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ * 2.  Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ * 3.  Neither the name of Apple Inc. ("Apple") nor the names of
+ *     its contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef DiscoveryServiceChannelCocoa_h
+#define DiscoveryServiceChannelCocoa_h
+
+#if ENABLE(WEB_DIAL)
+
+#include "DiscoveryServiceChannel.h"
+#include <wtf/Deque.h>
+#include <wtf/Ref.h>
+#include <wtf/Vector.h>
+
+OBJC_CLASS NSInputStream;
+OBJC_CLASS NSOutputStream;
+OBJC_CLASS WebNSStreamDelegate;
+
+namespace WebCore {
+
+class DiscoveryServiceChannelCocoa : public DiscoveryServiceChannel {
+public:
+    WEBCORE_EXPORT static Ref<DiscoveryServiceChannelCocoa> create(RetainPtr<NSInputStream>&&, RetainPtr<NSOutputStream>&&);
+
+    ~DiscoveryServiceChannelCocoa();
+
+    void open() override;
+    void reopen() override;
+    size_t send(const uint8_t* data, size_t size) override;
+    void close() override;
+
+    void onStreamEvent(NSStream*, NSStreamEvent);
+
+private:
+    DiscoveryServiceChannelCocoa(RetainPtr<NSInputStream>&&, RetainPtr<NSOutputStream>&&);
+
+    void closeStreams();
+    void read();
+
+    bool m_canSend;
+
+    RetainPtr<NSInputStream> m_inputStream;
+    RetainPtr<NSOutputStream> m_outputStream;
+    RetainPtr<WebNSStreamDelegate> m_streamDelegate;
+    Deque<Vector<uint8_t>> m_queue;
+};
+
+} // namespace WebCore
+
+#endif // ENABLE(WEB_DIAL)
+#endif // DiscoveryServiceChannelCocoa_h
diff --git a/Source/WebCore/platform/cocoa/DiscoveryServiceChannelCocoa.mm b/Source/WebCore/platform/cocoa/DiscoveryServiceChannelCocoa.mm
new file mode 100644
index 00000000000..7926b30c4dd
--- /dev/null
+++ b/Source/WebCore/platform/cocoa/DiscoveryServiceChannelCocoa.mm
@@ -0,0 +1,202 @@
+/*
+ * Copyright (C) 2016 Michal Debski <mi.zd.debski@gmail.com>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1.  Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ * 2.  Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ * 3.  Neither the name of Apple Inc. ("Apple") nor the names of
+ *     its contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#import "config.h"
+
+#if ENABLE(WEB_DIAL)
+#import "DiscoveryServiceChannelCocoa.h"
+
+#include "Logging.h"
+#include "NotImplemented.h"
+#import <CoreFoundation/CoreFoundation.h>
+
+using namespace WebCore;
+
+@interface WebNSStreamDelegate : NSObject <NSStreamDelegate>
+@end
+
+@implementation WebNSStreamDelegate {
+    DiscoveryServiceChannelCocoa *_provider;
+}
+
+- (id)initWithProvider:(DiscoveryServiceChannelCocoa*)provider
+{
+    if ( self = [super init]) {
+        _provider = provider;
+        return self;
+    }
+    return nil;
+}
+
+- (void)stream:(NSStream *)theStream handleEvent:(NSStreamEvent)streamEvent
+{
+    _provider->onStreamEvent(theStream, streamEvent);
+}
+
+@end
+
+namespace WebCore {
+
+Ref<DiscoveryServiceChannelCocoa> DiscoveryServiceChannelCocoa::create(RetainPtr<NSInputStream>&& inputStream, RetainPtr<NSOutputStream>&& outputStream)
+{
+    return adoptRef(*new DiscoveryServiceChannelCocoa(WTFMove(inputStream), WTFMove(outputStream)));
+}
+
+DiscoveryServiceChannelCocoa::DiscoveryServiceChannelCocoa(RetainPtr<NSInputStream>&& inputStream, RetainPtr<NSOutputStream>&& outputStream)
+    : m_canSend(false)
+    , m_inputStream(WTFMove(inputStream))
+    , m_outputStream(WTFMove(outputStream))
+{
+    m_streamDelegate = adoptNS([[WebNSStreamDelegate alloc] initWithProvider:this]);
+    [m_inputStream setDelegate: m_streamDelegate.get()];
+    [m_outputStream setDelegate: m_streamDelegate.get()];
+
+    [m_inputStream scheduleInRunLoop:[NSRunLoop currentRunLoop] forMode:NSDefaultRunLoopMode];
+    [m_outputStream scheduleInRunLoop:[NSRunLoop currentRunLoop] forMode:NSDefaultRunLoopMode];
+}
+
+DiscoveryServiceChannelCocoa::~DiscoveryServiceChannelCocoa()
+{
+    [m_inputStream removeFromRunLoop:[NSRunLoop currentRunLoop] forMode:NSDefaultRunLoopMode];
+    [m_outputStream removeFromRunLoop:[NSRunLoop currentRunLoop] forMode:NSDefaultRunLoopMode];
+}
+
+void DiscoveryServiceChannelCocoa::open()
+{
+    [m_inputStream open];
+    [m_outputStream open];
+}
+
+void DiscoveryServiceChannelCocoa::reopen()
+{
+    notImplemented();
+}
+
+void DiscoveryServiceChannelCocoa::close()
+{
+    closeStreams();
+    m_closedCallback();
+}
+
+void DiscoveryServiceChannelCocoa::closeStreams()
+{
+    [m_outputStream close];
+    [m_inputStream close];
+}
+
+void DiscoveryServiceChannelCocoa::read()
+{
+    uint8_t* data;
+    size_t size;
+    Vector<uint8_t> buffer;
+    if ([m_inputStream getBuffer:&data length:&size]) {
+        LOG(WebDial, "Have a buffer of size %zu", size);
+    } else {
+        LOG(WebDial, "Need to provide our buffer");
+        constexpr const auto defaultBufferSize = 32 * 1024u;
+        while ([m_inputStream hasBytesAvailable]) {
+            size = buffer.size();
+            buffer.resize(size + defaultBufferSize);
+            data = buffer.data() + size;
+            NSInteger read = [m_inputStream read:data maxLength:defaultBufferSize];
+            if (read == 0) {
+                LOG(WebDial, "DiscoveryServiceChannelCocoa::read EOF");
+                close();
+                return;
+            } else if (read < 0) {
+                LOG(WebDial, "DiscoveryServiceChannelCocoa::read ERROR %s", [[[m_inputStream streamError] localizedDescription] UTF8String]);
+                closeStreams();
+                m_errorCallback([[m_inputStream streamError] localizedDescription]);
+                return;
+            }
+            if (read < defaultBufferSize) {
+                buffer.resize(size + read);
+            }
+        }
+        data = buffer.data();
+        size = buffer.size();
+    }
+    LOG(WebDial, "DiscoveryServiceChannelCocoa::read from %p %zu bytes", m_inputStream.get(), size);
+    m_messageCallback(data, size);
+}
+
+size_t DiscoveryServiceChannelCocoa::send(const uint8_t* data, size_t size)
+{
+    if (!m_canSend) {
+        LOG(WebDial, "DiscoveryServiceChannelCocoa::send cannot yet send - queue");
+        Vector<uint8_t> buffer;
+        buffer.append(data, size);
+        m_queue.append(WTFMove(buffer));
+        return size;
+    }
+
+    LOG(WebDial, "DiscoveryServiceChannelCocoa::send to %p", m_outputStream.get());
+    m_canSend = false;
+    NSInteger wrote = [m_outputStream write:data maxLength:size];
+    if (wrote <= 0) {
+        LOG(WebDial, "DiscoveryServiceChannelCocoa::send ERROR %s", [[[m_outputStream streamError] localizedDescription] UTF8String]);
+        closeStreams();
+        m_errorCallback([[m_outputStream streamError] localizedDescription]);
+        return 0;
+    }
+    return wrote;
+}
+
+void DiscoveryServiceChannelCocoa::onStreamEvent(NSStream* stream, NSStreamEvent event)
+{
+    LOG(WebDial, "DiscoveryServiceChannelCocoa::onStreamEvent(%p, %x)", stream, event);
+    switch (event) {
+        case NSStreamEventNone:
+        case NSStreamEventOpenCompleted:
+            break;
+        case NSStreamEventHasBytesAvailable:
+            ASSERT(stream == m_inputStream.get());
+            read();
+            break;
+        case NSStreamEventHasSpaceAvailable:
+            ASSERT(stream == m_outputStream.get());
+            m_canSend = true;
+            if (!m_queue.isEmpty()) {
+                Vector<uint8_t> buffer(m_queue.takeFirst());
+                send(buffer.data(), buffer.size());
+            }
+            break;
+        case NSStreamEventErrorOccurred:
+            LOG(WebDial, "DiscoveryServiceChannelCocoa::onStreamEvent ERROR %s", [[[stream streamError] localizedDescription] UTF8String]);
+            closeStreams();
+            m_errorCallback([[stream streamError] localizedDescription]);
+            break;
+        case NSStreamEventEndEncountered:
+            close();
+            break;
+    }
+}
+
+} // namespace WebCore
+
+#endif // ENABLE(WEB_DIAL)
diff --git a/Source/WebCore/platform/cocoa/LocalNetworkDiscoveryProviderCocoa.h b/Source/WebCore/platform/cocoa/LocalNetworkDiscoveryProviderCocoa.h
new file mode 100644
index 00000000000..1cfec5ac544
--- /dev/null
+++ b/Source/WebCore/platform/cocoa/LocalNetworkDiscoveryProviderCocoa.h
@@ -0,0 +1,69 @@
+/*
+ * Copyright (C) 2016 Michal Debski <mi.zd.debski@gmail.com>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1.  Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ * 2.  Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ * 3.  Neither the name of Apple Inc. ("Apple") nor the names of
+ *     its contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef LocalNetworkDiscoveryProviderCocoa_h
+#define LocalNetworkDiscoveryProviderCocoa_h
+
+#if ENABLE(WEB_DIAL)
+
+#include "LocalNetworkEnumerationRequest.h"
+#include "LocalNetworkDiscoveryProvider.h"
+#include "LocalNetworkDevice.h"
+#include <memory>
+#include "Timer.h"
+#include <wtf/RetainPtr.h>
+
+OBJC_CLASS NSNetServiceBrowser;
+OBJC_CLASS WebNetServiceBrowserDelegate;
+
+namespace WebCore {
+
+class LocalNetworkDiscoveryProviderCocoa final : public LocalNetworkDiscoveryProvider {
+public:
+    LocalNetworkDiscoveryProviderCocoa(LocalNetworkEnumerationRequest&);
+    ~LocalNetworkDiscoveryProviderCocoa();
+
+    void startDiscovery() override;
+    void cancelDiscovery() override;
+
+    void browseFailed();
+    void deviceDiscovered(Ref<LocalNetworkDevice>&&);
+    void discoveryFinished();
+
+private:
+    DeferrableOneShotTimer m_discoveryTimeoutTimer;
+    RetainPtr<NSNetServiceBrowser> m_browser;
+    RetainPtr<WebNetServiceBrowserDelegate> m_browsingDelegate;
+    LocalNetworkDeviceVector m_devices;
+    RefPtr<LocalNetworkEnumerationRequest> m_request;
+};
+
+} // namespace WebCore
+
+#endif // ENABLE(WEB_DIAL)
+#endif // LocalNetworkDiscoveryProviderCocoa_h
diff --git a/Source/WebCore/platform/cocoa/LocalNetworkDiscoveryProviderCocoa.mm b/Source/WebCore/platform/cocoa/LocalNetworkDiscoveryProviderCocoa.mm
new file mode 100644
index 00000000000..c8381c468fa
--- /dev/null
+++ b/Source/WebCore/platform/cocoa/LocalNetworkDiscoveryProviderCocoa.mm
@@ -0,0 +1,145 @@
+/*
+ * Copyright (C) 2016 Michal Debski <mi.zd.debski@gmail.com>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1.  Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ * 2.  Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ * 3.  Neither the name of Apple Inc. ("Apple") nor the names of
+ *     its contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include "config.h"
+
+#if ENABLE(WEB_DIAL)
+#include "LocalNetworkDiscoveryProviderCocoa.h"
+
+#include "ExceptionCode.h"
+#import <Foundation/Foundation.h>
+#include "LocalNetworkDeviceDescriptor.h"
+#include "LocalNetworkEnumerationRequest.h"
+#import "LocalNetworkLaunchingProviderCocoa.h"
+#include "Logging.h"
+
+using namespace WebCore;
+
+@interface WebNetServiceBrowserDelegate : NSObject <NSNetServiceBrowserDelegate>
+@end
+
+@implementation WebNetServiceBrowserDelegate {
+    LocalNetworkDiscoveryProviderCocoa *_provider;
+}
+
+- (id)initWithProvider:(LocalNetworkDiscoveryProviderCocoa *)provider
+{
+    if ( self = [super init]) {
+        _provider = provider;
+        return self;
+    }
+    return nil;
+}
+
+- (void)netServiceBrowser:(NSNetServiceBrowser *) browser
+             didNotSearch:(NSDictionary *)errorDict
+{
+    UNUSED_PARAM(browser);
+    UNUSED_PARAM(errorDict);
+    _provider->browseFailed();
+}
+
+- (void)netServiceBrowser:(NSNetServiceBrowser *)browser
+           didFindService:(NSNetService *)aNetService
+               moreComing:(BOOL)moreComing
+{
+    UNUSED_PARAM(browser);
+    _provider->deviceDiscovered(LocalNetworkDevice::create(LocalNetworkDeviceDescriptor::create([aNetService name]), LocalNetworkLaunchingProviderCocoa::create(RetainPtr<NSNetService>(aNetService))));
+    if(!moreComing)
+    {
+        _provider->discoveryFinished();
+    }
+}
+
+- (void)netServiceBrowserWillSearch:(NSNetServiceBrowser *) browser
+{
+    UNUSED_PARAM(browser);
+    LOG(WebDial, "Local network discovery has started");
+}
+
+@end
+
+namespace WebCore {
+
+std::unique_ptr<LocalNetworkDiscoveryProvider> LocalNetworkDiscoveryProvider::create(LocalNetworkEnumerationRequest& request)
+{
+    return std::make_unique<LocalNetworkDiscoveryProviderCocoa>(request);
+}
+
+LocalNetworkDiscoveryProviderCocoa::LocalNetworkDiscoveryProviderCocoa(LocalNetworkEnumerationRequest& request)
+    : m_discoveryTimeoutTimer(*this, &LocalNetworkDiscoveryProviderCocoa::discoveryFinished, WTF::Seconds(5))
+    , m_request(&request)
+{
+    m_browsingDelegate = adoptNS([[WebNetServiceBrowserDelegate alloc] initWithProvider:this]);
+}
+
+void LocalNetworkDiscoveryProviderCocoa::startDiscovery()
+{
+    ASSERT(m_request);
+
+    m_browser = adoptNS([[NSNetServiceBrowser alloc] init]);
+    [m_browser setDelegate:m_browsingDelegate.get()];
+    [m_browser searchForServicesOfType:@"_webdial._tcp." inDomain:@"local."];
+    m_discoveryTimeoutTimer.restart();
+}
+
+void LocalNetworkDiscoveryProviderCocoa::cancelDiscovery()
+{
+    [m_browser stop];
+    m_discoveryTimeoutTimer.stop();
+}
+
+LocalNetworkDiscoveryProviderCocoa::~LocalNetworkDiscoveryProviderCocoa()
+{
+    cancelDiscovery();
+}
+
+void LocalNetworkDiscoveryProviderCocoa::browseFailed()
+{
+    cancelDiscovery();
+    m_request->failedToPerformDiscovery(NETWORK_ERR);
+    m_request = nullptr;
+}
+
+void LocalNetworkDiscoveryProviderCocoa::deviceDiscovered(Ref<LocalNetworkDevice>&& device)
+{
+    LOG(WebDial, "Discovered service at %s", device->descriptor().userAgent().ascii().data());
+    m_devices.append(WTFMove(device));
+}
+
+void LocalNetworkDiscoveryProviderCocoa::discoveryFinished()
+{
+    cancelDiscovery();
+    LOG(WebDial, "Number of discovered services %zu", m_devices.size());
+    m_request->discoveryHasFinished(WTFMove(m_devices));
+    m_request = nullptr;
+}
+
+} // namespace WebCore
+
+#endif // ENABLE(WEB_DIAL)
diff --git a/Source/WebCore/platform/cocoa/LocalNetworkLaunchingProviderCocoa.h b/Source/WebCore/platform/cocoa/LocalNetworkLaunchingProviderCocoa.h
new file mode 100644
index 00000000000..ebc9514a6cd
--- /dev/null
+++ b/Source/WebCore/platform/cocoa/LocalNetworkLaunchingProviderCocoa.h
@@ -0,0 +1,79 @@
+/*
+ * Copyright (C) 2016 Michal Debski <mi.zd.debski@gmail.com>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1.  Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ * 2.  Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ * 3.  Neither the name of Apple Inc. ("Apple") nor the names of
+ *     its contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef LocalNetworkLaunchingProviderCocoa_h
+#define LocalNetworkLaunchingProviderCocoa_h
+
+#if ENABLE(WEB_DIAL)
+
+#include "DiscoveryServiceChannel.h"
+#include "LocalNetworkLaunchingProvider.h"
+#include <memory>
+#include <wtf/Optional.h>
+#include <wtf/RefPtr.h>
+#include <wtf/RetainPtr.h>
+
+OBJC_CLASS NSNetService;
+OBJC_CLASS WebNetServiceDelegate;
+
+namespace WebCore {
+
+class LocalNetworkLaunchingProviderCocoa final : public LocalNetworkLaunchingProvider {
+public:
+    static Ref<LocalNetworkLaunchingProviderCocoa> create(RetainPtr<NSNetService>&&);
+    ~LocalNetworkLaunchingProviderCocoa();
+
+    void launch(ScriptExecutionContext&, const String& url, LocalNetworkLaunchingProvider::Promise&&) override;
+    void cancelLaunch() override;
+
+    void connected(Ref<DiscoveryServiceChannel>&&);
+    void launchSuccessful(Ref<RemoteApplication>&&);
+    void launchFailed();
+
+    const String& launchUrl() const { return m_launchUrl; }
+
+    // RefCounted
+    using LocalNetworkLaunchingProvider::ref;
+    using LocalNetworkLaunchingProvider::deref;
+
+private:
+    LocalNetworkLaunchingProviderCocoa(RetainPtr<NSNetService>&&);
+
+    bool m_currentlyLaunching;
+    ScriptExecutionContext* m_context;
+    RetainPtr<NSNetService> m_service;
+    RetainPtr<WebNetServiceDelegate> m_resolvingDelegate;
+    std::optional<LocalNetworkLaunchingProvider::Promise> m_currentPromise;
+    String m_launchUrl;
+    RefPtr<LocalNetworkLaunchingProviderCocoa> m_protect;
+};
+
+} // namespace WebCore
+
+#endif // ENABLE(WEB_DIAL)
+#endif // LocalNetworkLaunchingProviderCocoa_h
diff --git a/Source/WebCore/platform/cocoa/LocalNetworkLaunchingProviderCocoa.mm b/Source/WebCore/platform/cocoa/LocalNetworkLaunchingProviderCocoa.mm
new file mode 100644
index 00000000000..38b97a48873
--- /dev/null
+++ b/Source/WebCore/platform/cocoa/LocalNetworkLaunchingProviderCocoa.mm
@@ -0,0 +1,156 @@
+/*
+ * Copyright (C) 2016 Michal Debski <mi.zd.debski@gmail.com>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1.  Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ * 2.  Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ * 3.  Neither the name of Apple Inc. ("Apple") nor the names of
+ *     its contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include "config.h"
+
+#if ENABLE(WEB_DIAL)
+#include "LocalNetworkLaunchingProviderCocoa.h"
+
+#import "DiscoveryServiceChannelCocoa.h"
+#include "ExceptionCode.h"
+#import <Foundation/Foundation.h>
+#include "JSRemoteApplication.h"
+#include "Logging.h"
+#include "WebDialMessages.h"
+
+using namespace WebCore;
+
+@interface WebNetServiceDelegate : NSObject <NSNetServiceDelegate>
+@end
+
+@implementation WebNetServiceDelegate {
+    LocalNetworkLaunchingProviderCocoa *_provider;
+}
+
+- (id)initWithProvider:(LocalNetworkLaunchingProviderCocoa*)provider
+{
+    if ( self = [super init]) {
+        _provider = provider;
+        return self;
+    }
+    return nil;
+}
+
+- (void)netServiceDidResolveAddress:(NSNetService *)sender
+{
+    UNUSED_PARAM(sender);
+    [sender stop];
+
+    NSOutputStream* oStream;
+    NSInputStream* iStream;
+    [sender getInputStream:&iStream outputStream:&oStream];
+    Ref<DiscoveryServiceChannelCocoa> channel = DiscoveryServiceChannelCocoa::create(adoptNS(iStream), adoptNS(oStream));
+
+    _provider->connected(WTFMove(channel));
+}
+
+- (void)netService:(NSNetService *)sender didNotResolve:(NSDictionary<NSString *, NSNumber *> *)errorDict
+{
+    UNUSED_PARAM(sender);
+    UNUSED_PARAM(errorDict);
+    _provider->launchFailed();
+}
+
+@end
+
+namespace WebCore {
+
+Ref<LocalNetworkLaunchingProviderCocoa> LocalNetworkLaunchingProviderCocoa::create(RetainPtr<NSNetService>&& service)
+{
+    return adoptRef(*new LocalNetworkLaunchingProviderCocoa(WTFMove(service)));
+}
+
+LocalNetworkLaunchingProviderCocoa::LocalNetworkLaunchingProviderCocoa(RetainPtr<NSNetService>&& service)
+    : m_currentlyLaunching(false)
+    , m_context(nullptr)
+    , m_service(WTFMove(service))
+{
+    m_resolvingDelegate = adoptNS([[WebNetServiceDelegate alloc] initWithProvider:this]);
+    [m_service setDelegate: m_resolvingDelegate.get()];
+}
+
+LocalNetworkLaunchingProviderCocoa::~LocalNetworkLaunchingProviderCocoa()
+{
+    [m_service stop];
+}
+
+void LocalNetworkLaunchingProviderCocoa::launch(ScriptExecutionContext& context, const String& url, LocalNetworkLaunchingProvider::Promise&& promise)
+{
+    if (m_currentlyLaunching) {
+        promise.reject(INVALID_STATE_ERR);
+        return;
+    }
+    m_protect = this;
+    m_currentlyLaunching = true;
+    m_currentPromise = WTFMove(promise);
+    m_context = &context;
+    m_launchUrl = url;
+    [m_service resolveWithTimeout: 5];
+}
+
+void LocalNetworkLaunchingProviderCocoa::cancelLaunch()
+{
+    [m_service stop];
+    m_currentPromise = std::nullopt;
+    m_launchUrl.releaseImpl();
+    m_currentlyLaunching = false;
+    m_protect = nullptr;
+}
+
+void LocalNetworkLaunchingProviderCocoa::launchSuccessful(Ref<RemoteApplication>&& application)
+{
+    ASSERT(m_currentPromise);
+    std::exchange(m_currentPromise, std::nullopt)->resolve(WTFMove(application));
+    m_launchUrl.releaseImpl();
+    m_currentlyLaunching = false;
+    m_protect = nullptr;
+}
+
+void LocalNetworkLaunchingProviderCocoa::launchFailed()
+{
+    ASSERT(m_currentPromise);
+    std::exchange(m_currentPromise, std::nullopt)->reject(NETWORK_ERR);
+    m_launchUrl.releaseImpl();
+    m_currentlyLaunching = false;
+    m_protect = nullptr;
+}
+
+void LocalNetworkLaunchingProviderCocoa::connected(Ref<DiscoveryServiceChannel>&& channel)
+{
+    ASSERT(m_context);
+    auto application = RemoteApplication::createAndLaunch(m_context, WTFMove(channel), launchUrl());
+    if (application) {
+        launchSuccessful(application.releaseNonNull());
+    } else {
+        launchFailed();
+    }
+}
+
+} // namespace WebCore
+
+#endif // ENABLE(WEB_DIAL)
diff --git a/Source/WebCore/platform/mac/LoggingMac.mm b/Source/WebCore/platform/mac/LoggingMac.mm
index b208bbe1805..e6f819e3cbc 100644
--- a/Source/WebCore/platform/mac/LoggingMac.mm
+++ b/Source/WebCore/platform/mac/LoggingMac.mm
@@ -32,11 +32,12 @@
 
 namespace WebCore {
 
-static NSString * const defaultsDomain = @"WebCoreLogging";
+//static NSString * const defaultsDomain = @"WebCoreLogging";
 
 String logLevelString()
 {
-    return [[NSUserDefaults standardUserDefaults] stringForKey:defaultsDomain];
+//    return [[NSUserDefaults standardUserDefaults] stringForKey:defaultsDomain];
+    return "WebDial";
 }
 
 }
diff --git a/Source/WebKit/WebKit.xcodeproj/project.pbxproj b/Source/WebKit/WebKit.xcodeproj/project.pbxproj
index 497a1f02495..8e545881141 100644
--- a/Source/WebKit/WebKit.xcodeproj/project.pbxproj
+++ b/Source/WebKit/WebKit.xcodeproj/project.pbxproj
@@ -95,6 +95,8 @@
 		1C68F672095B5FC100C2984E /* WebNodeHighlightView.mm in Sources */ = {isa = PBXBuildFile; fileRef = 1C68F666095B5FC100C2984E /* WebNodeHighlightView.mm */; };
 		1C7B0C660EB2464D00A28502 /* WebInspectorClientCF.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 1C7B0C650EB2464D00A28502 /* WebInspectorClientCF.cpp */; };
 		1C8CB07A0AE9830C00B1F6E9 /* WebEditingDelegatePrivate.h in Headers */ = {isa = PBXBuildFile; fileRef = 1C8CB0790AE9830C00B1F6E9 /* WebEditingDelegatePrivate.h */; settings = {ATTRIBUTES = (Private, ); }; };
+		1FB706F41CDCC97F00E3B594 /* WebLocalNetworkDiscovererClient.mm in Sources */ = {isa = PBXBuildFile; fileRef = 1FB706F31CDCC97F00E3B594 /* WebLocalNetworkDiscovererClient.mm */; };
+		1FB706F61CDCC9BE00E3B594 /* WebLocalNetworkDiscovererClient.h in Headers */ = {isa = PBXBuildFile; fileRef = 1FB706F51CDCC9BE00E3B594 /* WebLocalNetworkDiscovererClient.h */; };
 		22F219CC08D236730030E078 /* WebBackForwardListPrivate.h in Headers */ = {isa = PBXBuildFile; fileRef = 22F219CB08D236730030E078 /* WebBackForwardListPrivate.h */; settings = {ATTRIBUTES = (Private, ); }; };
 		29AEF960134C76FB00FE5096 /* OutlookQuirksUserScript.js in Resources */ = {isa = PBXBuildFile; fileRef = 29AEF95D134C755400FE5096 /* OutlookQuirksUserScript.js */; };
 		2D25396618CE85C200270222 /* WebSharingServicePickerController.h in Headers */ = {isa = PBXBuildFile; fileRef = 2D25396418CE85C200270222 /* WebSharingServicePickerController.h */; };
@@ -896,6 +898,8 @@
 		1C904FD30BA9DD0F0081E9D0 /* Version.xcconfig */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.xcconfig; path = Version.xcconfig; sourceTree = "<group>"; };
 		1C904FD40BA9DD0F0081E9D0 /* DebugRelease.xcconfig */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.xcconfig; path = DebugRelease.xcconfig; sourceTree = "<group>"; };
 		1C904FD50BA9DD0F0081E9D0 /* Base.xcconfig */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.xcconfig; path = Base.xcconfig; sourceTree = "<group>"; };
+		1FB706F31CDCC97F00E3B594 /* WebLocalNetworkDiscovererClient.mm */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.objcpp; path = WebLocalNetworkDiscovererClient.mm; sourceTree = "<group>"; };
+		1FB706F51CDCC9BE00E3B594 /* WebLocalNetworkDiscovererClient.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = WebLocalNetworkDiscovererClient.h; sourceTree = "<group>"; };
 		22F219CB08D236730030E078 /* WebBackForwardListPrivate.h */ = {isa = PBXFileReference; fileEncoding = 4; indentWidth = 4; lastKnownFileType = sourcecode.c.h; path = WebBackForwardListPrivate.h; sourceTree = "<group>"; tabWidth = 8; usesTabs = 0; };
 		2568C72C0174912D0ECA149E /* WebKit.h */ = {isa = PBXFileReference; fileEncoding = 4; indentWidth = 4; lastKnownFileType = sourcecode.c.h; path = WebKit.h; sourceTree = "<group>"; tabWidth = 8; usesTabs = 0; };
 		29AEF95D134C755400FE5096 /* OutlookQuirksUserScript.js */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.javascript; path = OutlookQuirksUserScript.js; sourceTree = "<group>"; };
@@ -2603,6 +2607,8 @@
 				9345D4EB0365C5B2008635CE /* WebJavaScriptTextInputPanel.m */,
 				CD8BFCE615531224005AFB25 /* WebKitFullScreenListener.h */,
 				CD8BFCE515531224005AFB25 /* WebKitFullScreenListener.mm */,
+				1FB706F51CDCC9BE00E3B594 /* WebLocalNetworkDiscovererClient.h */,
+				1FB706F31CDCC97F00E3B594 /* WebLocalNetworkDiscovererClient.mm */,
 				31C11A6C1476552E0049A4CC /* WebNotificationClient.h */,
 				31C11A6D1476552E0049A4CC /* WebNotificationClient.mm */,
 				A58A5797143E727000125F50 /* WebOpenPanelResultListener.h */,
@@ -3190,6 +3196,7 @@
 				4618DFF81DEF760A0033C3AA /* WebValidationMessageClient.h in Headers */,
 				939810700824BF01008DF038 /* WebView.h in Headers */,
 				BC2E464D0FD8A96800A9D9DE /* WebViewData.h in Headers */,
+				1FB706F61CDCC9BE00E3B594 /* WebLocalNetworkDiscovererClient.h in Headers */,
 				1430C12D1B2C5DF700DEA01D /* WebViewGroup.h in Headers */,
 				9398109B0824BF01008DF038 /* WebViewInternal.h in Headers */,
 				939810710824BF01008DF038 /* WebViewPrivate.h in Headers */,
@@ -3686,6 +3693,7 @@
 				E4AEF97B1C0DF4BC00B01727 /* WebResourceLoadScheduler.cpp in Sources */,
 				7E6FEF0908985A7200C44C3F /* WebScriptDebugDelegate.mm in Sources */,
 				C0167BF90D7F5DD00028696E /* WebScriptDebugger.mm in Sources */,
+				1FB706F41CDCC97F00E3B594 /* WebLocalNetworkDiscovererClient.mm in Sources */,
 				C0B1F7E910AC8E3100C925D9 /* WebScriptWorld.mm in Sources */,
 				A5DEFC0A11D5331C00885273 /* WebSecurityOrigin.mm in Sources */,
 				A10C1D751820300E0036883A /* WebSelectionRect.m in Sources */,
diff --git a/Source/WebKit/mac/Configurations/FeatureDefines.xcconfig b/Source/WebKit/mac/Configurations/FeatureDefines.xcconfig
index 625c2c72a6f..ccad2aba169 100644
--- a/Source/WebKit/mac/Configurations/FeatureDefines.xcconfig
+++ b/Source/WebKit/mac/Configurations/FeatureDefines.xcconfig
@@ -215,6 +215,7 @@ ENABLE_WEBGPU = ENABLE_WEBGPU;
 ENABLE_WEBGPU[sdk=iphonesimulator*] = ;
 ENABLE_WEB_ANIMATIONS = ENABLE_WEB_ANIMATIONS;
 ENABLE_WEB_AUDIO = ENABLE_WEB_AUDIO;
+ENABLE_WEB_DIAL = ENABLE_WEB_DIAL;
 ENABLE_WEB_REPLAY = $(ENABLE_WEB_REPLAY_$(PLATFORM_NAME)_$(CONFIGURATION));
 ENABLE_WEB_REPLAY_macosx_Debug = ENABLE_WEB_REPLAY;
 ENABLE_WEB_REPLAY_macosx_Release = ENABLE_WEB_REPLAY;
@@ -250,4 +251,4 @@ ENABLE_DRAG_SUPPORT[sdk=iphonesimulator11*] = ENABLE_DRAG_SUPPORT;
 ENABLE_DATA_INTERACTION[sdk=iphoneos11*] = ENABLE_DATA_INTERACTION;
 ENABLE_DATA_INTERACTION[sdk=iphonesimulator11*] = ENABLE_DATA_INTERACTION;
 
-FEATURE_DEFINES = $(ENABLE_3D_TRANSFORMS) $(ENABLE_ACCELERATED_2D_CANVAS) $(ENABLE_ACCELERATED_OVERFLOW_SCROLLING) $(ENABLE_APPLE_PAY) $(ENABLE_APPLE_PAY_SESSION_V3) $(ENABLE_ATTACHMENT_ELEMENT) $(ENABLE_AVF_CAPTIONS) $(ENABLE_CACHE_PARTITIONING) $(ENABLE_CANVAS_PATH) $(ENABLE_CANVAS_PROXY) $(ENABLE_CHANNEL_MESSAGING) $(ENABLE_CONTENT_FILTERING) $(ENABLE_CSS_ANIMATIONS_LEVEL_2) $(ENABLE_CSS_BOX_DECORATION_BREAK) $(ENABLE_CSS_COMPOSITING) $(ENABLE_CSS_DEVICE_ADAPTATION) $(ENABLE_CSS_IMAGE_ORIENTATION) $(ENABLE_CSS_IMAGE_RESOLUTION) $(ENABLE_CSS_REGIONS) $(ENABLE_CSS_SCROLL_SNAP) $(ENABLE_CSS_SELECTORS_LEVEL4) $(ENABLE_CSS_TRAILING_WORD) $(ENABLE_CSS3_TEXT) $(ENABLE_CURSOR_VISIBILITY) $(ENABLE_CUSTOM_SCHEME_HANDLER) $(ENABLE_DASHBOARD_SUPPORT) $(ENABLE_DATA_INTERACTION) $(ENABLE_DATA_TRANSFER_ITEMS) $(ENABLE_DATACUE_VALUE) $(ENABLE_DATALIST_ELEMENT) $(ENABLE_DEVICE_ORIENTATION) $(ENABLE_DRAG_SUPPORT) $(ENABLE_ENCRYPTED_MEDIA) $(ENABLE_FAST_JIT_PERMISSIONS) $(ENABLE_FETCH_API) $(ENABLE_FILTERS_LEVEL_2) $(ENABLE_FTL_JIT) $(ENABLE_FULLSCREEN_API) $(ENABLE_GAMEPAD_DEPRECATED) $(ENABLE_GAMEPAD) $(ENABLE_GEOLOCATION) $(ENABLE_ICONDATABASE) $(ENABLE_INDEXED_DATABASE_IN_WORKERS) $(ENABLE_INDEXED_DATABASE) $(ENABLE_INPUT_TYPE_COLOR_POPOVER) $(ENABLE_INPUT_TYPE_COLOR) $(ENABLE_INPUT_TYPE_DATE) $(ENABLE_INPUT_TYPE_DATETIME_INCOMPLETE) $(ENABLE_INPUT_TYPE_DATETIMELOCAL) $(ENABLE_INPUT_TYPE_MONTH) $(ENABLE_INPUT_TYPE_TIME) $(ENABLE_INPUT_TYPE_WEEK) $(ENABLE_INTERSECTION_OBSERVER) $(ENABLE_INTL) $(ENABLE_IOS_GESTURE_EVENTS) $(ENABLE_IOS_TOUCH_EVENTS) $(ENABLE_JIT) $(ENABLE_KEYBOARD_KEY_ATTRIBUTE) $(ENABLE_KEYBOARD_CODE_ATTRIBUTE) $(ENABLE_LEGACY_CSS_VENDOR_PREFIXES) $(ENABLE_LEGACY_ENCRYPTED_MEDIA) $(ENABLE_LEGACY_VENDOR_PREFIXES) $(ENABLE_LETTERPRESS) $(ENABLE_LINK_PREFETCH) $(ENABLE_MAC_GESTURE_EVENTS) $(ENABLE_MATHML) $(ENABLE_MEDIA_CAPTURE) $(ENABLE_MEDIA_CONTROLS_SCRIPT) $(ENABLE_MEDIA_SESSION) $(ENABLE_MEDIA_SOURCE) $(ENABLE_MEDIA_STATISTICS) $(ENABLE_MEDIA_STREAM) $(ENABLE_METER_ELEMENT) $(ENABLE_MHTML) $(ENABLE_MOUSE_CURSOR_SCALE) $(ENABLE_NAVIGATOR_CONTENT_UTILS) $(ENABLE_NAVIGATOR_HWCONCURRENCY) $(ENABLE_NAVIGATOR_STANDALONE) $(ENABLE_NOSNIFF) $(ENABLE_NOTIFICATIONS) $(ENABLE_PDFKIT_PLUGIN) $(ENABLE_POINTER_LOCK) $(ENABLE_PROXIMITY_EVENTS) $(ENABLE_PUBLIC_SUFFIX_LIST) $(ENABLE_QUOTA) $(ENABLE_REMOTE_INSPECTOR) $(ENABLE_REQUEST_AUTOCOMPLETE) $(ENABLE_RESOLUTION_MEDIA_QUERY) $(ENABLE_RESOURCE_USAGE) $(ENABLE_RUBBER_BANDING) $(ENABLE_SERVICE_CONTROLS) $(ENABLE_SPEECH_SYNTHESIS) $(ENABLE_STREAMS_API) $(ENABLE_SUBTLE_CRYPTO) $(ENABLE_SVG_FONTS) $(ENABLE_TELEPHONE_NUMBER_DETECTION) $(ENABLE_TEXT_AUTOSIZING) $(ENABLE_TOUCH_EVENTS) $(ENABLE_TOUCH_ICON_LOADING) $(ENABLE_USERSELECT_ALL) $(ENABLE_VARIATION_FONTS) $(ENABLE_VIDEO_PRESENTATION_MODE) $(ENABLE_MAC_VIDEO_TOOLBOX) $(ENABLE_VIDEO_TRACK) $(ENABLE_VIDEO) $(ENABLE_VIEW_MODE_CSS_MEDIA) $(ENABLE_WEB_ANIMATIONS) $(ENABLE_WEB_AUDIO) $(ENABLE_WEB_REPLAY) $(ENABLE_WEB_RTC) $(ENABLE_WEB_SOCKETS) $(ENABLE_WEB_TIMING) $(ENABLE_WEBASSEMBLY) $(ENABLE_WEBGL) $(ENABLE_WEBGL2) $(ENABLE_WEBGPU) $(ENABLE_WIRELESS_PLAYBACK_TARGET) $(ENABLE_XSLT);
+FEATURE_DEFINES = $(ENABLE_3D_TRANSFORMS) $(ENABLE_ACCELERATED_2D_CANVAS) $(ENABLE_ACCELERATED_OVERFLOW_SCROLLING) $(ENABLE_APPLE_PAY) $(ENABLE_APPLE_PAY_SESSION_V3) $(ENABLE_ATTACHMENT_ELEMENT) $(ENABLE_AVF_CAPTIONS) $(ENABLE_CACHE_PARTITIONING) $(ENABLE_CANVAS_PATH) $(ENABLE_CANVAS_PROXY) $(ENABLE_CHANNEL_MESSAGING) $(ENABLE_CONTENT_FILTERING) $(ENABLE_CSS_ANIMATIONS_LEVEL_2) $(ENABLE_CSS_BOX_DECORATION_BREAK) $(ENABLE_CSS_COMPOSITING) $(ENABLE_CSS_DEVICE_ADAPTATION) $(ENABLE_CSS_IMAGE_ORIENTATION) $(ENABLE_CSS_IMAGE_RESOLUTION) $(ENABLE_CSS_REGIONS) $(ENABLE_CSS_SCROLL_SNAP) $(ENABLE_CSS_SELECTORS_LEVEL4) $(ENABLE_CSS_TRAILING_WORD) $(ENABLE_CSS3_TEXT) $(ENABLE_CURSOR_VISIBILITY) $(ENABLE_CUSTOM_SCHEME_HANDLER) $(ENABLE_DASHBOARD_SUPPORT) $(ENABLE_DATA_INTERACTION) $(ENABLE_DATA_TRANSFER_ITEMS) $(ENABLE_DATACUE_VALUE) $(ENABLE_DATALIST_ELEMENT) $(ENABLE_DEVICE_ORIENTATION) $(ENABLE_DRAG_SUPPORT) $(ENABLE_ENCRYPTED_MEDIA) $(ENABLE_FAST_JIT_PERMISSIONS) $(ENABLE_FETCH_API) $(ENABLE_FILTERS_LEVEL_2) $(ENABLE_FTL_JIT) $(ENABLE_FULLSCREEN_API) $(ENABLE_GAMEPAD_DEPRECATED) $(ENABLE_GAMEPAD) $(ENABLE_GEOLOCATION) $(ENABLE_ICONDATABASE) $(ENABLE_INDEXED_DATABASE_IN_WORKERS) $(ENABLE_INDEXED_DATABASE) $(ENABLE_INPUT_TYPE_COLOR_POPOVER) $(ENABLE_INPUT_TYPE_COLOR) $(ENABLE_INPUT_TYPE_DATE) $(ENABLE_INPUT_TYPE_DATETIME_INCOMPLETE) $(ENABLE_INPUT_TYPE_DATETIMELOCAL) $(ENABLE_INPUT_TYPE_MONTH) $(ENABLE_INPUT_TYPE_TIME) $(ENABLE_INPUT_TYPE_WEEK) $(ENABLE_INTERSECTION_OBSERVER) $(ENABLE_INTL) $(ENABLE_IOS_GESTURE_EVENTS) $(ENABLE_IOS_TOUCH_EVENTS) $(ENABLE_JIT) $(ENABLE_KEYBOARD_KEY_ATTRIBUTE) $(ENABLE_KEYBOARD_CODE_ATTRIBUTE) $(ENABLE_LEGACY_CSS_VENDOR_PREFIXES) $(ENABLE_LEGACY_ENCRYPTED_MEDIA) $(ENABLE_LEGACY_VENDOR_PREFIXES) $(ENABLE_LETTERPRESS) $(ENABLE_LINK_PREFETCH) $(ENABLE_MAC_GESTURE_EVENTS) $(ENABLE_MATHML) $(ENABLE_MEDIA_CAPTURE) $(ENABLE_MEDIA_CONTROLS_SCRIPT) $(ENABLE_MEDIA_SESSION) $(ENABLE_MEDIA_SOURCE) $(ENABLE_MEDIA_STATISTICS) $(ENABLE_MEDIA_STREAM) $(ENABLE_METER_ELEMENT) $(ENABLE_MHTML) $(ENABLE_MOUSE_CURSOR_SCALE) $(ENABLE_NAVIGATOR_CONTENT_UTILS) $(ENABLE_NAVIGATOR_HWCONCURRENCY) $(ENABLE_NAVIGATOR_STANDALONE) $(ENABLE_NOSNIFF) $(ENABLE_NOTIFICATIONS) $(ENABLE_PDFKIT_PLUGIN) $(ENABLE_POINTER_LOCK) $(ENABLE_PROXIMITY_EVENTS) $(ENABLE_PUBLIC_SUFFIX_LIST) $(ENABLE_QUOTA) $(ENABLE_REMOTE_INSPECTOR) $(ENABLE_REQUEST_AUTOCOMPLETE) $(ENABLE_RESOLUTION_MEDIA_QUERY) $(ENABLE_RESOURCE_USAGE) $(ENABLE_RUBBER_BANDING) $(ENABLE_SERVICE_CONTROLS) $(ENABLE_SPEECH_SYNTHESIS) $(ENABLE_STREAMS_API) $(ENABLE_SUBTLE_CRYPTO) $(ENABLE_SVG_FONTS) $(ENABLE_TELEPHONE_NUMBER_DETECTION) $(ENABLE_TEXT_AUTOSIZING) $(ENABLE_TOUCH_EVENTS) $(ENABLE_TOUCH_ICON_LOADING) $(ENABLE_USERSELECT_ALL) $(ENABLE_VARIATION_FONTS) $(ENABLE_VIDEO_PRESENTATION_MODE) $(ENABLE_MAC_VIDEO_TOOLBOX) $(ENABLE_VIDEO_TRACK) $(ENABLE_VIDEO) $(ENABLE_VIEW_MODE_CSS_MEDIA) $(ENABLE_WEB_ANIMATIONS) $(ENABLE_WEB_AUDIO) $(ENABLE_WEB_DIAL) $(ENABLE_WEB_REPLAY) $(ENABLE_WEB_RTC) $(ENABLE_WEB_SOCKETS) $(ENABLE_WEB_TIMING) $(ENABLE_WEBASSEMBLY) $(ENABLE_WEBGL) $(ENABLE_WEBGL2) $(ENABLE_WEBGPU) $(ENABLE_WIRELESS_PLAYBACK_TARGET) $(ENABLE_XSLT);
diff --git a/Source/WebKit/mac/WebCoreSupport/WebLocalNetworkDiscovererClient.h b/Source/WebKit/mac/WebCoreSupport/WebLocalNetworkDiscovererClient.h
new file mode 100644
index 00000000000..d4dbe222537
--- /dev/null
+++ b/Source/WebKit/mac/WebCoreSupport/WebLocalNetworkDiscovererClient.h
@@ -0,0 +1,58 @@
+/*
+ * Copyright (C) 2016 Michal Debski <mi.zd.debski@gmail.com>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1.  Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ * 2.  Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ * 3.  Neither the name of Apple Inc. ("Apple") nor the names of
+ *     its contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef WebLocalNetworkDiscoveryClient_h
+#define WebLocalNetworkDiscoveryClient_h
+
+#if ENABLE(WEB_DIAL)
+
+#import <WebCore/LocalNetworkDiscovererClient.h>
+
+@class WebView;
+
+class WebLocalNetworkDiscovererClient final : public WebCore::LocalNetworkDiscovererClient {
+public:
+    explicit WebLocalNetworkDiscovererClient(WebView* webView)
+        : m_webView(webView)
+    {
+        UNUSED_PARAM(m_webView);
+    }
+
+    void pageDestroyed() override;
+
+    void requestPermission(WebCore::LocalNetworkEnumerationRequest&) override;
+    void cancelPermissionRequest(WebCore::LocalNetworkEnumerationRequest&) override;
+
+    RefPtr<WebCore::DiscoveryServiceChannel> getInvokerChannel() override;
+
+private:
+    WebView* m_webView;
+};
+
+#endif
+#endif // WebLocalNetworkDiscoveryClient_h
diff --git a/Source/WebKit/mac/WebCoreSupport/WebLocalNetworkDiscovererClient.mm b/Source/WebKit/mac/WebCoreSupport/WebLocalNetworkDiscovererClient.mm
new file mode 100644
index 00000000000..ad52ae971e6
--- /dev/null
+++ b/Source/WebKit/mac/WebCoreSupport/WebLocalNetworkDiscovererClient.mm
@@ -0,0 +1,63 @@
+/*
+ * Copyright (C) 2016 Michal Debski <mi.zd.debski@gmail.com>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1.  Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ * 2.  Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ * 3.  Neither the name of Apple Inc. ("Apple") nor the names of
+ *     its contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#import "WebLocalNetworkDiscovererClient.h"
+
+#if ENABLE(WEB_DIAL)
+
+#import "WebViewInternal.h"
+#import <WebCore/LocalNetworkDevices.h>
+#import <WebCore/LocalNetworkEnumerationRequest.h>
+#import <WebCore/NotImplemented.h>
+
+using namespace WebCore;
+
+void WebLocalNetworkDiscovererClient::pageDestroyed()
+{
+    delete this;
+}
+
+void WebLocalNetworkDiscovererClient::requestPermission(LocalNetworkEnumerationRequest& requester)
+{
+    notImplemented();
+    requester.permissionGranted();
+}
+
+void WebLocalNetworkDiscovererClient::cancelPermissionRequest(LocalNetworkEnumerationRequest& requester)
+{
+    notImplemented();
+}
+
+
+RefPtr<WebCore::DiscoveryServiceChannel> WebLocalNetworkDiscovererClient::getInvokerChannel()
+{
+    notImplemented();
+    return nullptr;
+}
+
+#endif // ENABLE(WEB_DIAL)
diff --git a/Source/WebKit/mac/WebView/WebView.mm b/Source/WebKit/mac/WebView/WebView.mm
index c54a97ad385..b84cde1b3cf 100644
--- a/Source/WebKit/mac/WebView/WebView.mm
+++ b/Source/WebKit/mac/WebView/WebView.mm
@@ -83,6 +83,7 @@
 #import "WebKitStatisticsPrivate.h"
 #import "WebKitVersionChecks.h"
 #import "WebLocalizableStrings.h"
+#import "WebLocalNetworkDiscovererClient.h"
 #import "WebNSDataExtras.h"
 #import "WebNSDataExtrasPrivate.h"
 #import "WebNSDictionaryExtras.h"
@@ -1481,6 +1482,10 @@ static void WebKitInitializeGamepadProviderIfNecessary()
     WebCore::provideUserMediaTo(_private->page, new WebUserMediaClient(self));
 #endif
 
+#if ENABLE(WEB_DIAL)
+    WebCore::provideLocalNetworkDiscoveryTo(_private->page, new WebLocalNetworkDiscovererClient(self));
+#endif
+
 #if ENABLE(REMOTE_INSPECTOR)
     _private->page->setRemoteInspectionAllowed(true);
 #endif
diff --git a/Source/WebKit2/Configurations/FeatureDefines.xcconfig b/Source/WebKit2/Configurations/FeatureDefines.xcconfig
index 625c2c72a6f..ccad2aba169 100644
--- a/Source/WebKit2/Configurations/FeatureDefines.xcconfig
+++ b/Source/WebKit2/Configurations/FeatureDefines.xcconfig
@@ -215,6 +215,7 @@ ENABLE_WEBGPU = ENABLE_WEBGPU;
 ENABLE_WEBGPU[sdk=iphonesimulator*] = ;
 ENABLE_WEB_ANIMATIONS = ENABLE_WEB_ANIMATIONS;
 ENABLE_WEB_AUDIO = ENABLE_WEB_AUDIO;
+ENABLE_WEB_DIAL = ENABLE_WEB_DIAL;
 ENABLE_WEB_REPLAY = $(ENABLE_WEB_REPLAY_$(PLATFORM_NAME)_$(CONFIGURATION));
 ENABLE_WEB_REPLAY_macosx_Debug = ENABLE_WEB_REPLAY;
 ENABLE_WEB_REPLAY_macosx_Release = ENABLE_WEB_REPLAY;
@@ -250,4 +251,4 @@ ENABLE_DRAG_SUPPORT[sdk=iphonesimulator11*] = ENABLE_DRAG_SUPPORT;
 ENABLE_DATA_INTERACTION[sdk=iphoneos11*] = ENABLE_DATA_INTERACTION;
 ENABLE_DATA_INTERACTION[sdk=iphonesimulator11*] = ENABLE_DATA_INTERACTION;
 
-FEATURE_DEFINES = $(ENABLE_3D_TRANSFORMS) $(ENABLE_ACCELERATED_2D_CANVAS) $(ENABLE_ACCELERATED_OVERFLOW_SCROLLING) $(ENABLE_APPLE_PAY) $(ENABLE_APPLE_PAY_SESSION_V3) $(ENABLE_ATTACHMENT_ELEMENT) $(ENABLE_AVF_CAPTIONS) $(ENABLE_CACHE_PARTITIONING) $(ENABLE_CANVAS_PATH) $(ENABLE_CANVAS_PROXY) $(ENABLE_CHANNEL_MESSAGING) $(ENABLE_CONTENT_FILTERING) $(ENABLE_CSS_ANIMATIONS_LEVEL_2) $(ENABLE_CSS_BOX_DECORATION_BREAK) $(ENABLE_CSS_COMPOSITING) $(ENABLE_CSS_DEVICE_ADAPTATION) $(ENABLE_CSS_IMAGE_ORIENTATION) $(ENABLE_CSS_IMAGE_RESOLUTION) $(ENABLE_CSS_REGIONS) $(ENABLE_CSS_SCROLL_SNAP) $(ENABLE_CSS_SELECTORS_LEVEL4) $(ENABLE_CSS_TRAILING_WORD) $(ENABLE_CSS3_TEXT) $(ENABLE_CURSOR_VISIBILITY) $(ENABLE_CUSTOM_SCHEME_HANDLER) $(ENABLE_DASHBOARD_SUPPORT) $(ENABLE_DATA_INTERACTION) $(ENABLE_DATA_TRANSFER_ITEMS) $(ENABLE_DATACUE_VALUE) $(ENABLE_DATALIST_ELEMENT) $(ENABLE_DEVICE_ORIENTATION) $(ENABLE_DRAG_SUPPORT) $(ENABLE_ENCRYPTED_MEDIA) $(ENABLE_FAST_JIT_PERMISSIONS) $(ENABLE_FETCH_API) $(ENABLE_FILTERS_LEVEL_2) $(ENABLE_FTL_JIT) $(ENABLE_FULLSCREEN_API) $(ENABLE_GAMEPAD_DEPRECATED) $(ENABLE_GAMEPAD) $(ENABLE_GEOLOCATION) $(ENABLE_ICONDATABASE) $(ENABLE_INDEXED_DATABASE_IN_WORKERS) $(ENABLE_INDEXED_DATABASE) $(ENABLE_INPUT_TYPE_COLOR_POPOVER) $(ENABLE_INPUT_TYPE_COLOR) $(ENABLE_INPUT_TYPE_DATE) $(ENABLE_INPUT_TYPE_DATETIME_INCOMPLETE) $(ENABLE_INPUT_TYPE_DATETIMELOCAL) $(ENABLE_INPUT_TYPE_MONTH) $(ENABLE_INPUT_TYPE_TIME) $(ENABLE_INPUT_TYPE_WEEK) $(ENABLE_INTERSECTION_OBSERVER) $(ENABLE_INTL) $(ENABLE_IOS_GESTURE_EVENTS) $(ENABLE_IOS_TOUCH_EVENTS) $(ENABLE_JIT) $(ENABLE_KEYBOARD_KEY_ATTRIBUTE) $(ENABLE_KEYBOARD_CODE_ATTRIBUTE) $(ENABLE_LEGACY_CSS_VENDOR_PREFIXES) $(ENABLE_LEGACY_ENCRYPTED_MEDIA) $(ENABLE_LEGACY_VENDOR_PREFIXES) $(ENABLE_LETTERPRESS) $(ENABLE_LINK_PREFETCH) $(ENABLE_MAC_GESTURE_EVENTS) $(ENABLE_MATHML) $(ENABLE_MEDIA_CAPTURE) $(ENABLE_MEDIA_CONTROLS_SCRIPT) $(ENABLE_MEDIA_SESSION) $(ENABLE_MEDIA_SOURCE) $(ENABLE_MEDIA_STATISTICS) $(ENABLE_MEDIA_STREAM) $(ENABLE_METER_ELEMENT) $(ENABLE_MHTML) $(ENABLE_MOUSE_CURSOR_SCALE) $(ENABLE_NAVIGATOR_CONTENT_UTILS) $(ENABLE_NAVIGATOR_HWCONCURRENCY) $(ENABLE_NAVIGATOR_STANDALONE) $(ENABLE_NOSNIFF) $(ENABLE_NOTIFICATIONS) $(ENABLE_PDFKIT_PLUGIN) $(ENABLE_POINTER_LOCK) $(ENABLE_PROXIMITY_EVENTS) $(ENABLE_PUBLIC_SUFFIX_LIST) $(ENABLE_QUOTA) $(ENABLE_REMOTE_INSPECTOR) $(ENABLE_REQUEST_AUTOCOMPLETE) $(ENABLE_RESOLUTION_MEDIA_QUERY) $(ENABLE_RESOURCE_USAGE) $(ENABLE_RUBBER_BANDING) $(ENABLE_SERVICE_CONTROLS) $(ENABLE_SPEECH_SYNTHESIS) $(ENABLE_STREAMS_API) $(ENABLE_SUBTLE_CRYPTO) $(ENABLE_SVG_FONTS) $(ENABLE_TELEPHONE_NUMBER_DETECTION) $(ENABLE_TEXT_AUTOSIZING) $(ENABLE_TOUCH_EVENTS) $(ENABLE_TOUCH_ICON_LOADING) $(ENABLE_USERSELECT_ALL) $(ENABLE_VARIATION_FONTS) $(ENABLE_VIDEO_PRESENTATION_MODE) $(ENABLE_MAC_VIDEO_TOOLBOX) $(ENABLE_VIDEO_TRACK) $(ENABLE_VIDEO) $(ENABLE_VIEW_MODE_CSS_MEDIA) $(ENABLE_WEB_ANIMATIONS) $(ENABLE_WEB_AUDIO) $(ENABLE_WEB_REPLAY) $(ENABLE_WEB_RTC) $(ENABLE_WEB_SOCKETS) $(ENABLE_WEB_TIMING) $(ENABLE_WEBASSEMBLY) $(ENABLE_WEBGL) $(ENABLE_WEBGL2) $(ENABLE_WEBGPU) $(ENABLE_WIRELESS_PLAYBACK_TARGET) $(ENABLE_XSLT);
+FEATURE_DEFINES = $(ENABLE_3D_TRANSFORMS) $(ENABLE_ACCELERATED_2D_CANVAS) $(ENABLE_ACCELERATED_OVERFLOW_SCROLLING) $(ENABLE_APPLE_PAY) $(ENABLE_APPLE_PAY_SESSION_V3) $(ENABLE_ATTACHMENT_ELEMENT) $(ENABLE_AVF_CAPTIONS) $(ENABLE_CACHE_PARTITIONING) $(ENABLE_CANVAS_PATH) $(ENABLE_CANVAS_PROXY) $(ENABLE_CHANNEL_MESSAGING) $(ENABLE_CONTENT_FILTERING) $(ENABLE_CSS_ANIMATIONS_LEVEL_2) $(ENABLE_CSS_BOX_DECORATION_BREAK) $(ENABLE_CSS_COMPOSITING) $(ENABLE_CSS_DEVICE_ADAPTATION) $(ENABLE_CSS_IMAGE_ORIENTATION) $(ENABLE_CSS_IMAGE_RESOLUTION) $(ENABLE_CSS_REGIONS) $(ENABLE_CSS_SCROLL_SNAP) $(ENABLE_CSS_SELECTORS_LEVEL4) $(ENABLE_CSS_TRAILING_WORD) $(ENABLE_CSS3_TEXT) $(ENABLE_CURSOR_VISIBILITY) $(ENABLE_CUSTOM_SCHEME_HANDLER) $(ENABLE_DASHBOARD_SUPPORT) $(ENABLE_DATA_INTERACTION) $(ENABLE_DATA_TRANSFER_ITEMS) $(ENABLE_DATACUE_VALUE) $(ENABLE_DATALIST_ELEMENT) $(ENABLE_DEVICE_ORIENTATION) $(ENABLE_DRAG_SUPPORT) $(ENABLE_ENCRYPTED_MEDIA) $(ENABLE_FAST_JIT_PERMISSIONS) $(ENABLE_FETCH_API) $(ENABLE_FILTERS_LEVEL_2) $(ENABLE_FTL_JIT) $(ENABLE_FULLSCREEN_API) $(ENABLE_GAMEPAD_DEPRECATED) $(ENABLE_GAMEPAD) $(ENABLE_GEOLOCATION) $(ENABLE_ICONDATABASE) $(ENABLE_INDEXED_DATABASE_IN_WORKERS) $(ENABLE_INDEXED_DATABASE) $(ENABLE_INPUT_TYPE_COLOR_POPOVER) $(ENABLE_INPUT_TYPE_COLOR) $(ENABLE_INPUT_TYPE_DATE) $(ENABLE_INPUT_TYPE_DATETIME_INCOMPLETE) $(ENABLE_INPUT_TYPE_DATETIMELOCAL) $(ENABLE_INPUT_TYPE_MONTH) $(ENABLE_INPUT_TYPE_TIME) $(ENABLE_INPUT_TYPE_WEEK) $(ENABLE_INTERSECTION_OBSERVER) $(ENABLE_INTL) $(ENABLE_IOS_GESTURE_EVENTS) $(ENABLE_IOS_TOUCH_EVENTS) $(ENABLE_JIT) $(ENABLE_KEYBOARD_KEY_ATTRIBUTE) $(ENABLE_KEYBOARD_CODE_ATTRIBUTE) $(ENABLE_LEGACY_CSS_VENDOR_PREFIXES) $(ENABLE_LEGACY_ENCRYPTED_MEDIA) $(ENABLE_LEGACY_VENDOR_PREFIXES) $(ENABLE_LETTERPRESS) $(ENABLE_LINK_PREFETCH) $(ENABLE_MAC_GESTURE_EVENTS) $(ENABLE_MATHML) $(ENABLE_MEDIA_CAPTURE) $(ENABLE_MEDIA_CONTROLS_SCRIPT) $(ENABLE_MEDIA_SESSION) $(ENABLE_MEDIA_SOURCE) $(ENABLE_MEDIA_STATISTICS) $(ENABLE_MEDIA_STREAM) $(ENABLE_METER_ELEMENT) $(ENABLE_MHTML) $(ENABLE_MOUSE_CURSOR_SCALE) $(ENABLE_NAVIGATOR_CONTENT_UTILS) $(ENABLE_NAVIGATOR_HWCONCURRENCY) $(ENABLE_NAVIGATOR_STANDALONE) $(ENABLE_NOSNIFF) $(ENABLE_NOTIFICATIONS) $(ENABLE_PDFKIT_PLUGIN) $(ENABLE_POINTER_LOCK) $(ENABLE_PROXIMITY_EVENTS) $(ENABLE_PUBLIC_SUFFIX_LIST) $(ENABLE_QUOTA) $(ENABLE_REMOTE_INSPECTOR) $(ENABLE_REQUEST_AUTOCOMPLETE) $(ENABLE_RESOLUTION_MEDIA_QUERY) $(ENABLE_RESOURCE_USAGE) $(ENABLE_RUBBER_BANDING) $(ENABLE_SERVICE_CONTROLS) $(ENABLE_SPEECH_SYNTHESIS) $(ENABLE_STREAMS_API) $(ENABLE_SUBTLE_CRYPTO) $(ENABLE_SVG_FONTS) $(ENABLE_TELEPHONE_NUMBER_DETECTION) $(ENABLE_TEXT_AUTOSIZING) $(ENABLE_TOUCH_EVENTS) $(ENABLE_TOUCH_ICON_LOADING) $(ENABLE_USERSELECT_ALL) $(ENABLE_VARIATION_FONTS) $(ENABLE_VIDEO_PRESENTATION_MODE) $(ENABLE_MAC_VIDEO_TOOLBOX) $(ENABLE_VIDEO_TRACK) $(ENABLE_VIDEO) $(ENABLE_VIEW_MODE_CSS_MEDIA) $(ENABLE_WEB_ANIMATIONS) $(ENABLE_WEB_AUDIO) $(ENABLE_WEB_DIAL) $(ENABLE_WEB_REPLAY) $(ENABLE_WEB_RTC) $(ENABLE_WEB_SOCKETS) $(ENABLE_WEB_TIMING) $(ENABLE_WEBASSEMBLY) $(ENABLE_WEBGL) $(ENABLE_WEBGL2) $(ENABLE_WEBGPU) $(ENABLE_WIRELESS_PLAYBACK_TARGET) $(ENABLE_XSLT);
diff --git a/Source/WebKit2/Platform/Logging.h b/Source/WebKit2/Platform/Logging.h
index b6ae8d772c9..7aa0e446f3c 100644
--- a/Source/WebKit2/Platform/Logging.h
+++ b/Source/WebKit2/Platform/Logging.h
@@ -71,6 +71,7 @@ extern "C" {
     M(ViewState) \
     M(VirtualMemory) \
     M(VisibleRects) \
+    M(WebDial) \
     M(WebRTC) \
 
 WEBKIT2_LOG_CHANNELS(DECLARE_LOG_CHANNEL)
diff --git a/Source/WebKit2/Shared/API/APIObject.h b/Source/WebKit2/Shared/API/APIObject.h
index 962864f7279..8a6c15eaacc 100644
--- a/Source/WebKit2/Shared/API/APIObject.h
+++ b/Source/WebKit2/Shared/API/APIObject.h
@@ -165,6 +165,11 @@ public:
         MediaSessionMetadata,
 #endif
 
+#if ENABLE(WEB_DIAL)
+        DiscoveryService,
+        LocalNetworkDiscoveryPermissionRequest,
+#endif
+
         // Bundle types
         Bundle,
         BundleBackForwardList,
diff --git a/Source/WebKit2/Shared/DiscoveryService/Cocoa/DiscoveryServicePrivateCocoa.h b/Source/WebKit2/Shared/DiscoveryService/Cocoa/DiscoveryServicePrivateCocoa.h
new file mode 100644
index 00000000000..f59af7a77b0
--- /dev/null
+++ b/Source/WebKit2/Shared/DiscoveryService/Cocoa/DiscoveryServicePrivateCocoa.h
@@ -0,0 +1,75 @@
+/*
+ * Copyright (C) 2016 Michal Debski <mi.zd.debski@gmail.com>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1.  Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ * 2.  Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ * 3.  Neither the name of Apple Inc. ("Apple") nor the names of
+ *     its contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef DiscoveryServicePrivateCocoa_h
+#define DiscoveryServicePrivateCocoa_h
+
+#if ENABLE(WEB_DIAL)
+
+#import <CoreFoundation/CoreFoundation.h>
+#include "DiscoveryService.h"
+#include "DiscoveryServicePrivate.h"
+#include <memory>
+#include <wtf/Noncopyable.h>
+#include <wtf/RetainPtr.h>
+
+OBJC_CLASS NSNetService;
+OBJC_CLASS WKNetServiceDelegate;
+
+namespace WebKit {
+
+class DiscoveryServicePrivateCocoa : public DiscoveryServicePrivate {
+    WTF_MAKE_NONCOPYABLE(DiscoveryServicePrivateCocoa);
+public:
+    DiscoveryServicePrivateCocoa(DiscoveryServicePrivateClient*);
+    ~DiscoveryServicePrivateCocoa();
+
+    void publishService(const String& serviceTypeName) override;
+    void stopService() override;
+
+private:
+    static void serverAcceptCallBack(CFSocketRef socket, CFSocketCallBackType type, CFDataRef address, const void *data, void *info);
+
+    DiscoveryServicePrivateClient* m_client;
+    RetainPtr<NSNetService> m_service;
+    RetainPtr<WKNetServiceDelegate> m_delegate;
+    RetainPtr<CFSocketRef> m_ipv4socket;
+    RetainPtr<CFRunLoopSourceRef> m_source4;
+    RetainPtr<CFSocketRef> m_ipv6socket;
+    RetainPtr<CFRunLoopSourceRef> m_source6;
+};
+
+std::unique_ptr<DiscoveryServicePrivate> DiscoveryServicePrivate::create(DiscoveryServicePrivateClient* client)
+{
+    return std::make_unique<DiscoveryServicePrivateCocoa>(client);
+}
+
+} // namespace WebKit
+
+#endif // ENABLE(WEB_DIAL)
+#endif // DiscoveryServicePrivateCocoa_h
diff --git a/Source/WebKit2/Shared/DiscoveryService/Cocoa/DiscoveryServicePrivateCocoa.mm b/Source/WebKit2/Shared/DiscoveryService/Cocoa/DiscoveryServicePrivateCocoa.mm
new file mode 100644
index 00000000000..b6550a419d6
--- /dev/null
+++ b/Source/WebKit2/Shared/DiscoveryService/Cocoa/DiscoveryServicePrivateCocoa.mm
@@ -0,0 +1,256 @@
+/*
+ * Copyright (C) 2016 Michal Debski <mi.zd.debski@gmail.com>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1.  Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ * 2.  Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ * 3.  Neither the name of Apple Inc. ("Apple") nor the names of
+ *     its contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#import "config.h"
+
+#if ENABLE(WEB_DIAL)
+#import "DiscoveryServicePrivateCocoa.h"
+
+#import "Logging.h"
+#include <arpa/inet.h>
+#import <Foundation/Foundation.h>
+#include <netinet/in.h>
+#include <sys/socket.h>
+#import <wtf/text/WTFString.h>
+#import <wtf/Vector.h>
+#import <WebCore/DiscoveryServiceChannelCocoa.h>
+#import <WebCore/NotImplemented.h>
+
+using namespace WebKit;
+
+@interface WKNetServiceDelegate : NSObject <NSNetServiceDelegate>
+@end
+
+@implementation WKNetServiceDelegate {
+    DiscoveryServicePrivateClient *_service;
+}
+
+- (id)initWithDiscoveryService:(DiscoveryServicePrivateClient *)service
+{
+    if ( self = [super init]) {
+        _service = service;
+        return self;
+    }
+    return nil;
+}
+
+- (void)netServiceDidPublish:(NSNetService *)sender
+{
+    _service->servicePublishedSuccesfully();
+}
+
+- (void)netServiceDidStop:(NSNetService *)sender
+{
+    _service->serviceStopped();
+}
+
+- (void)netService:(NSNetService *)sender didNotPublish:(NSDictionary<NSString *, NSNumber *> *)errorDict
+{
+    LOG(WebDial, "netService didNotPublish");
+    notImplemented();
+}
+
+- (void)netService:(NSNetService *)sender
+didAcceptConnectionWithInputStream:(NSInputStream *)inputStream outputStream:(NSOutputStream *)outputStream
+{
+    LOG(WebDial, "netService didAcceptConnectionWithInputStream");
+
+    _service->channelEstablished(WebCore::DiscoveryServiceChannelCocoa::create(adoptNS(inputStream), adoptNS(outputStream)));
+}
+
+@end
+
+extern "C" {
+
+void DiscoveryServicePrivateCocoa::serverAcceptCallBack(CFSocketRef socket, CFSocketCallBackType type, CFDataRef address, const void *data, void *info)
+{
+    ASSERT(type == kCFSocketAcceptCallBack);
+    UNUSED_PARAM(type);
+
+    LOG(WebDial, "DiscoveryServicePrivateCocoa::serverAcceptCallBack() Started");
+
+    DiscoveryServicePrivateCocoa *server = static_cast<DiscoveryServicePrivateCocoa*>(info);
+
+    char ipStr[INET6_ADDRSTRLEN];
+
+    NSData* addrData = static_cast<NSData*>(address);
+    if (socket == server->m_ipv4socket.get()) {
+        inet_ntop(AF_INET, &(static_cast<const sockaddr_in*>([addrData bytes])->sin_addr), ipStr, INET_ADDRSTRLEN);
+        LOG(WebDial, "DiscoveryServicePrivateCocoa::serverAcceptCallBack() Connection IPv4 from: %s", ipStr);
+    } else if (socket == server->m_ipv6socket.get()) {
+        inet_ntop(AF_INET6, &(static_cast<const sockaddr_in6*>([addrData bytes])->sin6_addr), ipStr, INET6_ADDRSTRLEN);
+        LOG(WebDial, "DiscoveryServicePrivateCocoa::serverAcceptCallBack() Connection IPv6 from: %s", ipStr);
+    } else {
+        ASSERT_NOT_REACHED();
+    }
+
+    CFReadStreamRef readStream = nullptr;
+    CFWriteStreamRef writeStream = nullptr;
+    CFStreamCreatePairWithSocket(kCFAllocatorDefault, *static_cast<const CFSocketNativeHandle*>(data), &readStream, &writeStream);
+    if (readStream && writeStream) {
+        CFReadStreamSetProperty(readStream, kCFStreamPropertyShouldCloseNativeSocket, kCFBooleanTrue);
+        CFWriteStreamSetProperty(writeStream, kCFStreamPropertyShouldCloseNativeSocket, kCFBooleanTrue);
+
+        [server->m_delegate netService: server->m_service.get() didAcceptConnectionWithInputStream: static_cast<NSInputStream*>(CFRetain(readStream)) outputStream: static_cast<NSOutputStream*>(CFRetain(writeStream))];
+    } else {
+        LOG(WebDial, "DiscoveryServicePrivateCocoa::serverAcceptCallBack() Error creating streams");
+        // On any failure, we need to destroy the CFSocketNativeHandle
+        // since we are not going to use it any more.
+        close(*static_cast<const CFSocketNativeHandle*>(data));
+
+        // FIXME: error message
+        RetainPtr<NSDictionary> error = adoptNS([NSDictionary dictionary]);
+        [server->m_delegate netService: server->m_service.get() didNotPublish:error.get()];
+    }
+    if (readStream) CFRelease(readStream);
+    if (writeStream) CFRelease(writeStream);
+}
+
+}
+
+namespace WebKit {
+
+DiscoveryServicePrivateCocoa::DiscoveryServicePrivateCocoa(DiscoveryServicePrivateClient* client)
+    : m_client(client)
+{
+}
+
+DiscoveryServicePrivateCocoa::~DiscoveryServicePrivateCocoa()
+{
+}
+
+void DiscoveryServicePrivateCocoa::publishService(const String& serviceTypeName)
+{
+    LOG(WebDial, "DiscoveryServicePrivateCocoa::publishService(%s)", serviceTypeName.ascii().data());
+
+    ASSERT(!m_ipv4socket && !m_ipv6socket);       // don't call -start twice!
+
+    CFSocketContext socketCtxt = {0, static_cast<void*>(this), nullptr, nullptr, nullptr};
+    m_ipv4socket = adoptCF(CFSocketCreate(kCFAllocatorDefault, AF_INET,  SOCK_STREAM, IPPROTO_TCP, kCFSocketAcceptCallBack, &DiscoveryServicePrivateCocoa::serverAcceptCallBack, &socketCtxt));
+    m_ipv6socket = adoptCF(CFSocketCreate(kCFAllocatorDefault, AF_INET6, SOCK_STREAM, IPPROTO_TCP, kCFSocketAcceptCallBack, &DiscoveryServicePrivateCocoa::serverAcceptCallBack, &socketCtxt));
+
+    if (!m_ipv4socket || !m_ipv6socket) {
+        LOG(WebDial, "DiscoveryServicePrivateCocoa::publishService() Socket creation failed");
+        return;
+    }
+
+    static const int yes = 1;
+    setsockopt(CFSocketGetNative(m_ipv4socket.get()), SOL_SOCKET, SO_REUSEADDR, (const void *) &yes, sizeof(yes));
+    setsockopt(CFSocketGetNative(m_ipv6socket.get()), SOL_SOCKET, SO_REUSEADDR, (const void *) &yes, sizeof(yes));
+
+    int flags;
+    flags = fcntl(CFSocketGetNative(m_ipv4socket.get()),F_GETFL);
+    if (-1 == fcntl(CFSocketGetNative(m_ipv4socket.get()), F_SETFL, flags | O_NONBLOCK)) {
+        LOG(WebDial, "DiscoveryServicePrivateCocoa::publishService() Couldn't set socket4 to non-blocking");
+        return;
+    }
+
+    flags = fcntl(CFSocketGetNative(m_ipv6socket.get()),F_GETFL);
+    if (-1 == fcntl(CFSocketGetNative(m_ipv6socket.get()), F_SETFL, flags | O_NONBLOCK)) {
+        LOG(WebDial, "DiscoveryServicePrivateCocoa::publishService() Couldn't set socket4 to non-blocking");
+        return;
+    }
+
+    // Set up the IPv4 listening socket; port is 0, which will cause the kernel to choose a port for us.
+    sockaddr_in addr4;
+    memset(&addr4, 0, sizeof(addr4));
+    addr4.sin_len = sizeof(addr4);
+    addr4.sin_family = AF_INET;
+    addr4.sin_port = htons(0);
+    addr4.sin_addr.s_addr = htonl(INADDR_ANY);
+    
+    NSData* data = [NSData dataWithBytes:&addr4 length:sizeof(addr4)];
+    if (kCFSocketSuccess != CFSocketSetAddress(m_ipv4socket.get(), static_cast<CFDataRef>(data))) {
+        LOG(WebDial, "DiscoveryServicePrivateCocoa::publishService() Address4 failed");
+        return;
+    }
+
+    // Now that the IPv4 binding was successful, we get the port number
+    // -- we will need it for the IPv6 listening socket and for the NSNetService.
+    RetainPtr<NSData> addr = adoptNS(static_cast<NSData*>(CFSocketCopyAddress(m_ipv4socket.get())));
+    assert([addr length] == sizeof(struct sockaddr_in));
+    const auto port = ntohs(((const sockaddr_in*)[addr bytes])->sin_port);
+
+    // Set up the IPv6 listening socket.
+    sockaddr_in6 addr6;
+    memset(&addr6, 0, sizeof(addr6));
+    addr6.sin6_len = sizeof(addr6);
+    addr6.sin6_family = AF_INET6;
+    addr6.sin6_port = htons(port);
+    memcpy(&(addr6.sin6_addr), &in6addr_any, sizeof(addr6.sin6_addr));
+    data = [NSData dataWithBytes:&addr6 length:sizeof(addr6)];
+    if (kCFSocketSuccess != CFSocketSetAddress(m_ipv6socket.get(), static_cast<CFDataRef>(data))) {
+        LOG(WebDial, "DiscoveryServicePrivateCocoa::publishService() Address6 failed");
+        return;
+    }
+
+    // Set up the run loop sources for the sockets.
+    m_source4 = adoptCF(CFSocketCreateRunLoopSource(kCFAllocatorDefault, m_ipv4socket.get(), 0));
+    CFRunLoopAddSource(CFRunLoopGetCurrent(), m_source4.get(), kCFRunLoopCommonModes);
+
+    m_source6 = adoptCF(CFSocketCreateRunLoopSource(kCFAllocatorDefault, m_ipv6socket.get(), 0));
+    CFRunLoopAddSource(CFRunLoopGetCurrent(), m_source6.get(), kCFRunLoopCommonModes);
+
+    ASSERT(port > 0);
+
+    m_service = adoptNS([[NSNetService alloc] initWithDomain:@"" type:serviceTypeName name:@"" port:port]);
+    if (m_service) {
+         m_delegate = adoptNS([[WKNetServiceDelegate alloc] initWithDiscoveryService:m_client]);
+        [m_service setDelegate:m_delegate.get()];
+        [m_service publish];
+    } else {
+        LOG(WebDial, "DiscoveryServicePrivateCocoa::publishService() Error creating service");
+    }
+}
+
+void DiscoveryServicePrivateCocoa::stopService()
+{
+    LOG(WebDial, "DiscoveryServicePrivateCocoa::stopService()");
+    [m_service stop];
+
+    if (m_source6) {
+        CFRunLoopRemoveSource(CFRunLoopGetCurrent(), m_source6.get(), kCFRunLoopCommonModes);
+        m_source6.clear();
+    }
+    if (m_source4) {
+        CFRunLoopRemoveSource(CFRunLoopGetCurrent(), m_source4.get(), kCFRunLoopCommonModes);
+        m_source4.clear();
+    }
+    if (m_ipv6socket) {
+        CFSocketInvalidate(m_ipv6socket.get());
+        m_ipv6socket.clear();
+    }
+    if (m_ipv4socket) {
+        CFSocketInvalidate(m_ipv4socket.get());
+        m_ipv4socket.clear();
+    }
+}
+
+} // namespace WebKit
+
+#endif // ENABLE(WEB_DIAL)
diff --git a/Source/WebKit2/Shared/DiscoveryService/DiscoveryService.cpp b/Source/WebKit2/Shared/DiscoveryService/DiscoveryService.cpp
new file mode 100644
index 00000000000..0bf06ce969b
--- /dev/null
+++ b/Source/WebKit2/Shared/DiscoveryService/DiscoveryService.cpp
@@ -0,0 +1,132 @@
+/*
+ * Copyright (C) 2016 Michal Debski <mi.zd.debski@gmail.com>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1.  Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ * 2.  Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ * 3.  Neither the name of Apple Inc. ("Apple") nor the names of
+ *     its contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include "config.h"
+
+#if ENABLE(WEB_DIAL)
+#include "DiscoveryService.h"
+
+#include "DiscoveryServiceClient.h"
+#include "Logging.h"
+#include <WebCore/ResourceRequest.h>
+#include <WebCore/URL.h>
+#include <WebCore/WebDialMessages.h>
+
+namespace WebKit {
+
+DiscoveryService::DiscoveryService()
+    : m_client(nullptr)
+{
+    m_private = DiscoveryServicePrivate::create(this);
+}
+
+DiscoveryService::~DiscoveryService()
+{
+    stop();
+}
+
+void DiscoveryService::start()
+{
+    LOG(WebDial, "DiscoveryService::start()");
+    m_private->publishService("_webdial._tcp");
+}
+
+void DiscoveryService::stop()
+{
+    LOG(WebDial, "DiscoveryService::stop()");
+    m_private->stopService();
+}
+
+void DiscoveryService::servicePublishedSuccesfully()
+{
+    LOG(WebDial, "DiscoveryService::servicePublishedSuccesfully()");
+    ASSERT(m_client);
+}
+
+void DiscoveryService::serviceStopped()
+{
+    LOG(WebDial, "DiscoveryService::serviceStopped()");
+    ASSERT(m_client);
+}
+
+void DiscoveryService::channelEstablished(Ref<WebCore::DiscoveryServiceChannel>&& channel)
+{
+    channel->setMessageCallback(std::bind(&DiscoveryService::messageReceived, this, channel.ptr(), std::placeholders::_1, std::placeholders::_2));
+    channel->setErrorCallback(std::bind(&DiscoveryService::channelClosed, this, channel.ptr(), std::placeholders::_1));
+    channel->setClosedCallback(std::bind(&DiscoveryService::channelClosed, this, channel.ptr(), "closed"));
+    channel->open();
+    m_channels.add(WTFMove(channel));
+}
+
+void DiscoveryService::messageReceived(WebCore::DiscoveryServiceChannel* channel, const uint8_t* data, size_t size)
+{
+    LOG(WebDial, "DiscoveryService::messageReceived() Got message of size %zu", size);
+    Ref<WebCore::DiscoveryServiceChannel> channelRef = *m_channels.take(channel);
+
+    RefPtr<WebCore::WebDialMessage> message = WebCore::WebDialMessage::deserialize(data, size);
+    if (!message) {
+        LOG(WebDial, "DiscoveryService::messageReceived() Could not deserialize message");
+        return;
+    }
+    LOG(WebDial, "DiscoveryService::messageReceived() message of type %s", toString(message->type()));
+    switch (message->type()) {
+        case WebCore::WebDialMessageType::Request:
+        {
+            WebCore::WebDialMessageRequest& request = static_cast<WebCore::WebDialMessageRequest&>(*message);
+            LOG(WebDial, "DiscoveryService::messageReceived() url:%s", request.url().ascii().data());
+            ASSERT(m_client);
+
+            RefPtr<WebPageProxy> webPageProxy = m_client->launchNewPage(this);
+            if (webPageProxy) {
+                Ref<DiscoveryServiceInvoker> invoker = DiscoveryServiceInvoker::create(*webPageProxy, channelRef.copyRef());
+                webPageProxy->setDiscoveryServiceInvoker(WTFMove(invoker));
+                webPageProxy->loadRequest(WebCore::ResourceRequest(WebCore::URL(WebCore::URL(), request.url())));
+
+                const auto launchedMessage = WebCore::WebDialMessageLaunched::create()->serialize();
+                channelRef->send(launchedMessage.data(), launchedMessage.size());
+            } else {
+                const auto disconnectMessage = WebCore::WebDialMessageDisconnect::create("Permission denied")->serialize();
+                channelRef->send(disconnectMessage.data(), disconnectMessage.size());
+                channelRef->close();
+            }
+            break;
+        }
+        default:
+            LOG(WebDial, "DiscoveryService::messageReceived() First message must be a launch request");
+    }
+}
+
+void DiscoveryService::channelClosed(WebCore::DiscoveryServiceChannel* channel, const String& reason)
+{
+    LOG(WebDial, "DiscoveryService::messageReceived() Channel closed because: %s", reason.ascii().data());
+    m_channels.remove(channel);
+}
+
+} // namespace WebKit
+
+#endif // ENABLE(WEB_DIAL)
diff --git a/Source/WebKit2/Shared/DiscoveryService/DiscoveryService.h b/Source/WebKit2/Shared/DiscoveryService/DiscoveryService.h
new file mode 100644
index 00000000000..70758b8c8fd
--- /dev/null
+++ b/Source/WebKit2/Shared/DiscoveryService/DiscoveryService.h
@@ -0,0 +1,75 @@
+/*
+ * Copyright (C) 2016 Michal Debski <mi.zd.debski@gmail.com>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1.  Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ * 2.  Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ * 3.  Neither the name of Apple Inc. ("Apple") nor the names of
+ *     its contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef DiscoveryService_h
+#define DiscoveryService_h
+
+#if ENABLE(WEB_DIAL)
+
+#include "APIObject.h"
+#include "DiscoveryServicePrivate.h"
+#include <memory>
+#include <wtf/Noncopyable.h>
+#include <wtf/text/WTFString.h>
+#include <wtf/HashSet.h>
+
+namespace WebKit {
+
+class DiscoveryServiceClient;
+
+class DiscoveryService final : public API::ObjectImpl<API::Object::Type::DiscoveryService>, public DiscoveryServicePrivateClient {
+    WTF_MAKE_NONCOPYABLE(DiscoveryService);
+public:
+    DiscoveryService();
+    ~DiscoveryService();
+
+    void setClient(DiscoveryServiceClient* client) { m_client = client; }
+    DiscoveryServiceClient* client() const { return m_client; }
+
+    void start();
+    void stop();
+
+    // DiscoveryServicePrivateClient interface
+    void servicePublishedSuccesfully() override;
+    void serviceStopped() override;
+    void channelEstablished(Ref<WebCore::DiscoveryServiceChannel>&&) override;
+    
+private:
+    // DiscoveryServiceChannel interface
+    void messageReceived(WebCore::DiscoveryServiceChannel*, const uint8_t* data, size_t size);
+    void channelClosed(WebCore::DiscoveryServiceChannel*, const String&);
+
+    DiscoveryServiceClient* m_client;
+    std::unique_ptr<DiscoveryServicePrivate> m_private;
+    HashSet<RefPtr<WebCore::DiscoveryServiceChannel>> m_channels;
+};
+    
+} // namespace WebKit
+
+#endif // ENABLE(WEB_DIAL)
+#endif // DiscoveryService_h
diff --git a/Source/WebKit2/Shared/DiscoveryService/DiscoveryServiceChannelProxy.cpp b/Source/WebKit2/Shared/DiscoveryService/DiscoveryServiceChannelProxy.cpp
new file mode 100644
index 00000000000..74bfc6230e6
--- /dev/null
+++ b/Source/WebKit2/Shared/DiscoveryService/DiscoveryServiceChannelProxy.cpp
@@ -0,0 +1,105 @@
+/*
+ * Copyright (C) 2016 Michal Debski <mi.zd.debski@gmail.com>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1.  Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ * 2.  Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ * 3.  Neither the name of Apple Inc. ("Apple") nor the names of
+ *     its contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include "config.h"
+
+#if ENABLE(WEB_DIAL)
+#include "DiscoveryServiceChannelProxy.h"
+
+#include "Logging.h"
+#include "WebPage.h"
+#include "WebPageProxyMessages.h"
+
+namespace WebKit {
+
+Ref<DiscoveryServiceChannelProxy> DiscoveryServiceChannelProxy::create(WebPage& page)
+{
+    return adoptRef(*new DiscoveryServiceChannelProxy(page));
+}
+
+DiscoveryServiceChannelProxy::DiscoveryServiceChannelProxy(WebPage& page)
+    : m_page(page)
+{
+}
+
+void DiscoveryServiceChannelProxy::open()
+{
+    LOG(WebDial, "DiscoveryServiceChannelProxy::open");
+    m_page.send(Messages::WebPageProxy::DidOpenDialChannel());
+    // TODO implement message caching
+}
+
+void DiscoveryServiceChannelProxy::reopen()
+{
+    m_page.send(Messages::WebPageProxy::ReopenDialChannel());
+}
+
+size_t DiscoveryServiceChannelProxy::send(const uint8_t* data, size_t size)
+{
+    // TODO: handle send async so we can detecta an error here
+    Vector<uint8_t> buffer;
+    buffer.append(data, size);
+    m_page.send(Messages::WebPageProxy::SendDialMessage(buffer));
+    return size;
+}
+
+void DiscoveryServiceChannelProxy::close()
+{
+    m_page.send(Messages::WebPageProxy::CloseDialChannel());
+}
+
+void DiscoveryServiceChannelProxy::messageReceived(const Vector<uint8_t>& data)
+{
+    if (m_messageCallback) {
+        m_messageCallback(data.data(), data.size());
+        return;
+    }
+    LOG(WebDial, "DiscoveryServiceChannelProxy::messageReceived RemoteApplication was not yet connected");
+}
+
+void DiscoveryServiceChannelProxy::errorReceived(const String& reason)
+{
+    if (m_errorCallback) {
+        m_errorCallback(reason);
+        return;
+    }
+    LOG(WebDial, "DiscoveryServiceChannelProxy::messageReceived RemoteApplication was not yet connected");
+}
+
+void DiscoveryServiceChannelProxy::closedReceived()
+{
+    if (m_closedCallback) {
+        m_closedCallback();
+        return;
+    }
+    LOG(WebDial, "DiscoveryServiceChannelProxy::messageReceived RemoteApplication was not yet connected");
+}
+
+} // namespace WebKit
+
+#endif // ENABLE(WEB_DIAL)
diff --git a/Source/WebKit2/Shared/DiscoveryService/DiscoveryServiceChannelProxy.h b/Source/WebKit2/Shared/DiscoveryService/DiscoveryServiceChannelProxy.h
new file mode 100644
index 00000000000..4692829634e
--- /dev/null
+++ b/Source/WebKit2/Shared/DiscoveryService/DiscoveryServiceChannelProxy.h
@@ -0,0 +1,62 @@
+/*
+ * Copyright (C) 2016 Michal Debski <mi.zd.debski@gmail.com>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1.  Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ * 2.  Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ * 3.  Neither the name of Apple Inc. ("Apple") nor the names of
+ *     its contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef DiscoveryServiceChannelProxy_h
+#define DiscoveryServiceChannelProxy_h
+
+#if ENABLE(WEB_DIAL)
+#include <WebCore/DiscoveryServiceChannel.h>
+#include <wtf/RefCounted.h>
+
+namespace WebKit {
+
+class WebPage;
+
+class DiscoveryServiceChannelProxy : public WebCore::DiscoveryServiceChannel {
+public:
+    static Ref<DiscoveryServiceChannelProxy> create(WebPage&);
+
+    void open() override;
+    void reopen() override;
+    size_t send(const uint8_t* data, size_t size) override;
+    void close() override;
+
+    void messageReceived(const Vector<uint8_t>&);
+    void errorReceived(const String& reason);
+    void closedReceived();
+
+private:
+    DiscoveryServiceChannelProxy(WebPage&);
+
+    WebPage& m_page;
+};
+
+} // namespace WebKit
+
+#endif // ENABLE(WEB_DIAL)
+#endif // DiscoveryServiceChannelProxy_h
diff --git a/Source/WebKit2/Shared/DiscoveryService/DiscoveryServiceClient.h b/Source/WebKit2/Shared/DiscoveryService/DiscoveryServiceClient.h
new file mode 100644
index 00000000000..f41463df74d
--- /dev/null
+++ b/Source/WebKit2/Shared/DiscoveryService/DiscoveryServiceClient.h
@@ -0,0 +1,59 @@
+/*
+ * Copyright (C) 2016 Michal Debski <mi.zd.debski@gmail.com>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1.  Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ * 2.  Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ * 3.  Neither the name of Apple Inc. ("Apple") nor the names of
+ *     its contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef DiscoveryServiceClient_h
+#define DiscoveryServiceClient_h
+
+#if ENABLE(WEB_DIAL)
+
+#include "WebPageProxy.h"
+
+namespace WebCore {
+//class ResourceRequest;
+//struct SecurityOriginData;
+//class WindowFeatures;
+}
+
+namespace WebKit {
+
+class DiscoveryService;
+struct NavigationActionData;
+
+class DiscoveryServiceClient {
+public:
+    virtual ~DiscoveryServiceClient() = default;
+
+    virtual RefPtr<WebPageProxy> launchNewPage(DiscoveryService*) = 0;
+//    virtual PassRefPtr<WebPageProxy> launchNewPage(DiscoveryService*, const WebCore::SecurityOriginData&, const WebCore::ResourceRequest&, const WebCore::WindowFeatures&, const NavigationActionData&) = 0;
+
+};
+
+} // namespace WebKit
+
+#endif // ENABLE(WEB_DIAL)
+#endif // DiscoveryServiceClient_h
diff --git a/Source/WebKit2/Shared/DiscoveryService/DiscoveryServiceInvoker.cpp b/Source/WebKit2/Shared/DiscoveryService/DiscoveryServiceInvoker.cpp
new file mode 100644
index 00000000000..3fc4bb6a869
--- /dev/null
+++ b/Source/WebKit2/Shared/DiscoveryService/DiscoveryServiceInvoker.cpp
@@ -0,0 +1,96 @@
+/*
+ * Copyright (C) 2016 Michal Debski <mi.zd.debski@gmail.com>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1.  Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ * 2.  Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ * 3.  Neither the name of Apple Inc. ("Apple") nor the names of
+ *     its contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include "config.h"
+
+#if ENABLE(WEB_DIAL)
+#include "DiscoveryServiceInvoker.h"
+
+#include "WebPageMessages.h"
+#include "WebPageProxy.h"
+#include <WebCore/NotImplemented.h>
+#include <wtf/Vector.h>
+
+namespace WebKit {
+
+Ref<DiscoveryServiceInvoker> DiscoveryServiceInvoker::create(WebPageProxy& pageProxy, Ref<WebCore::DiscoveryServiceChannel>&& channel)
+{
+    return adoptRef(*new DiscoveryServiceInvoker(pageProxy, WTFMove(channel)));
+}
+
+DiscoveryServiceInvoker::DiscoveryServiceInvoker(WebPageProxy& pageProxy, Ref<WebCore::DiscoveryServiceChannel>&& channel)
+    : m_pageProxy(pageProxy)
+    , m_channel(WTFMove(channel))
+{
+    m_channel->setMessageCallback(std::bind(&DiscoveryServiceInvoker::messageReceived, this, std::placeholders::_1, std::placeholders::_2));
+    m_channel->setErrorCallback(std::bind(&DiscoveryServiceInvoker::channelError, this, std::placeholders::_1));
+    m_channel->setClosedCallback(std::bind(&DiscoveryServiceInvoker::channelClosed, this));
+
+    m_pageProxy.send(Messages::WebPage::PrepareDialChannelProxy());
+}
+
+void DiscoveryServiceInvoker::didOpenDialChannel()
+{
+    // TODO: this should be done by RemoteApp
+}
+
+void DiscoveryServiceInvoker::reopenDialChannel()
+{
+    notImplemented();
+}
+
+void DiscoveryServiceInvoker::sendDialMessage(const Vector<uint8_t>& message)
+{
+    m_channel->send(message.data(), message.size());
+}
+
+void DiscoveryServiceInvoker::closeDialChannel()
+{
+    m_channel->close();
+}
+
+void DiscoveryServiceInvoker::messageReceived(const uint8_t* data, size_t size)
+{
+    Vector<uint8_t> buffer;
+    buffer.append(data, size);
+    m_pageProxy.send(Messages::WebPage::DidReceiveDialMessage(buffer));
+}
+
+void DiscoveryServiceInvoker::channelError(const String& reason)
+{
+    m_pageProxy.send(Messages::WebPage::DidErrorDialChannel(reason));
+}
+
+void DiscoveryServiceInvoker::channelClosed()
+{
+    m_pageProxy.send(Messages::WebPage::DidCloseDialChannel());
+}
+
+} // namespace WebKit
+
+#endif // ENABLE(WEB_DIAL)
diff --git a/Source/WebKit2/Shared/DiscoveryService/DiscoveryServiceInvoker.h b/Source/WebKit2/Shared/DiscoveryService/DiscoveryServiceInvoker.h
new file mode 100644
index 00000000000..de961ed1e8b
--- /dev/null
+++ b/Source/WebKit2/Shared/DiscoveryService/DiscoveryServiceInvoker.h
@@ -0,0 +1,64 @@
+/*
+ * Copyright (C) 2016 Michal Debski <mi.zd.debski@gmail.com>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1.  Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ * 2.  Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ * 3.  Neither the name of Apple Inc. ("Apple") nor the names of
+ *     its contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef DiscoveryServiceInvoker_h
+#define DiscoveryServiceInvoker_h
+
+#if ENABLE(WEB_DIAL)
+
+#include <WebCore/DiscoveryServiceChannel.h>
+#include <wtf/RefCounted.h>
+
+namespace WebKit {
+
+class WebPageProxy;
+
+class DiscoveryServiceInvoker : public RefCounted<DiscoveryServiceInvoker> {
+public:
+    static Ref<DiscoveryServiceInvoker> create(WebPageProxy&, Ref<WebCore::DiscoveryServiceChannel>&&);
+
+    void didOpenDialChannel();
+    void reopenDialChannel();
+    void sendDialMessage(const Vector<uint8_t>&);
+    void closeDialChannel();
+
+private:
+    DiscoveryServiceInvoker(WebPageProxy&, Ref<WebCore::DiscoveryServiceChannel>&&);
+
+    void messageReceived(const uint8_t* data, size_t size);
+    void channelError(const String& reason);
+    void channelClosed();
+
+    WebPageProxy& m_pageProxy;
+    Ref<WebCore::DiscoveryServiceChannel> m_channel;
+};
+
+} // namespace WebKit
+
+#endif // ENABLE(WEB_DIAL)
+#endif // DiscoveryServiceInvoker_h
diff --git a/Source/WebKit2/Shared/DiscoveryService/DiscoveryServicePrivate.h b/Source/WebKit2/Shared/DiscoveryService/DiscoveryServicePrivate.h
new file mode 100644
index 00000000000..a98ba2b6046
--- /dev/null
+++ b/Source/WebKit2/Shared/DiscoveryService/DiscoveryServicePrivate.h
@@ -0,0 +1,61 @@
+/*
+ * Copyright (C) 2016 Michal Debski <mi.zd.debski@gmail.com>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1.  Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ * 2.  Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ * 3.  Neither the name of Apple Inc. ("Apple") nor the names of
+ *     its contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef DiscoveryServicePrivate_h
+#define DiscoveryServicePrivate_h
+
+#if ENABLE(WEB_DIAL)
+
+#include <memory>
+#include <WebCore/DiscoveryServiceChannel.h>
+#include <wtf/text/WTFString.h>
+#include <wtf/Vector.h>
+
+namespace WebKit {
+
+class DiscoveryServicePrivateClient {
+public:
+    virtual ~DiscoveryServicePrivateClient() = default;
+    virtual void servicePublishedSuccesfully() = 0;
+    virtual void serviceStopped() = 0;
+    virtual void channelEstablished(Ref<WebCore::DiscoveryServiceChannel>&&) = 0;
+};
+
+class DiscoveryServicePrivate {
+public:
+    static std::unique_ptr<DiscoveryServicePrivate> create(DiscoveryServicePrivateClient*);
+
+    virtual ~DiscoveryServicePrivate() = default;
+    virtual void publishService(const String& serviceTypeName) = 0;
+    virtual void stopService() = 0;
+};
+
+} // namespace WebKit
+
+#endif // ENABLE(WEB_DIAL)
+#endif // DiscoveryServicePrivate_h
diff --git a/Source/WebKit2/UIProcess/API/APIUIClient.h b/Source/WebKit2/UIProcess/API/APIUIClient.h
index ccb95dc5b6c..4e4b7eb9dad 100644
--- a/Source/WebKit2/UIProcess/API/APIUIClient.h
+++ b/Source/WebKit2/UIProcess/API/APIUIClient.h
@@ -133,6 +133,7 @@ public:
     virtual bool decidePolicyForUserMediaPermissionRequest(WebKit::WebPageProxy&, WebKit::WebFrameProxy&, SecurityOrigin&, SecurityOrigin&, WebKit::UserMediaPermissionRequestProxy&) { return false; }
     virtual bool checkUserMediaPermissionForOrigin(WebKit::WebPageProxy&, WebKit::WebFrameProxy&, SecurityOrigin&, SecurityOrigin&, WebKit::UserMediaPermissionCheckProxy&) { return false; }
     virtual bool decidePolicyForNotificationPermissionRequest(WebKit::WebPageProxy*, SecurityOrigin*, WebKit::NotificationPermissionRequest*) { return false; }
+    virtual bool decidePolicyForLocalNetworkDiscoveryPermissionRequest(WebKit::WebPageProxy&, WebKit::WebFrameProxy&, SecurityOrigin&, WebKit::LocalNetworkDiscoveryPermissionRequestProxy&) { return false; }
 
     // Printing.
     virtual float headerHeight(WebKit::WebPageProxy*, WebKit::WebFrameProxy*) { return 0; }
diff --git a/Source/WebKit2/UIProcess/API/Cocoa/WKDiscoveryDelegate.h b/Source/WebKit2/UIProcess/API/Cocoa/WKDiscoveryDelegate.h
new file mode 100644
index 00000000000..aa7e5e01968
--- /dev/null
+++ b/Source/WebKit2/UIProcess/API/Cocoa/WKDiscoveryDelegate.h
@@ -0,0 +1,51 @@
+/*
+ * Copyright (C) 2016 Michal Debski <mi.zd.debski@gmail.com>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1.  Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ * 2.  Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ * 3.  Neither the name of Apple Inc. ("Apple") nor the names of
+ *     its contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#import <WebKit/WKFoundation.h>
+
+#if WK_API_ENABLED
+
+#import <Foundation/Foundation.h>
+
+NS_ASSUME_NONNULL_BEGIN
+
+@class WKDiscoveryService;
+@class WKNavigationAction;
+@class WKWebView;
+
+@protocol WKDiscoveryDelegate <NSObject>
+
+@optional
+
+- (nullable WKWebView *)discoveryService:(WKDiscoveryService *)service launchWebViewforNavigationAction:(nullable WKNavigationAction *)navigationAction;
+
+@end
+
+NS_ASSUME_NONNULL_END
+
+#endif // WK_API_ENABLED
diff --git a/Source/WebKit2/UIProcess/API/Cocoa/WKDiscoveryService.h b/Source/WebKit2/UIProcess/API/Cocoa/WKDiscoveryService.h
new file mode 100644
index 00000000000..02474ca9310
--- /dev/null
+++ b/Source/WebKit2/UIProcess/API/Cocoa/WKDiscoveryService.h
@@ -0,0 +1,51 @@
+/*
+ * Copyright (C) 2016 Michal Debski <mi.zd.debski@gmail.com>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1.  Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ * 2.  Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ * 3.  Neither the name of Apple Inc. ("Apple") nor the names of
+ *     its contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#import <WebKit/WKFoundation.h>
+
+#if WK_API_ENABLED
+
+#import <Foundation/Foundation.h>
+
+NS_ASSUME_NONNULL_BEGIN
+
+@protocol WKDiscoveryDelegate;
+
+WK_CLASS_AVAILABLE(macosx(10.10), ios(8.0))
+@interface WKDiscoveryService : NSObject
+
+@property (nullable, nonatomic, weak) id <WKDiscoveryDelegate> discoveryDelegate;
+
+- (void)start;
+- (void)stop;
+
+@end
+
+NS_ASSUME_NONNULL_END
+
+#endif // WK_API_ENABLED
diff --git a/Source/WebKit2/UIProcess/API/Cocoa/WKDiscoveryService.mm b/Source/WebKit2/UIProcess/API/Cocoa/WKDiscoveryService.mm
new file mode 100644
index 00000000000..dea23b754e9
--- /dev/null
+++ b/Source/WebKit2/UIProcess/API/Cocoa/WKDiscoveryService.mm
@@ -0,0 +1,90 @@
+/*
+ * Copyright (C) 2016 Michal Debski <mi.zd.debski@gmail.com>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1.  Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ * 2.  Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ * 3.  Neither the name of Apple Inc. ("Apple") nor the names of
+ *     its contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#import "config.h"
+#import "WKDiscoveryServiceInternal.h"
+
+#if WK_API_ENABLED
+
+#import "DiscoveryDelegate.h"
+
+#include "WeakObjCPtr.h"
+#include <memory>
+
+@implementation WKDiscoveryService {
+    std::unique_ptr<WebKit::DiscoveryDelegate> _discoveryDelegate;
+}
+
+- (id)init
+{
+    if ([super init]) {
+        API::Object::constructInWrapper<WebKit::DiscoveryService>(self);
+        _discoveryDelegate = std::make_unique<WebKit::DiscoveryDelegate>();
+        _service->setClient(_discoveryDelegate.get());
+        return self;
+    }
+    return nil;
+}
+
+- (void)dealloc
+{
+    _service->~DiscoveryService();
+
+    [super dealloc];
+}
+
+- (void)start
+{
+    _service->start();
+}
+
+- (void)stop
+{
+    _service->stop();
+}
+
+- (void)setDiscoveryDelegate:(id<WKDiscoveryDelegate>)discoveryDelegate
+{
+    _discoveryDelegate->setDelegate(discoveryDelegate);
+}
+
+- (id<WKDiscoveryDelegate>)discoveryDelegate
+{
+    return _discoveryDelegate->delegate().autorelease();
+}
+
+#pragma mark WKObject protocol implementation
+
+- (API::Object&)_apiObject
+{
+    return *_service;
+}
+
+@end
+
+#endif // WK_API_ENABLED
diff --git a/Source/WebKit2/UIProcess/API/Cocoa/WKDiscoveryServiceInternal.h b/Source/WebKit2/UIProcess/API/Cocoa/WKDiscoveryServiceInternal.h
new file mode 100644
index 00000000000..e3628e6783f
--- /dev/null
+++ b/Source/WebKit2/UIProcess/API/Cocoa/WKDiscoveryServiceInternal.h
@@ -0,0 +1,53 @@
+/*
+ * Copyright (C) 2016 Michal Debski <mi.zd.debski@gmail.com>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1.  Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ * 2.  Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ * 3.  Neither the name of Apple Inc. ("Apple") nor the names of
+ *     its contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#import "WKDiscoveryServicePrivate.h"
+
+#if WK_API_ENABLED
+
+#import "WKObject.h"
+#import "DiscoveryService.h"
+
+namespace WebKit {
+
+inline WKDiscoveryService *wrapper(DiscoveryService& service)
+{
+    ASSERT([service.wrapper() isKindOfClass:[WKDiscoveryService class]]);
+    return (WKDiscoveryService *)service.wrapper();
+}
+
+} // namespace WebKit
+
+@interface WKDiscoveryService () <WKObject> {
+@package
+API::ObjectStorage<WebKit::DiscoveryService> _service;
+}
+
+@end
+
+#endif // WK_API_ENABLED
diff --git a/Source/WebKit2/UIProcess/API/Cocoa/WKDiscoveryServicePrivate.h b/Source/WebKit2/UIProcess/API/Cocoa/WKDiscoveryServicePrivate.h
new file mode 100644
index 00000000000..3e7754f7fd9
--- /dev/null
+++ b/Source/WebKit2/UIProcess/API/Cocoa/WKDiscoveryServicePrivate.h
@@ -0,0 +1,41 @@
+/*
+ * Copyright (C) 2016 Michal Debski <mi.zd.debski@gmail.com>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1.  Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ * 2.  Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ * 3.  Neither the name of Apple Inc. ("Apple") nor the names of
+ *     its contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#import <WebKit/WKDiscoveryService.h>
+
+#if WK_API_ENABLED
+
+//@class _WKFrameHandle;
+
+@interface WKDiscoveryService (WKPrivate)
+
+//@property (nonatomic, readonly, strong) _WKFrameHandle *_handle WK_AVAILABLE(WK_MAC_TBA, WK_IOS_TBA);
+
+@end
+
+#endif // WK_API_ENABLED
diff --git a/Source/WebKit2/UIProcess/Cocoa/DiscoveryDelegate.h b/Source/WebKit2/UIProcess/Cocoa/DiscoveryDelegate.h
new file mode 100644
index 00000000000..ac5a261b4a7
--- /dev/null
+++ b/Source/WebKit2/UIProcess/Cocoa/DiscoveryDelegate.h
@@ -0,0 +1,60 @@
+/*
+ * Copyright (C) 2016 Michal Debski <mi.zd.debski@gmail.com>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1.  Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ * 2.  Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ * 3.  Neither the name of Apple Inc. ("Apple") nor the names of
+ *     its contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef DiscoveryDelegate_h
+#define DiscoveryDelegate_h
+
+#import "WKFoundation.h"
+
+#if WK_API_ENABLED
+
+#import "DiscoveryServiceClient.h"
+#import "WeakObjCPtr.h"
+#import "WKDiscoveryDelegate.h"
+#import <wtf/RetainPtr.h>
+
+namespace WebKit {
+
+class DiscoveryService;
+struct NavigationActionData;
+
+class DiscoveryDelegate : public DiscoveryServiceClient {
+public:
+    void setDelegate(id <WKDiscoveryDelegate>);
+    RetainPtr<id <WKDiscoveryDelegate>> delegate() const;
+
+    RefPtr<WebPageProxy> launchNewPage(DiscoveryService*) override;
+
+private:
+    WeakObjCPtr<id <WKDiscoveryDelegate>> m_delegate;
+};
+
+} // namespace WebKit
+
+#endif // WK_API_ENABLED
+#endif // DiscoveryDelegate_h
diff --git a/Source/WebKit2/UIProcess/Cocoa/DiscoveryDelegate.mm b/Source/WebKit2/UIProcess/Cocoa/DiscoveryDelegate.mm
new file mode 100644
index 00000000000..fc010c3c586
--- /dev/null
+++ b/Source/WebKit2/UIProcess/Cocoa/DiscoveryDelegate.mm
@@ -0,0 +1,65 @@
+/*
+ * Copyright (C) 2016 Michal Debski <mi.zd.debski@gmail.com>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1.  Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ * 2.  Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ * 3.  Neither the name of Apple Inc. ("Apple") nor the names of
+ *     its contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#import "config.h"
+#import "DiscoveryDelegate.h"
+
+#if WK_API_ENABLED
+
+#import "DiscoveryService.h"
+#import "NavigationActionData.h"
+#import "WKDiscoveryServiceInternal.h"
+#import "WKWebViewInternal.h"
+
+namespace WebKit {
+
+void DiscoveryDelegate::setDelegate(id <WKDiscoveryDelegate> delegate)
+{
+    m_delegate = delegate;
+}
+
+RetainPtr<id <WKDiscoveryDelegate>> DiscoveryDelegate::delegate() const
+{
+    return m_delegate.get();
+}
+
+RefPtr<WebPageProxy> DiscoveryDelegate::launchNewPage(DiscoveryService* service)
+{
+    if (!m_delegate)
+        return nullptr;
+
+    RetainPtr<WKWebView> webView = [m_delegate.get() discoveryService:wrapper(*service) launchWebViewforNavigationAction:nil];
+    if (!webView)
+        return nullptr;
+
+    return webView->_page.get();
+}
+
+} // namespace WebKit
+
+#endif // WK_API_ENABLED
diff --git a/Source/WebKit2/UIProcess/Cocoa/UIDelegate.h b/Source/WebKit2/UIProcess/Cocoa/UIDelegate.h
index a4cb7decdf3..d23e5fd6cf9 100644
--- a/Source/WebKit2/UIProcess/Cocoa/UIDelegate.h
+++ b/Source/WebKit2/UIProcess/Cocoa/UIDelegate.h
@@ -121,6 +121,8 @@ private:
 
         void imageOrMediaDocumentSizeChanged(const WebCore::IntSize&) override;
 
+        bool decidePolicyForLocalNetworkDiscoveryPermissionRequest(WebPageProxy&, WebFrameProxy&, API::SecurityOrigin&, LocalNetworkDiscoveryPermissionRequestProxy&) override;
+
         UIDelegate& m_uiDelegate;
     };
 
diff --git a/Source/WebKit2/UIProcess/Cocoa/UIDelegate.mm b/Source/WebKit2/UIProcess/Cocoa/UIDelegate.mm
index b1385933b52..8ddcd609966 100644
--- a/Source/WebKit2/UIProcess/Cocoa/UIDelegate.mm
+++ b/Source/WebKit2/UIProcess/Cocoa/UIDelegate.mm
@@ -28,6 +28,8 @@
 
 #if WK_API_ENABLED
 
+#include "Logging.h"
+
 #import "APIFrameInfo.h"
 #import "CompletionHandlerCallChecker.h"
 #import "NavigationActionData.h"
@@ -759,6 +761,26 @@ void UIDelegate::UIClient::imageOrMediaDocumentSizeChanged(const WebCore::IntSiz
     [static_cast<id <WKUIDelegatePrivate>>(delegate) _webView:m_uiDelegate.m_webView imageOrMediaDocumentSizeChanged:newSize];
 }
 
+bool UIDelegate::UIClient::decidePolicyForLocalNetworkDiscoveryPermissionRequest(WebPageProxy&, WebFrameProxy&, API::SecurityOrigin&, LocalNetworkDiscoveryPermissionRequestProxy& request)
+{
+//    if (!m_uiDelegate.m_delegateMethods.webViewDecidePolicyForLocalNetworkDiscoveryPermissionRequest)
+//        return;
+//
+//    auto delegate = m_uiDelegate.m_delegate.get();
+//    if (!delegate)
+//        return;
+
+//    // FIXME: pass all things to the handler
+//    if ([static_cast<id <WKUIDelegatePrivate>>(delegate) _webView:m_uiDelegate.m_webView webViewDecidePolicyForLocalNetworkDiscoveryPermissionRequest]) {
+//        request.allow();
+//    } else {
+//        request.deny();
+//    }
+    LOG(WebDial, "UIDelegate::UIClient::decidePolicyForLocalNetworkDiscoveryPermissionRequest() granting permission");
+    request.allow();
+    return true;
+}
+
 } // namespace WebKit
 
 #endif // WK_API_ENABLED
diff --git a/Source/WebKit2/UIProcess/LocalNetworkDiscoveryPermissionRequestManagerProxy.cpp b/Source/WebKit2/UIProcess/LocalNetworkDiscoveryPermissionRequestManagerProxy.cpp
new file mode 100644
index 00000000000..e2159d8564c
--- /dev/null
+++ b/Source/WebKit2/UIProcess/LocalNetworkDiscoveryPermissionRequestManagerProxy.cpp
@@ -0,0 +1,79 @@
+/*
+ * Copyright (C) 2016 Michal Debski <mi.zd.debski@gmail.com>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1.  Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ * 2.  Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ * 3.  Neither the name of Apple Inc. ("Apple") nor the names of
+ *     its contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include "config.h"
+#include "LocalNetworkDiscoveryPermissionRequestManagerProxy.h"
+
+#include "Logging.h"
+#include "WebPageMessages.h"
+#include "WebPageProxy.h"
+#include "WebProcessProxy.h"
+
+namespace WebKit {
+
+LocalNetworkDiscoveryPermissionRequestManagerProxy::LocalNetworkDiscoveryPermissionRequestManagerProxy(WebPageProxy& page)
+    : m_page(page)
+{
+}
+
+void LocalNetworkDiscoveryPermissionRequestManagerProxy::invalidateRequests()
+{
+    for (auto& request : m_pendingRequests.values())
+        request->invalidate();
+
+    m_pendingRequests.clear();
+}
+
+Ref<LocalNetworkDiscoveryPermissionRequestProxy> LocalNetworkDiscoveryPermissionRequestManagerProxy::createRequest(uint64_t discoveryID)
+{
+    Ref<LocalNetworkDiscoveryPermissionRequestProxy> request = LocalNetworkDiscoveryPermissionRequestProxy::create(this, discoveryID);
+    m_pendingRequests.add(discoveryID, request.ptr());
+    return request;
+}
+
+void LocalNetworkDiscoveryPermissionRequestManagerProxy::didReceiveLocalNetworkDiscoveryPermissionDecision(uint64_t discoveryID, bool allowed)
+{
+    if (!m_page.isValid())
+        return;
+
+    auto it = m_pendingRequests.find(discoveryID);
+    if (it == m_pendingRequests.end())
+        return;
+
+    LOG(WebDial, "LocalNetworkDiscoveryPermissionRequestManagerProxy::didReceiveLocalNetworkDiscoveryPermissionDecision() id:%llu, allowed:%d", discoveryID, allowed);
+
+#if ENABLE(WEB_DIAL)
+    m_page.process().send(Messages::WebPage::DidReceiveLocalNetworkDiscoveryPermissionDecision(discoveryID, allowed), m_page.pageID());
+#else
+    UNUSED_PARAM(allowed);
+#endif
+    
+    m_pendingRequests.remove(it);
+}
+    
+} // namespace WebKit
diff --git a/Source/WebKit2/UIProcess/LocalNetworkDiscoveryPermissionRequestManagerProxy.h b/Source/WebKit2/UIProcess/LocalNetworkDiscoveryPermissionRequestManagerProxy.h
new file mode 100644
index 00000000000..39b9364ca3f
--- /dev/null
+++ b/Source/WebKit2/UIProcess/LocalNetworkDiscoveryPermissionRequestManagerProxy.h
@@ -0,0 +1,58 @@
+/*
+ * Copyright (C) 2016 Michal Debski <mi.zd.debski@gmail.com>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1.  Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ * 2.  Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ * 3.  Neither the name of Apple Inc. ("Apple") nor the names of
+ *     its contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef LocalNetworkDiscoveryPermissionRequestManagerProxy_h
+#define LocalNetworkDiscoveryPermissionRequestManagerProxy_h
+
+#include "LocalNetworkDiscoveryPermissionRequestProxy.h"
+#include <wtf/HashMap.h>
+
+namespace WebKit {
+
+class WebPageProxy;
+
+class LocalNetworkDiscoveryPermissionRequestManagerProxy {
+public:
+    explicit LocalNetworkDiscoveryPermissionRequestManagerProxy(WebPageProxy&);
+
+    void invalidateRequests();
+
+    // Create a request to be presented to the user.
+    Ref<LocalNetworkDiscoveryPermissionRequestProxy> createRequest(uint64_t discoveryID);
+
+    // Called by LocalNetworkDiscoveryPermissionRequestProxy when a decision is made by the user.
+    void didReceiveLocalNetworkDiscoveryPermissionDecision(uint64_t, bool allow);
+
+private:
+    HashMap<uint64_t, RefPtr<LocalNetworkDiscoveryPermissionRequestProxy>> m_pendingRequests;
+    WebPageProxy& m_page;
+};
+
+} // namespace WebCore
+
+#endif // LocalNetworkDiscoveryPermissionRequestManagerProxy_h
diff --git a/Source/WebKit2/UIProcess/LocalNetworkDiscoveryPermissionRequestProxy.cpp b/Source/WebKit2/UIProcess/LocalNetworkDiscoveryPermissionRequestProxy.cpp
new file mode 100644
index 00000000000..515298e32fe
--- /dev/null
+++ b/Source/WebKit2/UIProcess/LocalNetworkDiscoveryPermissionRequestProxy.cpp
@@ -0,0 +1,63 @@
+/*
+ * Copyright (C) 2016 Michal Debski <mi.zd.debski@gmail.com>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1.  Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ * 2.  Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ * 3.  Neither the name of Apple Inc. ("Apple") nor the names of
+ *     its contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include "config.h"
+#include "LocalNetworkDiscoveryPermissionRequestProxy.h"
+
+#include "LocalNetworkDiscoveryPermissionRequestManagerProxy.h"
+
+namespace WebKit {
+
+LocalNetworkDiscoveryPermissionRequestProxy::LocalNetworkDiscoveryPermissionRequestProxy(LocalNetworkDiscoveryPermissionRequestManagerProxy* manager, uint64_t discoveryID)
+: m_manager(manager)
+, m_discoveryID(discoveryID)
+{
+}
+
+void LocalNetworkDiscoveryPermissionRequestProxy::allow()
+{
+    if (m_manager) {
+        m_manager->didReceiveLocalNetworkDiscoveryPermissionDecision(m_discoveryID, true);
+        m_manager = nullptr;
+    }
+}
+
+void LocalNetworkDiscoveryPermissionRequestProxy::deny()
+{
+    if (m_manager) {
+        m_manager->didReceiveLocalNetworkDiscoveryPermissionDecision(m_discoveryID, false);
+        m_manager = nullptr;
+    }
+}
+
+void LocalNetworkDiscoveryPermissionRequestProxy::invalidate()
+{
+    m_manager = nullptr;
+}
+
+} // namespace WebKit
diff --git a/Source/WebKit2/UIProcess/LocalNetworkDiscoveryPermissionRequestProxy.h b/Source/WebKit2/UIProcess/LocalNetworkDiscoveryPermissionRequestProxy.h
new file mode 100644
index 00000000000..f2ebbda8016
--- /dev/null
+++ b/Source/WebKit2/UIProcess/LocalNetworkDiscoveryPermissionRequestProxy.h
@@ -0,0 +1,60 @@
+/*
+ * Copyright (C) 2016 Michal Debski <mi.zd.debski@gmail.com>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1.  Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ * 2.  Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ * 3.  Neither the name of Apple Inc. ("Apple") nor the names of
+ *     its contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef LocalNetworkDiscoveryPermissionRequestProxy_h
+#define LocalNetworkDiscoveryPermissionRequestProxy_h
+
+#include "APIObject.h"
+#include <wtf/Ref.h>
+
+namespace WebKit {
+
+class LocalNetworkDiscoveryPermissionRequestManagerProxy;
+
+class LocalNetworkDiscoveryPermissionRequestProxy : public API::ObjectImpl<API::Object::Type::LocalNetworkDiscoveryPermissionRequest> {
+public:
+    static Ref<LocalNetworkDiscoveryPermissionRequestProxy> create(LocalNetworkDiscoveryPermissionRequestManagerProxy* manager, uint64_t discoveryID)
+    {
+        return adoptRef(*new LocalNetworkDiscoveryPermissionRequestProxy(manager, discoveryID));
+    }
+
+    void allow();
+    void deny();
+
+    void invalidate();
+
+private:
+    LocalNetworkDiscoveryPermissionRequestProxy(LocalNetworkDiscoveryPermissionRequestManagerProxy*, uint64_t discoveryID);
+
+    LocalNetworkDiscoveryPermissionRequestManagerProxy* m_manager;
+    uint64_t m_discoveryID;
+};
+    
+} // namespace WebKit
+
+#endif // LocalNetworkDiscoveryPermissionRequest_h
diff --git a/Source/WebKit2/UIProcess/PageClient.h b/Source/WebKit2/UIProcess/PageClient.h
index 893e2c01479..6088c3c1c72 100644
--- a/Source/WebKit2/UIProcess/PageClient.h
+++ b/Source/WebKit2/UIProcess/PageClient.h
@@ -146,6 +146,11 @@ public:
         return false;
     }
 
+    virtual bool decidePolicyForLocalNetworkDiscoveryPermissionRequest(WebFrameProxy&, API::SecurityOrigin&, LocalNetworkDiscoveryPermissionRequestProxy&)
+    {
+        return false;
+    }
+
     virtual void didStartProvisionalLoadForMainFrame() { };
     virtual void didFailProvisionalLoadForMainFrame() { };
     virtual void didCommitLoadForMainFrame(const String& mimeType, bool useCustomContentProvider) = 0;
diff --git a/Source/WebKit2/UIProcess/WebPageProxy.cpp b/Source/WebKit2/UIProcess/WebPageProxy.cpp
index ac9edf0ed35..07434c56ad7 100644
--- a/Source/WebKit2/UIProcess/WebPageProxy.cpp
+++ b/Source/WebKit2/UIProcess/WebPageProxy.cpp
@@ -350,6 +350,7 @@ WebPageProxy::WebPageProxy(PageClient& pageClient, WebProcessProxy& process, uin
 #endif
     , m_geolocationPermissionRequestManager(*this)
     , m_notificationPermissionRequestManager(*this)
+    , m_localNetworkDiscoveryPermissionRequestManager(*this)
 #if PLATFORM(IOS)
     , m_alwaysRunsAtForegroundPriority(m_configuration->alwaysRunsAtForegroundPriority())
 #endif
@@ -3838,6 +3839,32 @@ void WebPageProxy::showPage()
     m_uiClient->showPage(this);
 }
 
+#if ENABLE(WEB_DIAL)
+void WebPageProxy::didOpenDialChannel()
+{
+    ASSERT(m_discoveryServiceInvoker);
+    m_discoveryServiceInvoker->didOpenDialChannel();
+}
+
+void WebPageProxy::reopenDialChannel()
+{
+    ASSERT(m_discoveryServiceInvoker);
+    m_discoveryServiceInvoker->reopenDialChannel();
+}
+
+void WebPageProxy::sendDialMessage(const Vector<uint8_t> message)
+{
+    ASSERT(m_discoveryServiceInvoker);
+    m_discoveryServiceInvoker->sendDialMessage(message);
+}
+
+void WebPageProxy::closeDialChannel()
+{
+    ASSERT(m_discoveryServiceInvoker);
+    m_discoveryServiceInvoker->closeDialChannel();
+}
+#endif // ENABLE(WEB_DIAL)
+
 void WebPageProxy::fullscreenMayReturnToInline()
 {
     m_uiClient->fullscreenMayReturnToInline(this);
@@ -5386,6 +5413,9 @@ void WebPageProxy::resetState(ResetStateReason resetStateReason)
 #if ENABLE(MEDIA_STREAM)
     m_userMediaPermissionRequestManager = nullptr;
 #endif
+#if ENABLE(WEB_DIAL)
+    m_localNetworkDiscoveryPermissionRequestManager.invalidateRequests();
+#endif
 
     m_notificationPermissionRequestManager.invalidateRequests();
 
@@ -5763,6 +5793,30 @@ void WebPageProxy::clearUserMediaState()
 #endif
 }
 
+void WebPageProxy::requestLocalNetworkDiscoveryPermissionForFrame(uint64_t discoveryID, uint64_t frameID, String originIdentifier)
+{
+#if ENABLE(WEB_DIAL)
+    WebFrameProxy* frame = m_process->webFrame(frameID);
+    MESSAGE_CHECK(frame);
+
+    // FIXME: is this FIXME the same as geolocation?
+    RefPtr<API::SecurityOrigin> origin = API::SecurityOrigin::create(SecurityOriginData::fromDatabaseIdentifier(originIdentifier)->securityOrigin());
+    RefPtr<LocalNetworkDiscoveryPermissionRequestProxy> request = m_localNetworkDiscoveryPermissionRequestManager.createRequest(discoveryID);
+
+    if (m_uiClient->decidePolicyForLocalNetworkDiscoveryPermissionRequest(*this, *frame, *origin.get(), *request.get()))
+        return;
+
+    if (m_pageClient.decidePolicyForLocalNetworkDiscoveryPermissionRequest(*frame, *origin, *request))
+        return;
+    
+    request->deny();
+#else
+    UNUSED_PARAM(discoveryID);
+    UNUSED_PARAM(frameID);
+    UNUSED_PARAM(originIdentifier);
+#endif
+}
+
 void WebPageProxy::requestNotificationPermission(uint64_t requestID, const String& originString)
 {
     if (!isRequestIDValid(requestID))
diff --git a/Source/WebKit2/UIProcess/WebPageProxy.h b/Source/WebKit2/UIProcess/WebPageProxy.h
index 8c98f99a9f3..2ade4f8048a 100644
--- a/Source/WebKit2/UIProcess/WebPageProxy.h
+++ b/Source/WebKit2/UIProcess/WebPageProxy.h
@@ -30,6 +30,7 @@
 #include "AutoCorrectionCallback.h"
 #include "Connection.h"
 #include "ContextMenuContextData.h"
+#include "DiscoveryServiceInvoker.h"
 #include "DownloadID.h"
 #include "DragControllerAction.h"
 #include "EditingRange.h"
@@ -37,6 +38,7 @@
 #include "GeolocationPermissionRequestManagerProxy.h"
 #include "HiddenPageThrottlingAutoIncreasesCounter.h"
 #include "LayerTreeContext.h"
+#include "LocalNetworkDiscoveryPermissionRequestManagerProxy.h"
 #include "MessageSender.h"
 #include "NotificationPermissionRequestManagerProxy.h"
 #include "PageLoadState.h"
@@ -314,6 +316,15 @@ public:
     RemoteScrollingCoordinatorProxy* scrollingCoordinatorProxy() const { return m_scrollingCoordinatorProxy.get(); }
 #endif
 
+#if ENABLE(WEB_DIAL)
+    void setDiscoveryServiceInvoker(Ref<DiscoveryServiceInvoker>&& invoker) { m_discoveryServiceInvoker = WTFMove(invoker); }
+
+    void didOpenDialChannel();
+    void reopenDialChannel();
+    void sendDialMessage(const Vector<uint8_t>);
+    void closeDialChannel();
+#endif
+
     WebBackForwardList& backForwardList() { return m_backForwardList; }
 
     bool addsVisitedLinks() const { return m_addsVisitedLinks; }
@@ -1333,6 +1344,8 @@ private:
     void requestUserMediaPermissionForFrame(uint64_t userMediaID, uint64_t frameID, const WebCore::SecurityOriginData& userMediaDocumentOriginIdentifier, const WebCore::SecurityOriginData& topLevelDocumentOriginIdentifier, const WebCore::MediaConstraints& audioConstraints, const WebCore::MediaConstraints& videoConstraints);
     void enumerateMediaDevicesForFrame(uint64_t userMediaID, uint64_t frameID, const WebCore::SecurityOriginData& userMediaDocumentOriginData, const WebCore::SecurityOriginData& topLevelDocumentOriginData);
 
+    void requestLocalNetworkDiscoveryPermissionForFrame(uint64_t discoveryID, uint64_t frameID, String originIdentifier);
+
     void runModal();
     void notifyScrollerThumbIsVisibleInRect(const WebCore::IntRect&);
     void recommendedScrollbarStyleDidChange(int32_t newStyle);
@@ -1647,6 +1660,9 @@ private:
 #if ENABLE(ASYNC_SCROLLING)
     std::unique_ptr<RemoteScrollingCoordinatorProxy> m_scrollingCoordinatorProxy;
 #endif
+#if ENABLE(WEB_DIAL)
+    RefPtr<DiscoveryServiceInvoker> m_discoveryServiceInvoker;
+#endif
 
     Ref<WebProcessProxy> m_process;
     Ref<WebPageGroup> m_pageGroup;
@@ -1726,6 +1742,7 @@ private:
 
     WebCore::ActivityState::Flags m_activityState { WebCore::ActivityState::NoFlags };
     bool m_viewWasEverInWindow { false };
+    LocalNetworkDiscoveryPermissionRequestManagerProxy m_localNetworkDiscoveryPermissionRequestManager;
 #if PLATFORM(IOS)
     bool m_allowsMediaDocumentInlinePlayback { false };
     bool m_alwaysRunsAtForegroundPriority { false };
diff --git a/Source/WebKit2/UIProcess/WebPageProxy.messages.in b/Source/WebKit2/UIProcess/WebPageProxy.messages.in
index bb0e44492b9..3034177ece0 100644
--- a/Source/WebKit2/UIProcess/WebPageProxy.messages.in
+++ b/Source/WebKit2/UIProcess/WebPageProxy.messages.in
@@ -275,6 +275,17 @@ messages -> WebPageProxy {
     EnumerateMediaDevicesForFrame(uint64_t userMediaID, uint64_t frameID, struct WebCore::SecurityOriginData userMediaDocumentOriginIdentifier, struct WebCore::SecurityOriginData topLevelDocumentOriginIdentifier)
 #endif
 
+#if ENABLE(WEB_DIAL)
+    # WebDial messages
+    RequestLocalNetworkDiscoveryPermissionForFrame(uint64_t discoveryID, uint64_t frameID, String originIdentifier)
+
+    # Channel will be opened by UIProcess this is to send confirmation
+    DidOpenDialChannel()
+    ReopenDialChannel()
+    SendDialMessage(Vector<uint8_t> data)
+    CloseDialChannel()
+#endif
+
     # Notification messages
     RequestNotificationPermission(uint64_t requestID, String originIdentifier)
     ShowNotification(String title, String body, String iconURL, String tag, String lang, enum WebCore::NotificationDirection dir, String originIdentifier, uint64_t notificationID)
diff --git a/Source/WebKit2/WebKit2.xcodeproj/project.pbxproj b/Source/WebKit2/WebKit2.xcodeproj/project.pbxproj
index cd00f23f941..c20840e13db 100644
--- a/Source/WebKit2/WebKit2.xcodeproj/project.pbxproj
+++ b/Source/WebKit2/WebKit2.xcodeproj/project.pbxproj
@@ -557,8 +557,29 @@
 		1CA8B954127C891500576C2B /* WebInspectorUIMac.mm in Sources */ = {isa = PBXBuildFile; fileRef = 1C8E2DAD1278C5B200BC7BD0 /* WebInspectorUIMac.mm */; };
 		1CBBE4A019B66C53006B7D81 /* WebInspectorUIMessageReceiver.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 1CBBE49E19B66C53006B7D81 /* WebInspectorUIMessageReceiver.cpp */; };
 		1CBBE4A119B66C53006B7D81 /* WebInspectorUIMessages.h in Headers */ = {isa = PBXBuildFile; fileRef = 1CBBE49F19B66C53006B7D81 /* WebInspectorUIMessages.h */; };
+		1F0B22451C9DC3F1005ADCDA /* WKDiscoveryDelegate.h in Headers */ = {isa = PBXBuildFile; fileRef = 1F0B22441C9DC3F1005ADCDA /* WKDiscoveryDelegate.h */; settings = {ATTRIBUTES = (Public, ); }; };
+		1F1464BB1CAA72BA006E9814 /* DiscoveryServicePrivateCocoa.mm in Sources */ = {isa = PBXBuildFile; fileRef = 1F1464BA1CAA72BA006E9814 /* DiscoveryServicePrivateCocoa.mm */; };
+		1F1464BF1CAA9246006E9814 /* DiscoveryServiceClient.h in Headers */ = {isa = PBXBuildFile; fileRef = 1F1464BD1CAA9245006E9814 /* DiscoveryServiceClient.h */; };
+		1F1464C41CAA97BC006E9814 /* DiscoveryDelegate.h in Headers */ = {isa = PBXBuildFile; fileRef = 1F1464C21CAA97BC006E9814 /* DiscoveryDelegate.h */; };
+		1F1464C51CAA97BC006E9814 /* DiscoveryDelegate.mm in Sources */ = {isa = PBXBuildFile; fileRef = 1F1464C31CAA97BC006E9814 /* DiscoveryDelegate.mm */; };
+		1F265C121D587DCA0062DD5F /* DiscoveryServiceInvoker.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 1F265C101D587DCA0062DD5F /* DiscoveryServiceInvoker.cpp */; };
+		1F265C131D587DCA0062DD5F /* DiscoveryServiceInvoker.h in Headers */ = {isa = PBXBuildFile; fileRef = 1F265C111D587DCA0062DD5F /* DiscoveryServiceInvoker.h */; };
+		1F2B93821C9DD00200886282 /* WKDiscoveryService.mm in Sources */ = {isa = PBXBuildFile; fileRef = 1F6C35AF1C9C3CA800C549E9 /* WKDiscoveryService.mm */; };
 		1F335BC0185B84F0001A201A /* WKWebProcessPlugInLoadDelegate.h in Headers */ = {isa = PBXBuildFile; fileRef = 1F335BBF185B84D8001A201A /* WKWebProcessPlugInLoadDelegate.h */; settings = {ATTRIBUTES = (Private, ); }; };
 		1F604BAA1889FBB800EE0395 /* _WKRenderingProgressEventsInternal.h in Headers */ = {isa = PBXBuildFile; fileRef = 1F604BA71889FA7400EE0395 /* _WKRenderingProgressEventsInternal.h */; };
+		1F68C3591CC0E51800FAE38F /* LocalNetworkDiscoveryPermissionRequestManager.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 1F68C3571CC0E51800FAE38F /* LocalNetworkDiscoveryPermissionRequestManager.cpp */; };
+		1F68C35A1CC0E51800FAE38F /* LocalNetworkDiscoveryPermissionRequestManager.h in Headers */ = {isa = PBXBuildFile; fileRef = 1F68C3581CC0E51800FAE38F /* LocalNetworkDiscoveryPermissionRequestManager.h */; };
+		1F68C35D1CC0F57400FAE38F /* WebLocalNetworkDiscovererClient.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 1F68C35B1CC0F57400FAE38F /* WebLocalNetworkDiscovererClient.cpp */; };
+		1F68C35E1CC0F57400FAE38F /* WebLocalNetworkDiscovererClient.h in Headers */ = {isa = PBXBuildFile; fileRef = 1F68C35C1CC0F57400FAE38F /* WebLocalNetworkDiscovererClient.h */; };
+		1F68C3671CC119A200FAE38F /* LocalNetworkDiscoveryPermissionRequestProxy.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 1F68C3651CC119A200FAE38F /* LocalNetworkDiscoveryPermissionRequestProxy.cpp */; };
+		1F68C3681CC119A200FAE38F /* LocalNetworkDiscoveryPermissionRequestProxy.h in Headers */ = {isa = PBXBuildFile; fileRef = 1F68C3661CC119A200FAE38F /* LocalNetworkDiscoveryPermissionRequestProxy.h */; };
+		1F68C36B1CC11C9000FAE38F /* LocalNetworkDiscoveryPermissionRequestManagerProxy.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 1F68C3691CC11C9000FAE38F /* LocalNetworkDiscoveryPermissionRequestManagerProxy.cpp */; };
+		1F68C36C1CC11C9000FAE38F /* LocalNetworkDiscoveryPermissionRequestManagerProxy.h in Headers */ = {isa = PBXBuildFile; fileRef = 1F68C36A1CC11C9000FAE38F /* LocalNetworkDiscoveryPermissionRequestManagerProxy.h */; };
+		1F6C35B01C9C3CA800C549E9 /* WKDiscoveryService.h in Headers */ = {isa = PBXBuildFile; fileRef = 1F6C35AE1C9C3CA800C549E9 /* WKDiscoveryService.h */; settings = {ATTRIBUTES = (Public, ); }; };
+		1F6C35B31C9C4B1000C549E9 /* WKDiscoveryServiceInternal.h in Headers */ = {isa = PBXBuildFile; fileRef = 1F6C35B21C9C4B1000C549E9 /* WKDiscoveryServiceInternal.h */; };
+		1F6C35B51C9C4B2C00C549E9 /* WKDiscoveryServicePrivate.h in Headers */ = {isa = PBXBuildFile; fileRef = 1F6C35B41C9C4B2C00C549E9 /* WKDiscoveryServicePrivate.h */; settings = {ATTRIBUTES = (Private, ); }; };
+		1F6C35BA1C9C50EF00C549E9 /* DiscoveryService.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 1F6C35B81C9C50EF00C549E9 /* DiscoveryService.cpp */; };
+		1F6C35BB1C9C50EF00C549E9 /* DiscoveryService.h in Headers */ = {isa = PBXBuildFile; fileRef = 1F6C35B91C9C50EF00C549E9 /* DiscoveryService.h */; };
 		1F7506AD1859161C00EC0FF7 /* WKWebProcessPlugInFrame.mm in Sources */ = {isa = PBXBuildFile; fileRef = 1F01816A1858DC1500F92884 /* WKWebProcessPlugInFrame.mm */; };
 		1F7506AE1859162200EC0FF7 /* WKWebProcessPlugInHitTestResult.mm in Sources */ = {isa = PBXBuildFile; fileRef = 1F01816D1858DC1600F92884 /* WKWebProcessPlugInHitTestResult.mm */; };
 		1F7506AF1859162800EC0FF7 /* WKWebProcessPlugInNodeHandle.mm in Sources */ = {isa = PBXBuildFile; fileRef = 1F0181701858DC1600F92884 /* WKWebProcessPlugInNodeHandle.mm */; };
@@ -575,6 +596,10 @@
 		1FB00AC7185F76460019142E /* WKWebProcessPlugInPageGroup.h in Headers */ = {isa = PBXBuildFile; fileRef = 1FB00AC4185F76460019142E /* WKWebProcessPlugInPageGroup.h */; settings = {ATTRIBUTES = (Private, ); }; };
 		1FB00AC8185F76460019142E /* WKWebProcessPlugInPageGroup.mm in Sources */ = {isa = PBXBuildFile; fileRef = 1FB00AC5185F76460019142E /* WKWebProcessPlugInPageGroup.mm */; };
 		1FB00AC9185F76460019142E /* WKWebProcessPlugInPageGroupInternal.h in Headers */ = {isa = PBXBuildFile; fileRef = 1FB00AC6185F76460019142E /* WKWebProcessPlugInPageGroupInternal.h */; };
+		1FEAC8441D831BF400C8C56E /* DiscoveryServiceChannelProxy.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 1FEAC8421D831BF400C8C56E /* DiscoveryServiceChannelProxy.cpp */; };
+		1FF38E361D8D6119006413C7 /* DiscoveryServiceChannelProxy.h in Headers */ = {isa = PBXBuildFile; fileRef = 1FEAC8431D831BF400C8C56E /* DiscoveryServiceChannelProxy.h */; };
+		1FF6B2EC1CB1763A00CE03D5 /* DiscoveryServicePrivate.h in Headers */ = {isa = PBXBuildFile; fileRef = 1FF6B2EB1CB1763A00CE03D5 /* DiscoveryServicePrivate.h */; };
+		1FF6B2EE1CB177F200CE03D5 /* DiscoveryServicePrivateCocoa.h in Headers */ = {isa = PBXBuildFile; fileRef = 1FF6B2ED1CB177F200CE03D5 /* DiscoveryServicePrivateCocoa.h */; };
 		1QQ417CB12C00CCA002BE67B /* TextCheckerCompletion.h in Headers */ = {isa = PBXBuildFile; fileRef = 1CC417C912C00CCA002BE67B /* TextCheckerCompletion.h */; };
 		1ZZ417EF12C00D87002BE67B /* TextCheckerCompletion.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 1BB417C912C00CCA002BE67B /* TextCheckerCompletion.cpp */; };
 		263172CF18B469490065B9C3 /* NativeWebTouchEvent.h in Headers */ = {isa = PBXBuildFile; fileRef = 263172CE18B469490065B9C3 /* NativeWebTouchEvent.h */; };
@@ -2781,12 +2806,37 @@
 		1F0181721858DC1600F92884 /* WKWebProcessPlugInScriptWorld.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = WKWebProcessPlugInScriptWorld.h; sourceTree = "<group>"; };
 		1F0181731858DC1600F92884 /* WKWebProcessPlugInScriptWorld.mm */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.objcpp; path = WKWebProcessPlugInScriptWorld.mm; sourceTree = "<group>"; };
 		1F0181741858DC1600F92884 /* WKWebProcessPlugInScriptWorldInternal.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = WKWebProcessPlugInScriptWorldInternal.h; sourceTree = "<group>"; };
+		1F0B22441C9DC3F1005ADCDA /* WKDiscoveryDelegate.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = WKDiscoveryDelegate.h; sourceTree = "<group>"; };
+		1F1464BA1CAA72BA006E9814 /* DiscoveryServicePrivateCocoa.mm */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.objcpp; name = DiscoveryServicePrivateCocoa.mm; path = Cocoa/DiscoveryServicePrivateCocoa.mm; sourceTree = "<group>"; };
+		1F1464BD1CAA9245006E9814 /* DiscoveryServiceClient.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = DiscoveryServiceClient.h; sourceTree = "<group>"; };
+		1F1464C21CAA97BC006E9814 /* DiscoveryDelegate.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = DiscoveryDelegate.h; sourceTree = "<group>"; };
+		1F1464C31CAA97BC006E9814 /* DiscoveryDelegate.mm */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.objcpp; path = DiscoveryDelegate.mm; sourceTree = "<group>"; };
+		1F265C101D587DCA0062DD5F /* DiscoveryServiceInvoker.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = DiscoveryServiceInvoker.cpp; sourceTree = "<group>"; };
+		1F265C111D587DCA0062DD5F /* DiscoveryServiceInvoker.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = DiscoveryServiceInvoker.h; sourceTree = "<group>"; };
 		1F335BBF185B84D8001A201A /* WKWebProcessPlugInLoadDelegate.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = WKWebProcessPlugInLoadDelegate.h; sourceTree = "<group>"; };
 		1F604BA71889FA7400EE0395 /* _WKRenderingProgressEventsInternal.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = _WKRenderingProgressEventsInternal.h; sourceTree = "<group>"; };
+		1F68C3571CC0E51800FAE38F /* LocalNetworkDiscoveryPermissionRequestManager.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = LocalNetworkDiscoveryPermissionRequestManager.cpp; path = WebDial/LocalNetworkDiscoveryPermissionRequestManager.cpp; sourceTree = "<group>"; };
+		1F68C3581CC0E51800FAE38F /* LocalNetworkDiscoveryPermissionRequestManager.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = LocalNetworkDiscoveryPermissionRequestManager.h; path = WebDial/LocalNetworkDiscoveryPermissionRequestManager.h; sourceTree = "<group>"; };
+		1F68C35B1CC0F57400FAE38F /* WebLocalNetworkDiscovererClient.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = WebLocalNetworkDiscovererClient.cpp; sourceTree = "<group>"; };
+		1F68C35C1CC0F57400FAE38F /* WebLocalNetworkDiscovererClient.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = WebLocalNetworkDiscovererClient.h; sourceTree = "<group>"; };
+		1F68C3651CC119A200FAE38F /* LocalNetworkDiscoveryPermissionRequestProxy.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = LocalNetworkDiscoveryPermissionRequestProxy.cpp; sourceTree = "<group>"; };
+		1F68C3661CC119A200FAE38F /* LocalNetworkDiscoveryPermissionRequestProxy.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = LocalNetworkDiscoveryPermissionRequestProxy.h; sourceTree = "<group>"; };
+		1F68C3691CC11C9000FAE38F /* LocalNetworkDiscoveryPermissionRequestManagerProxy.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = LocalNetworkDiscoveryPermissionRequestManagerProxy.cpp; sourceTree = "<group>"; };
+		1F68C36A1CC11C9000FAE38F /* LocalNetworkDiscoveryPermissionRequestManagerProxy.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = LocalNetworkDiscoveryPermissionRequestManagerProxy.h; sourceTree = "<group>"; };
+		1F6C35AE1C9C3CA800C549E9 /* WKDiscoveryService.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = WKDiscoveryService.h; sourceTree = "<group>"; };
+		1F6C35AF1C9C3CA800C549E9 /* WKDiscoveryService.mm */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.objcpp; path = WKDiscoveryService.mm; sourceTree = "<group>"; };
+		1F6C35B21C9C4B1000C549E9 /* WKDiscoveryServiceInternal.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = WKDiscoveryServiceInternal.h; sourceTree = "<group>"; };
+		1F6C35B41C9C4B2C00C549E9 /* WKDiscoveryServicePrivate.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = WKDiscoveryServicePrivate.h; sourceTree = "<group>"; };
+		1F6C35B81C9C50EF00C549E9 /* DiscoveryService.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = DiscoveryService.cpp; sourceTree = "<group>"; };
+		1F6C35B91C9C50EF00C549E9 /* DiscoveryService.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = DiscoveryService.h; sourceTree = "<group>"; };
 		1F7D36C018DA513F00D9D659 /* APIDownloadClient.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = APIDownloadClient.h; sourceTree = "<group>"; };
 		1FB00AC4185F76460019142E /* WKWebProcessPlugInPageGroup.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = WKWebProcessPlugInPageGroup.h; sourceTree = "<group>"; };
 		1FB00AC5185F76460019142E /* WKWebProcessPlugInPageGroup.mm */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.objcpp; path = WKWebProcessPlugInPageGroup.mm; sourceTree = "<group>"; };
 		1FB00AC6185F76460019142E /* WKWebProcessPlugInPageGroupInternal.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = WKWebProcessPlugInPageGroupInternal.h; sourceTree = "<group>"; };
+		1FEAC8421D831BF400C8C56E /* DiscoveryServiceChannelProxy.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; name = DiscoveryServiceChannelProxy.cpp; path = ../Shared/DiscoveryService/DiscoveryServiceChannelProxy.cpp; sourceTree = "<group>"; };
+		1FEAC8431D831BF400C8C56E /* DiscoveryServiceChannelProxy.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = DiscoveryServiceChannelProxy.h; path = ../Shared/DiscoveryService/DiscoveryServiceChannelProxy.h; sourceTree = "<group>"; };
+		1FF6B2EB1CB1763A00CE03D5 /* DiscoveryServicePrivate.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = DiscoveryServicePrivate.h; sourceTree = "<group>"; };
+		1FF6B2ED1CB177F200CE03D5 /* DiscoveryServicePrivateCocoa.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = DiscoveryServicePrivateCocoa.h; path = Cocoa/DiscoveryServicePrivateCocoa.h; sourceTree = "<group>"; };
 		263172CE18B469490065B9C3 /* NativeWebTouchEvent.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NativeWebTouchEvent.h; sourceTree = "<group>"; };
 		26659AA0185FAAED004303DD /* Info-iOS.plist */ = {isa = PBXFileReference; lastKnownFileType = text.plist.xml; path = "Info-iOS.plist"; sourceTree = "<group>"; };
 		2684054218B85A630022C38B /* VisibleContentRectUpdateInfo.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = VisibleContentRectUpdateInfo.h; sourceTree = "<group>"; };
@@ -4902,6 +4952,7 @@
 				C01A25FF12662F2100C9ED55 /* cg */,
 				37C4C0901814B37B003688B9 /* cocoa */,
 				51E351C2180F2C8500E53BE9 /* Databases */,
+				1F6C35B71C9C4FFB00C549E9 /* DiscoveryService */,
 				BC82836816B3587900A278FE /* EntryPointUtilities */,
 				E170877216D6CFEC00F99226 /* FileAPI */,
 				515BE1AE1D59003400DD7C68 /* Gamepad */,
@@ -5186,6 +5237,8 @@
 				990D28B81C6539A000986977 /* AutomationSessionClient.mm */,
 				83891B6A1A68C30B0030F386 /* DiagnosticLoggingClient.h */,
 				83891B6B1A68C30B0030F386 /* DiagnosticLoggingClient.mm */,
+				1F1464C21CAA97BC006E9814 /* DiscoveryDelegate.h */,
+				1F1464C31CAA97BC006E9814 /* DiscoveryDelegate.mm */,
 				A1DF631118E0B7C8003A3E2A /* DownloadClient.h */,
 				A1DF631018E0B7C8003A3E2A /* DownloadClient.mm */,
 				00B9661818E25AE100CE1F88 /* FindClient.h */,
@@ -5344,6 +5397,40 @@
 			path = Cocoa;
 			sourceTree = "<group>";
 		};
+		1F1464B91CAA7271006E9814 /* Cocoa */ = {
+			isa = PBXGroup;
+			children = (
+				1FF6B2ED1CB177F200CE03D5 /* DiscoveryServicePrivateCocoa.h */,
+				1F1464BA1CAA72BA006E9814 /* DiscoveryServicePrivateCocoa.mm */,
+			);
+			name = Cocoa;
+			sourceTree = "<group>";
+		};
+		1F68C3561CC0E4D700FAE38F /* WebDial */ = {
+			isa = PBXGroup;
+			children = (
+				1FEAC8421D831BF400C8C56E /* DiscoveryServiceChannelProxy.cpp */,
+				1FEAC8431D831BF400C8C56E /* DiscoveryServiceChannelProxy.h */,
+				1F68C3571CC0E51800FAE38F /* LocalNetworkDiscoveryPermissionRequestManager.cpp */,
+				1F68C3581CC0E51800FAE38F /* LocalNetworkDiscoveryPermissionRequestManager.h */,
+			);
+			name = WebDial;
+			sourceTree = "<group>";
+		};
+		1F6C35B71C9C4FFB00C549E9 /* DiscoveryService */ = {
+			isa = PBXGroup;
+			children = (
+				1F1464B91CAA7271006E9814 /* Cocoa */,
+				1F6C35B81C9C50EF00C549E9 /* DiscoveryService.cpp */,
+				1F6C35B91C9C50EF00C549E9 /* DiscoveryService.h */,
+				1F1464BD1CAA9245006E9814 /* DiscoveryServiceClient.h */,
+				1F265C101D587DCA0062DD5F /* DiscoveryServiceInvoker.cpp */,
+				1F265C111D587DCA0062DD5F /* DiscoveryServiceInvoker.h */,
+				1FF6B2EB1CB1763A00CE03D5 /* DiscoveryServicePrivate.h */,
+			);
+			path = DiscoveryService;
+			sourceTree = "<group>";
+		};
 		29AD3091164B4C100072DEA9 /* CustomProtocols */ = {
 			isa = PBXGroup;
 			children = (
@@ -5657,6 +5744,11 @@
 				5CD2864E1E722F440094FDC8 /* WKContentRuleListStore.mm */,
 				5CD2864F1E722F440094FDC8 /* WKContentRuleListStoreInternal.h */,
 				5CD286501E722F440094FDC8 /* WKContentRuleListStorePrivate.h */,
+				1F0B22441C9DC3F1005ADCDA /* WKDiscoveryDelegate.h */,
+				1F6C35AE1C9C3CA800C549E9 /* WKDiscoveryService.h */,
+				1F6C35AF1C9C3CA800C549E9 /* WKDiscoveryService.mm */,
+				1F6C35B21C9C4B1000C549E9 /* WKDiscoveryServiceInternal.h */,
+				1F6C35B41C9C4B2C00C549E9 /* WKDiscoveryServicePrivate.h */,
 				1AF4592D19464B2000F9D4A2 /* WKError.h */,
 				1AF4592C19464B2000F9D4A2 /* WKError.mm */,
 				1A2D252A194688FD004537B0 /* WKErrorInternal.h */,
@@ -6568,6 +6660,7 @@
 				1AAC4DDE16B1CBF6009425E3 /* Storage */,
 				1AAF08AA1926930B00B6390C /* UserContent */,
 				BC032D5D10F437220058C15A /* WebCoreSupport */,
+				1F68C3561CC0E4D700FAE38F /* WebDial */,
 				BC032D5E10F4372B0058C15A /* WebPage */,
 				BCE9C0CF1485965D00E33D61 /* WebConnectionToUIProcess.cpp */,
 				BCE9C0D01485965D00E33D61 /* WebConnectionToUIProcess.h */,
@@ -6608,6 +6701,8 @@
 				BC1BE1DE12D54A410004A228 /* WebGeolocationClient.h */,
 				BC111A59112F4FBB00337BAB /* WebInspectorClient.cpp */,
 				BC032D6D10F4378D0058C15A /* WebInspectorClient.h */,
+				1F68C35B1CC0F57400FAE38F /* WebLocalNetworkDiscovererClient.cpp */,
+				1F68C35C1CC0F57400FAE38F /* WebLocalNetworkDiscovererClient.h */,
 				31099971146C759B0029DEB9 /* WebNotificationClient.cpp */,
 				31099968146C71F50029DEB9 /* WebNotificationClient.h */,
 				512127C11908239A00DAF35C /* WebPasteboardOverrides.cpp */,
@@ -6737,6 +6832,10 @@
 				839A2F2F1E2067390039057E /* HighPerformanceGraphicsUsageSampler.cpp */,
 				839A2F301E2067390039057E /* HighPerformanceGraphicsUsageSampler.h */,
 				31607F3819627002009B87DA /* LegacySessionStateCoding.h */,
+				1F68C3691CC11C9000FAE38F /* LocalNetworkDiscoveryPermissionRequestManagerProxy.cpp */,
+				1F68C36A1CC11C9000FAE38F /* LocalNetworkDiscoveryPermissionRequestManagerProxy.h */,
+				1F68C3651CC119A200FAE38F /* LocalNetworkDiscoveryPermissionRequestProxy.cpp */,
+				1F68C3661CC119A200FAE38F /* LocalNetworkDiscoveryPermissionRequestProxy.h */,
 				BC6EDAA5111271C600E7678B /* PageClient.h */,
 				1AC75379183A9FDA0072CB15 /* PageLoadState.cpp */,
 				1AC7537A183A9FDB0072CB15 /* PageLoadState.h */,
@@ -8329,6 +8428,13 @@
 				1AC75380183BE50F0072CB15 /* DataReference.h in Headers */,
 				BC032DA610F437D10058C15A /* Decoder.h in Headers */,
 				83891B6C1A68C30B0030F386 /* DiagnosticLoggingClient.h in Headers */,
+				1F1464C41CAA97BC006E9814 /* DiscoveryDelegate.h in Headers */,
+				1F6C35BB1C9C50EF00C549E9 /* DiscoveryService.h in Headers */,
+				1FF38E361D8D6119006413C7 /* DiscoveryServiceChannelProxy.h in Headers */,
+				1F1464BF1CAA9246006E9814 /* DiscoveryServiceClient.h in Headers */,
+				1F265C131D587DCA0062DD5F /* DiscoveryServiceInvoker.h in Headers */,
+				1FF6B2EC1CB1763A00CE03D5 /* DiscoveryServicePrivate.h in Headers */,
+				1FF6B2EE1CB177F200CE03D5 /* DiscoveryServicePrivateCocoa.h in Headers */,
 				5C1427021C23F84C00D41183 /* Download.h in Headers */,
 				A1DF631318E0B7C8003A3E2A /* DownloadClient.h in Headers */,
 				5C1427051C23F84C00D41183 /* DownloadID.h in Headers */,
@@ -8410,6 +8516,9 @@
 				41DC459C1E3DBB2800B11F51 /* LibWebRTCSocketClient.h in Headers */,
 				413075B21DE85F580039EC69 /* LibWebRTCSocketFactory.h in Headers */,
 				2D1087611D2C573E00B85F82 /* LoadParameters.h in Headers */,
+				1F68C35A1CC0E51800FAE38F /* LocalNetworkDiscoveryPermissionRequestManager.h in Headers */,
+				1F68C36C1CC11C9000FAE38F /* LocalNetworkDiscoveryPermissionRequestManagerProxy.h in Headers */,
+				1F68C3681CC119A200FAE38F /* LocalNetworkDiscoveryPermissionRequestProxy.h in Headers */,
 				1A1D8BA21731A36300141DA4 /* LocalStorageDatabase.h in Headers */,
 				1A8C728D1738477C000A6554 /* LocalStorageDatabaseTracker.h in Headers */,
 				51A7F2F3125BF820008AEB1D /* Logging.h in Headers */,
@@ -8729,6 +8838,7 @@
 				BCB63478116BF10600603215 /* WebKit2_C.h in Headers */,
 				BC9BA5051697C45300E44616 /* WebKit2Initialize.h in Headers */,
 				1A6280C71919950C006AD9F9 /* WebKitPrivate.h in Headers */,
+				1F68C35E1CC0F57400FAE38F /* WebLocalNetworkDiscovererClient.h in Headers */,
 				CD003A5319D49B5D005ABCE0 /* WebMediaKeyStorageManager.h in Headers */,
 				C98C48A61B6FD4C300145103 /* WebMediaSessionFocusManager.h in Headers */,
 				C9C1833C1B74026D007036A7 /* WebMediaSessionFocusManagerClient.h in Headers */,
@@ -8922,6 +9032,10 @@
 				377EAD4517E2C51A002D193D /* WKDeclarationSpecifiers.h in Headers */,
 				8372DB2F1A677D4A00C697C5 /* WKDiagnosticLoggingResultType.h in Headers */,
 				BC4075FA124FF0270068F20A /* WKDictionary.h in Headers */,
+				1F0B22451C9DC3F1005ADCDA /* WKDiscoveryDelegate.h in Headers */,
+				1F6C35B01C9C3CA800C549E9 /* WKDiscoveryService.h in Headers */,
+				1F6C35B31C9C4B1000C549E9 /* WKDiscoveryServiceInternal.h in Headers */,
+				1F6C35B51C9C4B2C00C549E9 /* WKDiscoveryServicePrivate.h in Headers */,
 				BC017D0716260FF4007054F5 /* WKDOMDocument.h in Headers */,
 				BC017D0916260FF4007054F5 /* WKDOMElement.h in Headers */,
 				BC017D0B16260FF4007054F5 /* WKDOMInternals.h in Headers */,
@@ -9880,6 +9994,11 @@
 				1AC7537F183BE50F0072CB15 /* DataReference.cpp in Sources */,
 				BC032DA510F437D10058C15A /* Decoder.cpp in Sources */,
 				83891B6D1A68C30B0030F386 /* DiagnosticLoggingClient.mm in Sources */,
+				1F1464C51CAA97BC006E9814 /* DiscoveryDelegate.mm in Sources */,
+				1F6C35BA1C9C50EF00C549E9 /* DiscoveryService.cpp in Sources */,
+				1FEAC8441D831BF400C8C56E /* DiscoveryServiceChannelProxy.cpp in Sources */,
+				1F265C121D587DCA0062DD5F /* DiscoveryServiceInvoker.cpp in Sources */,
+				1F1464BB1CAA72BA006E9814 /* DiscoveryServicePrivateCocoa.mm in Sources */,
 				5C1427011C23F84C00D41183 /* Download.cpp in Sources */,
 				A1DF631218E0B7C8003A3E2A /* DownloadClient.mm in Sources */,
 				5C1427131C23F89E00D41183 /* DownloadCocoa.mm in Sources */,
@@ -9948,7 +10067,6 @@
 				7A821F4E1E2F67A800604577 /* LegacyCustomProtocolManagerClient.mm in Sources */,
 				5C14271D1C23F8CF00D41183 /* LegacyCustomProtocolManagerCocoa.mm in Sources */,
 				2984F588164BA095004BC0C6 /* LegacyCustomProtocolManagerMessageReceiver.cpp in Sources */,
-				83AFDC0A1F06CEEA00472815 /* ResourceLoadStatisticsStore.cpp in Sources */,
 				7A821F4A1E2F65E900604577 /* LegacyCustomProtocolManagerProxy.cpp in Sources */,
 				2984F57C164B915F004BC0C6 /* LegacyCustomProtocolManagerProxyMessageReceiver.cpp in Sources */,
 				1AFDE65D1954E8D500C48FFA /* LegacySessionStateCoding.cpp in Sources */,
@@ -9959,6 +10077,9 @@
 				413075B11DE85F580039EC69 /* LibWebRTCSocketFactory.cpp in Sources */,
 				2D1087601D2C573E00B85F82 /* LoadParameters.cpp in Sources */,
 				2D1087631D2C641B00B85F82 /* LoadParametersCocoa.mm in Sources */,
+				1F68C3591CC0E51800FAE38F /* LocalNetworkDiscoveryPermissionRequestManager.cpp in Sources */,
+				1F68C36B1CC11C9000FAE38F /* LocalNetworkDiscoveryPermissionRequestManagerProxy.cpp in Sources */,
+				1F68C3671CC119A200FAE38F /* LocalNetworkDiscoveryPermissionRequestProxy.cpp in Sources */,
 				1A1D8BA11731A36300141DA4 /* LocalStorageDatabase.cpp in Sources */,
 				1A8C728C1738477C000A6554 /* LocalStorageDatabaseTracker.cpp in Sources */,
 				5120C8311E54EDDE0025B250 /* LocalStorageDatabaseTrackerIOS.mm in Sources */,
@@ -10139,6 +10260,7 @@
 				1BBBE4A019B66C53006B7D81 /* RemoteWebInspectorUIMessageReceiver.cpp in Sources */,
 				6BE969C71E54D4B6008B7483 /* ResourceLoadStatisticsClassifier.cpp in Sources */,
 				6BE969CA1E54D4CF008B7483 /* ResourceLoadStatisticsClassifierCocoa.cpp in Sources */,
+				83AFDC0A1F06CEEA00472815 /* ResourceLoadStatisticsStore.cpp in Sources */,
 				BC111B09112F5E3C00337BAB /* ResponsivenessTimer.cpp in Sources */,
 				410482CD1DDD324C00F006D0 /* RTCNetwork.cpp in Sources */,
 				1AAB4AAA1296F1540023952F /* SandboxExtensionMac.mm in Sources */,
@@ -10326,6 +10448,7 @@
 				BC9BA5041697C45300E44616 /* WebKit2Initialize.cpp in Sources */,
 				465250E61ECF52DC002025CB /* WebKit2InitializeCocoa.mm in Sources */,
 				51FB08FF1639DE1A00EC324A /* WebLoaderStrategy.cpp in Sources */,
+				1F68C35D1CC0F57400FAE38F /* WebLocalNetworkDiscovererClient.cpp in Sources */,
 				CD003A5219D49B5D005ABCE0 /* WebMediaKeyStorageManager.cpp in Sources */,
 				C98C48A51B6FD4C300145103 /* WebMediaSessionFocusManager.cpp in Sources */,
 				C9C1833B1B74026A007036A7 /* WebMediaSessionFocusManagerClient.cpp in Sources */,
@@ -10511,6 +10634,7 @@
 				BC4075F7124FF0270068F20A /* WKData.cpp in Sources */,
 				1AFF49001833DE78009AB15A /* WKDeprecatedFunctions.cpp in Sources */,
 				BC4075F9124FF0270068F20A /* WKDictionary.cpp in Sources */,
+				1F2B93821C9DD00200886282 /* WKDiscoveryService.mm in Sources */,
 				BC017D0816260FF4007054F5 /* WKDOMDocument.mm in Sources */,
 				BC017D0A16260FF4007054F5 /* WKDOMElement.mm in Sources */,
 				BC017D0C16260FF4007054F5 /* WKDOMInternals.mm in Sources */,
diff --git a/Source/WebKit2/WebProcess/WebCoreSupport/WebLocalNetworkDiscovererClient.cpp b/Source/WebKit2/WebProcess/WebCoreSupport/WebLocalNetworkDiscovererClient.cpp
new file mode 100644
index 00000000000..21dd4f755ee
--- /dev/null
+++ b/Source/WebKit2/WebProcess/WebCoreSupport/WebLocalNetworkDiscovererClient.cpp
@@ -0,0 +1,63 @@
+/*
+ * Copyright (C) 2016 Michal Debski <mi.zd.debski@gmail.com>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1.  Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ * 2.  Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ * 3.  Neither the name of Apple Inc. ("Apple") nor the names of
+ *     its contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+#include "config.h"
+#include "WebLocalNetworkDiscovererClient.h"
+
+#if ENABLE(WEB_DIAL)
+
+#include "LocalNetworkDiscoveryPermissionRequestManager.h"
+#include "WebPage.h"
+#include <WebCore/LocalNetworkDevices.h>
+
+using namespace WebCore;
+
+namespace WebKit {
+
+void WebLocalNetworkDiscovererClient::pageDestroyed()
+{
+    delete this;
+}
+
+void WebLocalNetworkDiscovererClient::requestPermission(LocalNetworkEnumerationRequest& requester)
+{
+    m_page.localNetworkDiscoveryPermissionRequestManager().startRequestForLocalNetworkDiscovery(requester);
+}
+
+void WebLocalNetworkDiscovererClient::cancelPermissionRequest(LocalNetworkEnumerationRequest& requester)
+{
+    m_page.localNetworkDiscoveryPermissionRequestManager().cancelRequestForLocalNetworkDiscovery(requester);
+}
+
+RefPtr<DiscoveryServiceChannel> WebLocalNetworkDiscovererClient::getInvokerChannel()
+{
+    return m_page.getDialChannelProxy();
+}
+
+} // namespace WebKit
+
+#endif // ENABLE(WEB_DIAL)
diff --git a/Source/WebKit2/WebProcess/WebCoreSupport/WebLocalNetworkDiscovererClient.h b/Source/WebKit2/WebProcess/WebCoreSupport/WebLocalNetworkDiscovererClient.h
new file mode 100644
index 00000000000..0fadcb8763d
--- /dev/null
+++ b/Source/WebKit2/WebProcess/WebCoreSupport/WebLocalNetworkDiscovererClient.h
@@ -0,0 +1,58 @@
+/*
+ * Copyright (C) 2016 Michal Debski <mi.zd.debski@gmail.com>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1.  Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ * 2.  Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ * 3.  Neither the name of Apple Inc. ("Apple") nor the names of
+ *     its contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef WebLocalNetworkDiscoveryClient_h
+#define WebLocalNetworkDiscoveryClient_h
+
+#include <WebCore/LocalNetworkDiscovererClient.h>
+
+namespace WebKit {
+
+class WebPage;
+
+class WebLocalNetworkDiscovererClient : public WebCore::LocalNetworkDiscovererClient {
+public:
+    explicit WebLocalNetworkDiscovererClient(WebPage& page)
+    : m_page(page)
+    {
+    }
+
+    RefPtr<WebCore::DiscoveryServiceChannel> getInvokerChannel() override;
+
+    void pageDestroyed() override;
+
+    void requestPermission(WebCore::LocalNetworkEnumerationRequest&) override;
+    void cancelPermissionRequest(WebCore::LocalNetworkEnumerationRequest&) override;
+
+private:
+    WebPage& m_page;
+};
+    
+} // namespace WebKit
+
+#endif // WebLocalNetworkDiscoveryClient_h
diff --git a/Source/WebKit2/WebProcess/WebDial/LocalNetworkDiscoveryPermissionRequestManager.cpp b/Source/WebKit2/WebProcess/WebDial/LocalNetworkDiscoveryPermissionRequestManager.cpp
new file mode 100644
index 00000000000..ed68113bda7
--- /dev/null
+++ b/Source/WebKit2/WebProcess/WebDial/LocalNetworkDiscoveryPermissionRequestManager.cpp
@@ -0,0 +1,107 @@
+/*
+ * Copyright (C) 2016 Michal Debski <mi.zd.debski@gmail.com>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1.  Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ * 2.  Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ * 3.  Neither the name of Apple Inc. ("Apple") nor the names of
+ *     its contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+
+#include "config.h"
+#include "LocalNetworkDiscoveryPermissionRequestManager.h"
+
+#if ENABLE(WEB_DIAL)
+
+#include "Logging.h"
+#include "WebCoreArgumentCoders.h"
+#include "WebFrame.h"
+#include "WebPage.h"
+#include "WebPageProxyMessages.h"
+#include <WebCore/Document.h>
+#include <WebCore/Frame.h>
+#include <WebCore/FrameLoader.h>
+#include <WebCore/SecurityOrigin.h>
+#include <WebCore/SecurityOriginData.h>
+
+using namespace WebCore;
+
+namespace WebKit {
+
+static uint64_t generateDiscoveryID()
+{
+    static uint64_t uniqueDiscoveryID = 1;
+    return uniqueDiscoveryID++;
+}
+
+LocalNetworkDiscoveryPermissionRequestManager::LocalNetworkDiscoveryPermissionRequestManager(WebPage& page)
+: m_page(page)
+{
+}
+
+void LocalNetworkDiscoveryPermissionRequestManager::startRequestForLocalNetworkDiscovery(LocalNetworkEnumerationRequest& requester)
+{
+    auto origin = requester.localNetworkDevicesDocumentOrigin();
+    if (!origin) {
+        requester.permissionDenied();
+        return;
+    }
+
+    Document* document = downcast<Document>(requester.scriptExecutionContext());
+    Frame* frame = document ? document->frame() : nullptr;
+
+    if (!frame) {
+        requester.permissionDenied();
+        return;
+    }
+
+    uint64_t discoveryID = generateDiscoveryID();
+
+    m_localNetworkDevicesToIDMap.set(&requester, discoveryID);
+    m_idToLocalNetworkDevicesMap.set(discoveryID, &requester);
+
+    WebFrame* webFrame = WebFrame::fromCoreFrame(*frame);
+    ASSERT(webFrame);
+
+    m_page.send(Messages::WebPageProxy::RequestLocalNetworkDiscoveryPermissionForFrame(discoveryID, webFrame->frameID(), SecurityOriginData::fromSecurityOrigin(*origin).databaseIdentifier()));
+}
+
+void LocalNetworkDiscoveryPermissionRequestManager::cancelRequestForLocalNetworkDiscovery(LocalNetworkEnumerationRequest& requester)
+{
+    if (const auto requestID = m_localNetworkDevicesToIDMap.take(&requester))
+        m_idToLocalNetworkDevicesMap.remove(requestID);
+}
+
+void LocalNetworkDiscoveryPermissionRequestManager::didReceiveLocalNetworkDiscoveryPermissionDecision(uint64_t discoveryID, bool allowed)
+{
+    RefPtr<LocalNetworkEnumerationRequest> requester = m_idToLocalNetworkDevicesMap.take(discoveryID);
+    LOG(WebDial, "LocalNetworkDiscoveryPermissionRequestManager::didReceiveLocalNetworkDiscoveryPermissionDecision() requester:%p allowed:%d", requester.get(), allowed);
+    if (requester) {
+        m_localNetworkDevicesToIDMap.remove(requester.get());
+
+        requester->permissionGranted();
+    }
+}
+    
+} // namespace WebKit
+
+#endif // ENABLE(WEB_DIAL)
diff --git a/Source/WebKit2/WebProcess/WebDial/LocalNetworkDiscoveryPermissionRequestManager.h b/Source/WebKit2/WebProcess/WebDial/LocalNetworkDiscoveryPermissionRequestManager.h
new file mode 100644
index 00000000000..feb81d60ae3
--- /dev/null
+++ b/Source/WebKit2/WebProcess/WebDial/LocalNetworkDiscoveryPermissionRequestManager.h
@@ -0,0 +1,60 @@
+/*
+ * Copyright (C) 2016 Michal Debski <mi.zd.debski@gmail.com>
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1.  Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ * 2.  Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ * 3.  Neither the name of Apple Inc. ("Apple") nor the names of
+ *     its contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
+ * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef LocalNetworkDiscoveryPermissionRequestManager_h
+#define LocalNetworkDiscoveryPermissionRequestManager_h
+
+#include <WebCore/LocalNetworkEnumerationRequest.h>
+#include <wtf/HashMap.h>
+#include <wtf/RefPtr.h>
+
+namespace WebKit {
+
+class WebPage;
+
+class LocalNetworkDiscoveryPermissionRequestManager {
+public:
+    explicit LocalNetworkDiscoveryPermissionRequestManager(WebPage&);
+
+    void startRequestForLocalNetworkDiscovery(WebCore::LocalNetworkEnumerationRequest&);
+    void cancelRequestForLocalNetworkDiscovery(WebCore::LocalNetworkEnumerationRequest&);
+
+    void didReceiveLocalNetworkDiscoveryPermissionDecision(uint64_t discoveryID, bool allowed);
+
+private:
+    typedef HashMap<uint64_t, RefPtr<WebCore::LocalNetworkEnumerationRequest>> IDToLocalNetworkDevicesMap;
+    typedef HashMap<WebCore::LocalNetworkEnumerationRequest*, uint64_t> LocalNetworkDevicesToIDMap;
+    IDToLocalNetworkDevicesMap m_idToLocalNetworkDevicesMap;
+    LocalNetworkDevicesToIDMap m_localNetworkDevicesToIDMap;
+
+    WebPage& m_page;
+};
+    
+} // namespace WebKit
+
+#endif // LocalNetworkDiscoveryPermissionRequestManager_h
diff --git a/Source/WebKit2/WebProcess/WebPage/WebPage.cpp b/Source/WebKit2/WebProcess/WebPage/WebPage.cpp
index d5ce3f18a5e..7d45854eb15 100644
--- a/Source/WebKit2/WebProcess/WebPage/WebPage.cpp
+++ b/Source/WebKit2/WebProcess/WebPage/WebPage.cpp
@@ -93,6 +93,7 @@
 #include "WebInspectorMessages.h"
 #include "WebInspectorUI.h"
 #include "WebInspectorUIMessages.h"
+#include "WebLocalNetworkDiscovererClient.h"
 #include "WebMediaKeyStorageManager.h"
 #include "WebNotificationClient.h"
 #include "WebOpenPanelResultListener.h"
@@ -342,6 +343,9 @@ WebPage::WebPage(uint64_t pageID, WebPageCreationParameters&& parameters)
 #if ENABLE(MEDIA_STREAM)
     , m_userMediaPermissionRequestManager { std::make_unique<UserMediaPermissionRequestManager>(*this) }
 #endif
+#if ENABLE(WEB_DIAL)
+    , m_localNetworkDiscoveryPermissionRequestManager(*this)
+#endif
     , m_pageScrolledHysteresis([this](HysteresisState state) { if (state == HysteresisState::Stopped) pageStoppedScrolling(); }, pageScrollHysteresisDuration)
     , m_canRunBeforeUnloadConfirmPanel(parameters.canRunBeforeUnloadConfirmPanel)
     , m_canRunModal(parameters.canRunModal)
@@ -440,6 +444,9 @@ WebPage::WebPage(uint64_t pageID, WebPageCreationParameters&& parameters)
 #if ENABLE(MEDIA_STREAM)
     WebCore::provideUserMediaTo(m_page.get(), new WebUserMediaClient(*this));
 #endif
+#if ENABLE(WEB_DIAL)
+    WebCore::provideLocalNetworkDiscoveryTo(m_page.get(), new WebLocalNetworkDiscovererClient(*this));
+#endif
 
     m_page->setControlledByAutomation(parameters.controlledByAutomation);
 
@@ -3890,6 +3897,36 @@ void WebPage::revokeUserMediaDeviceSandboxExtensions(const Vector<String>& exten
 #endif
 #endif
 
+#if ENABLE(WEB_DIAL)
+void WebPage::didReceiveLocalNetworkDiscoveryPermissionDecision(uint64_t discoveryID, bool allowed)
+{
+    m_localNetworkDiscoveryPermissionRequestManager.didReceiveLocalNetworkDiscoveryPermissionDecision(discoveryID, allowed);
+}
+
+void WebPage::prepareDialChannelProxy()
+{
+    m_dialChannelProxy = DiscoveryServiceChannelProxy::create(*this);
+}
+
+void WebPage::didReceiveDialMessage(const Vector<uint8_t>& message)
+{
+    ASSERT(m_dialChannelProxy);
+    m_dialChannelProxy->messageReceived(message);
+}
+
+void WebPage::didErrorDialChannel(const String& reason)
+{
+    ASSERT(m_dialChannelProxy);
+    m_dialChannelProxy->errorReceived(reason);
+}
+
+void WebPage::didCloseDialChannel()
+{
+    ASSERT(m_dialChannelProxy);
+    m_dialChannelProxy->closedReceived();
+}
+#endif
+
 #if !PLATFORM(IOS)
 void WebPage::advanceToNextMisspelling(bool startBeforeSelection)
 {
diff --git a/Source/WebKit2/WebProcess/WebPage/WebPage.h b/Source/WebKit2/WebProcess/WebPage/WebPage.h
index 142f57d575a..54a8687a151 100644
--- a/Source/WebKit2/WebProcess/WebPage/WebPage.h
+++ b/Source/WebKit2/WebProcess/WebPage/WebPage.h
@@ -33,11 +33,13 @@
 #include "APIInjectedBundlePageUIClient.h"
 #include "APIObject.h"
 #include "CallbackID.h"
+#include "DiscoveryServiceChannelProxy.h"
 #include "EditingRange.h"
 #include "InjectedBundlePageContextMenuClient.h"
 #include "InjectedBundlePageFullScreenClient.h"
 #include "InjectedBundlePagePolicyClient.h"
 #include "LayerTreeContext.h"
+#include "LocalNetworkDiscoveryPermissionRequestManager.h"
 #include "MessageReceiver.h"
 #include "MessageSender.h"
 #include "OptionalCallbackID.h"
@@ -511,6 +513,14 @@ public:
     UserMediaPermissionRequestManager& userMediaPermissionRequestManager() { return *m_userMediaPermissionRequestManager; }
 #endif
 
+#if ENABLE(WEB_DIAL)
+    RefPtr<WebCore::DiscoveryServiceChannel> getDialChannelProxy() {
+        return m_dialChannelProxy;
+    }
+
+    inline LocalNetworkDiscoveryPermissionRequestManager& localNetworkDiscoveryPermissionRequestManager() { return m_localNetworkDiscoveryPermissionRequestManager; }
+#endif
+
     void elementDidFocus(WebCore::Node*);
     void elementDidBlur(WebCore::Node*);
     void resetAssistedNodeForFrame(WebFrame*);
@@ -1205,6 +1215,15 @@ private:
 #endif
 #endif
 
+#if ENABLE(WEB_DIAL)
+    void didReceiveLocalNetworkDiscoveryPermissionDecision(uint64_t discoveryID, bool allowed);
+
+    void prepareDialChannelProxy();
+    void didReceiveDialMessage(const Vector<uint8_t>&);
+    void didErrorDialChannel(const String& reason);
+    void didCloseDialChannel();
+#endif
+
     void advanceToNextMisspelling(bool startBeforeSelection);
     void changeSpellingToWord(const String& word);
 #if USE(APPKIT)
@@ -1429,6 +1448,12 @@ private:
     std::unique_ptr<UserMediaPermissionRequestManager> m_userMediaPermissionRequestManager;
 #endif
 
+#if ENABLE(WEB_DIAL)
+    LocalNetworkDiscoveryPermissionRequestManager m_localNetworkDiscoveryPermissionRequestManager;
+
+    RefPtr<DiscoveryServiceChannelProxy> m_dialChannelProxy;
+#endif
+
     std::unique_ptr<WebCore::PrintContext> m_printContext;
 #if PLATFORM(GTK)
     RefPtr<WebPrintOperationGtk> m_printOperation;
diff --git a/Source/WebKit2/WebProcess/WebPage/WebPage.messages.in b/Source/WebKit2/WebProcess/WebPage/WebPage.messages.in
index 9e32133cd77..6ce2fb639c1 100644
--- a/Source/WebKit2/WebProcess/WebPage/WebPage.messages.in
+++ b/Source/WebKit2/WebProcess/WebPage/WebPage.messages.in
@@ -316,6 +316,19 @@ messages -> WebPage LegacyReceiver {
     DisableEnumeratingAllNetworkInterfaces()
 #endif
 
+
+#if ENABLE(WEB_DIAL)
+    # WebDial
+    DidReceiveLocalNetworkDiscoveryPermissionDecision(uint64_t discoveryID, bool allowed)
+
+    #TODO this should be done in a constructor
+    PrepareDialChannelProxy()
+
+    DidReceiveDialMessage(Vector<uint8_t> data)
+    DidErrorDialChannel(String reason)
+    DidCloseDialChannel()
+#endif
+
     # Notification
     DidReceiveNotificationPermissionDecision(uint64_t notificationID, bool allowed)
 
diff --git a/Source/cmake/OptionsMac.cmake b/Source/cmake/OptionsMac.cmake
index aecb4ff57fe..391cb3b2bcb 100644
--- a/Source/cmake/OptionsMac.cmake
+++ b/Source/cmake/OptionsMac.cmake
@@ -94,6 +94,7 @@ WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_WEBGL PRIVATE ON)
 WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_WEBGL2 PRIVATE ON)
 WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_WEBGPU PRIVATE ON)
 WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_WEB_AUDIO PRIVATE ON)
+WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_WEB_DIAL PRIVATE ON)
 WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_WEB_REPLAY PRIVATE ON)
 WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_WEB_SOCKETS PRIVATE ON)
 
diff --git a/Source/cmake/WebKitFeatures.cmake b/Source/cmake/WebKitFeatures.cmake
index 8739d18321e..453feff866f 100644
--- a/Source/cmake/WebKitFeatures.cmake
+++ b/Source/cmake/WebKitFeatures.cmake
@@ -190,6 +190,7 @@ macro(WEBKIT_OPTION_BEGIN)
     WEBKIT_OPTION_DEFINE(ENABLE_WEBVTT_REGIONS "Toggle webvtt region support" PRIVATE OFF)
     WEBKIT_OPTION_DEFINE(ENABLE_WEB_ANIMATIONS "Toggle Web Animations support" PRIVATE OFF)
     WEBKIT_OPTION_DEFINE(ENABLE_WEB_AUDIO "Toggle Web Audio support" PRIVATE OFF)
+    WEBKIT_OPTION_DEFINE(ENABLE_WEB_DIAL "Toggle Web Discovery and Launch support" PRIVATE OFF)
     WEBKIT_OPTION_DEFINE(ENABLE_WEB_REPLAY "Toggle Web Replay support" PRIVATE OFF)
     WEBKIT_OPTION_DEFINE(ENABLE_WEB_RTC "Toggle WebRTC API support" PRIVATE OFF)
     WEBKIT_OPTION_DEFINE(ENABLE_WEB_SOCKETS "Toggle Web Sockets support" PRIVATE ON)
diff --git a/Tools/MiniBrowser/MiniBrowser.xcodeproj/project.pbxproj b/Tools/MiniBrowser/MiniBrowser.xcodeproj/project.pbxproj
index 8f8dbbfcde6..c055472afe0 100644
--- a/Tools/MiniBrowser/MiniBrowser.xcodeproj/project.pbxproj
+++ b/Tools/MiniBrowser/MiniBrowser.xcodeproj/project.pbxproj
@@ -11,6 +11,8 @@
 		0FE643A4161FAC660059E3FF /* WK1BrowserWindowController.m in Sources */ = {isa = PBXBuildFile; fileRef = 0FE643A3161FAC660059E3FF /* WK1BrowserWindowController.m */; };
 		1AFFEF8818611C3D00DA465E /* MiniBrowserWebProcessPlugIn.m in Sources */ = {isa = PBXBuildFile; fileRef = 1AFFEF8618611C3D00DA465E /* MiniBrowserWebProcessPlugIn.m */; };
 		1AFFEF8B18611D8A00DA465E /* MiniBrowser.wkbundle in Copy Bundle */ = {isa = PBXBuildFile; fileRef = 1AFFEF751860EE6700DA465E /* MiniBrowser.wkbundle */; };
+		1FCC6C731DCFAB16008E2968 /* UserScriptsManagerWindowController.xib in Resources */ = {isa = PBXBuildFile; fileRef = 1FCC6C721DCFAB16008E2968 /* UserScriptsManagerWindowController.xib */; };
+		1FCC6C761DCFACB1008E2968 /* UserScriptsManagerWindowController.m in Sources */ = {isa = PBXBuildFile; fileRef = 1FCC6C751DCFACB1008E2968 /* UserScriptsManagerWindowController.m */; };
 		256AC3DA0F4B6AC300CF3369 /* AppDelegate.m in Sources */ = {isa = PBXBuildFile; fileRef = 256AC3D90F4B6AC300CF3369 /* AppDelegate.m */; };
 		2DC37343198B62D300EC33E9 /* SettingsController.m in Sources */ = {isa = PBXBuildFile; fileRef = 2DC37342198B62D300EC33E9 /* SettingsController.m */; };
 		51E244FA11EFCE07008228D1 /* MBToolbarItem.m in Sources */ = {isa = PBXBuildFile; fileRef = 51E244F911EFCE07008228D1 /* MBToolbarItem.m */; };
@@ -60,6 +62,9 @@
 		1AFFEF8618611C3D00DA465E /* MiniBrowserWebProcessPlugIn.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = MiniBrowserWebProcessPlugIn.m; sourceTree = SOURCE_ROOT; };
 		1AFFEF8718611C3D00DA465E /* MiniBrowserWebProcessPlugIn.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = MiniBrowserWebProcessPlugIn.h; sourceTree = SOURCE_ROOT; };
 		1DDD58150DA1D0A300B32029 /* MainMenu.xib */ = {isa = PBXFileReference; lastKnownFileType = file.xib; name = MainMenu.xib; path = mac/MainMenu.xib; sourceTree = "<group>"; };
+		1FCC6C721DCFAB16008E2968 /* UserScriptsManagerWindowController.xib */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = file.xib; name = UserScriptsManagerWindowController.xib; path = mac/UserScriptsManagerWindowController.xib; sourceTree = "<group>"; };
+		1FCC6C741DCFAC93008E2968 /* UserScriptsManagerWindowController.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = UserScriptsManagerWindowController.h; sourceTree = "<group>"; };
+		1FCC6C751DCFACB1008E2968 /* UserScriptsManagerWindowController.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; name = UserScriptsManagerWindowController.m; path = mac/UserScriptsManagerWindowController.m; sourceTree = "<group>"; };
 		256AC3D80F4B6AC300CF3369 /* AppDelegate.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = AppDelegate.h; path = mac/AppDelegate.h; sourceTree = "<group>"; };
 		256AC3D90F4B6AC300CF3369 /* AppDelegate.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; name = AppDelegate.m; path = mac/AppDelegate.m; sourceTree = "<group>"; };
 		256AC3F00F4B6AF500CF3369 /* MiniBrowser_Prefix.pch */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = MiniBrowser_Prefix.pch; path = mac/MiniBrowser_Prefix.pch; sourceTree = "<group>"; };
@@ -116,6 +121,8 @@
 				51E244F911EFCE07008228D1 /* MBToolbarItem.m */,
 				2DC37341198B62D300EC33E9 /* SettingsController.h */,
 				2DC37342198B62D300EC33E9 /* SettingsController.m */,
+				1FCC6C741DCFAC93008E2968 /* UserScriptsManagerWindowController.h */,
+				1FCC6C751DCFACB1008E2968 /* UserScriptsManagerWindowController.m */,
 				0FE643A2161FAC660059E3FF /* WK1BrowserWindowController.h */,
 				0FE643A3161FAC660059E3FF /* WK1BrowserWindowController.m */,
 				BC329496116A941B008635D0 /* WK2BrowserWindowController.h */,
@@ -174,6 +181,7 @@
 				BC3294A2116A9852008635D0 /* BrowserWindow.xib */,
 				1DDD58150DA1D0A300B32029 /* MainMenu.xib */,
 				7CA379411AC381C10079DC37 /* ExtensionManagerWindowController.xib */,
+				1FCC6C721DCFAB16008E2968 /* UserScriptsManagerWindowController.xib */,
 			);
 			name = Resources;
 			sourceTree = "<group>";
@@ -292,6 +300,7 @@
 				BC72B89611E57E0F001EB4EA /* BrowserWindow.xib in Resources */,
 				7CA379431AC381C10079DC37 /* ExtensionManagerWindowController.xib in Resources */,
 				BC72B89511E57E07001EB4EA /* MainMenu.xib in Resources */,
+				1FCC6C731DCFAB16008E2968 /* UserScriptsManagerWindowController.xib in Resources */,
 			);
 			runOnlyForDeploymentPostprocessing = 0;
 		};
@@ -316,6 +325,7 @@
 				7CA379421AC381C10079DC37 /* ExtensionManagerWindowController.m in Sources */,
 				BC329487116A92E2008635D0 /* main.m in Sources */,
 				51E244FA11EFCE07008228D1 /* MBToolbarItem.m in Sources */,
+				1FCC6C761DCFACB1008E2968 /* UserScriptsManagerWindowController.m in Sources */,
 				0FE643A4161FAC660059E3FF /* WK1BrowserWindowController.m in Sources */,
 				BC329498116A941B008635D0 /* WK2BrowserWindowController.m in Sources */,
 			);
diff --git a/Tools/MiniBrowser/UserScriptsManagerWindowController.h b/Tools/MiniBrowser/UserScriptsManagerWindowController.h
new file mode 100644
index 00000000000..05c21cf13fc
--- /dev/null
+++ b/Tools/MiniBrowser/UserScriptsManagerWindowController.h
@@ -0,0 +1,53 @@
+/*
+ * Copyright (C) 2015 Apple Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS''
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
+ * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS
+ * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
+ * THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#import <Cocoa/Cocoa.h>
+
+#if WK_API_ENABLED
+
+@interface UserScriptsManagerWindowController : NSWindowController {
+    IBOutlet NSArrayController *arrayController;
+//    IBOutlet NSArrayController *injectValues;
+}
+
+- (void)loadInstalledUserScripts;
+//- (NSArray *)injectValues;
+- (IBAction)done:(id)sender;
+
+
+
+@end
+
+@interface WKUserScriptInjectionTimeToNameTransformer : NSValueTransformer
+
++(Class)transformedValueClass;
++(BOOL)allowsReverseTransformation;
+
+-(id)transformedValue:(id)value;
+-(id)reverseTransformedValue:(id)value;
+
+@end
+
+#endif
diff --git a/Tools/MiniBrowser/mac/AppDelegate.h b/Tools/MiniBrowser/mac/AppDelegate.h
index 565bdd99ae4..8c62543f02d 100644
--- a/Tools/MiniBrowser/mac/AppDelegate.h
+++ b/Tools/MiniBrowser/mac/AppDelegate.h
@@ -24,11 +24,13 @@
  */
 
 @class ExtensionManagerWindowController;
+@class UserScriptsManagerWindowController;
 
 @interface BrowserAppDelegate : NSObject <NSApplicationDelegate> {
     NSMutableSet *_browserWindowControllers;
 #if WK_API_ENABLED
     ExtensionManagerWindowController *_extensionManagerWindowController;
+    UserScriptsManagerWindowController *_userScriptsManagerWindowController;
 #endif
 
     IBOutlet NSMenuItem *_newWebKit1WindowItem;
diff --git a/Tools/MiniBrowser/mac/AppDelegate.m b/Tools/MiniBrowser/mac/AppDelegate.m
index 9fb8608f284..f6cebbcedef 100644
--- a/Tools/MiniBrowser/mac/AppDelegate.m
+++ b/Tools/MiniBrowser/mac/AppDelegate.m
@@ -26,6 +26,7 @@
 #import "AppDelegate.h"
 
 #import "ExtensionManagerWindowController.h"
+#import "UserScriptsManagerWindowController.h"
 #import "SettingsController.h"
 #import "WK1BrowserWindowController.h"
 #import "WK2BrowserWindowController.h"
@@ -62,6 +63,7 @@ - (id)init
         _browserWindowControllers = [[NSMutableSet alloc] init];
 #if WK_API_ENABLED
         _extensionManagerWindowController = [[ExtensionManagerWindowController alloc] init];
+        _userScriptsManagerWindowController = [[UserScriptsManagerWindowController alloc] init];
 #endif
     }
 
@@ -74,6 +76,8 @@ - (void)awakeFromNib
     [item setSubmenu:[[SettingsController shared] menu]];
 
 #if WK_API_ENABLED
+    [_userScriptsManagerWindowController loadInstalledUserScripts];
+
     if ([[SettingsController shared] usesGameControllerFramework])
         [WKProcessPool _forceGameControllerFramework];
 #endif
@@ -112,6 +116,7 @@ - (void)awakeFromNib
 
     configuration.suppressesIncrementalRendering = [SettingsController shared].incrementalRenderingSuppressed;
     configuration.websiteDataStore._resourceLoadStatisticsEnabled = [SettingsController shared].resourceLoadStatisticsEnabled;
+    NSLog(@"Returning %p", configuration);
     return configuration;
 }
 
@@ -300,6 +305,13 @@ - (IBAction)showExtensionsManager:(id)sender
 #endif
 }
 
+- (IBAction)showUserScriptsManager:(id)sender
+{
+#if WK_API_ENABLED
+    [_userScriptsManagerWindowController showWindow:sender];
+#endif
+}
+
 #if WK_API_ENABLED
 - (WKUserContentController *)userContentContoller
 {
diff --git a/Tools/MiniBrowser/mac/MainMenu.xib b/Tools/MiniBrowser/mac/MainMenu.xib
index 931bd5bac77..7c2e2c3d76c 100644
--- a/Tools/MiniBrowser/mac/MainMenu.xib
+++ b/Tools/MiniBrowser/mac/MainMenu.xib
@@ -1,8 +1,8 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<document type="com.apple.InterfaceBuilder3.Cocoa.XIB" version="3.0" toolsVersion="11521.1" systemVersion="16B2648a" targetRuntime="MacOSX.Cocoa" propertyAccessControl="none">
+<document type="com.apple.InterfaceBuilder3.Cocoa.XIB" version="3.0" toolsVersion="11542" systemVersion="16B2555" targetRuntime="MacOSX.Cocoa" propertyAccessControl="none">
     <dependencies>
         <deployment identifier="macosx"/>
-        <plugIn identifier="com.apple.InterfaceBuilder.CocoaPlugin" version="11521.1"/>
+        <plugIn identifier="com.apple.InterfaceBuilder.CocoaPlugin" version="11542"/>
     </dependencies>
     <objects>
         <customObject id="-2" userLabel="File's Owner" customClass="NSApplication">
@@ -852,6 +852,12 @@
                                     <action selector="showExtensionsManager:" target="-1" id="iyL-17-sLo"/>
                                 </connections>
                             </menuItem>
+                            <menuItem title="Show User Scripts Manager" id="Ndh-un-Lk5">
+                                <modifierMask key="keyEquivalentModifierMask"/>
+                                <connections>
+                                    <action selector="showUserScriptsManager:" target="-1" id="QeN-OY-Wty"/>
+                                </connections>
+                            </menuItem>
                         </items>
                     </menu>
                 </menuItem>
diff --git a/Tools/MiniBrowser/mac/UserScriptsManagerWindowController.m b/Tools/MiniBrowser/mac/UserScriptsManagerWindowController.m
new file mode 100644
index 00000000000..77d967f3093
--- /dev/null
+++ b/Tools/MiniBrowser/mac/UserScriptsManagerWindowController.m
@@ -0,0 +1,226 @@
+/*
+ * Copyright (C) 2015 Apple Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS''
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
+ * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS
+ * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
+ * THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#import "UserScriptsManagerWindowController.h"
+
+#if WK_API_ENABLED
+
+#import "AppDelegate.h"
+#import <WebKit/WKUserContentControllerPrivate.h>
+#import <WebKit/WKUserScript.h>
+#import <WebKit/WKUserScriptPrivate.h>
+#import <WebKit/_WKUserContentWorld.h>
+
+@interface ScriptCellInfo: NSObject
+
+@property (copy) NSURL *url;
+@property (copy) NSNumber *injectionTime;
+@property (copy) NSArray *items;
+
+@end
+
+@implementation ScriptCellInfo
+
+- (instancetype)initWithURL:(NSURL *)url
+{
+    self = [super init];
+    if (self) {
+        self.url = url;
+        self.injectionTime = [NSNumber numberWithInt:WKUserScriptInjectionTimeAtDocumentEnd];
+    }
+    return self;
+}
+
+@end
+
+@implementation UserScriptsManagerWindowController {
+    _WKUserContentWorld *_userContentWorld;
+    NSMutableDictionary<NSURL *, WKUserScript *> *_userScripts;
+}
+
+- (instancetype)init
+{
+    self = [self initWithWindowNibName:@"UserScriptsManagerWindowController"];
+    if (self) {
+        [NSValueTransformer setValueTransformer:
+            [[WKUserScriptInjectionTimeToNameTransformer alloc] init]
+            forName:@"WKUserScriptInjectionTimeToNameTransformer"];
+
+        _userContentWorld = [[_WKUserContentWorld worldWithName:@"MiniBrowserContent"] retain];
+        _userScripts = [[NSMutableDictionary<NSURL *, WKUserScript *> dictionary] retain];
+    }
+    return self;
+}
+
+- (void)loadInstalledUserScripts
+{
+    NSLog(@"Loading user scripts");
+    NSArray* installedUserScripts = [[NSUserDefaults standardUserDefaults] arrayForKey:@"InstalledUserScripts"];
+    if (installedUserScripts) {
+        for (NSDictionary *scriptInfo in installedUserScripts) {
+            NSError *readError = nil;
+            NSString *path = [scriptInfo objectForKey:@"url"];
+            [self loadScriptFromPath:[NSURL URLWithString:path] injectionTime:[[scriptInfo objectForKey:@"injectionTime"] intValue] error:&readError];
+            if (readError) {
+                NSLog(@"Script %@ coudn't not be loaded \"%@\"", path, [readError localizedDescription]);
+            }
+        }
+    }
+}
+
+- (WKUserScript *)loadScriptFromPath:(NSURL *)path injectionTime:(WKUserScriptInjectionTime) injectionTime error:(NSError **) error
+{
+    NSString *scriptString = [[NSString alloc] initWithContentsOfURL:path encoding:NSUTF8StringEncoding error:error];
+    if (!scriptString) {
+        return nil;
+    }
+
+    WKUserScript *script = [[WKUserScript alloc] _initWithSource:scriptString injectionTime:injectionTime forMainFrameOnly:true legacyWhitelist:[NSArray array] legacyBlacklist:[NSArray array] associatedURL:path userContentWorld:_userContentWorld];
+
+    [_userScripts setObject:script forKey:path];
+
+    BrowserAppDelegate* appDelegate = (BrowserAppDelegate *)[[NSApplication sharedApplication] delegate];
+    [appDelegate.userContentContoller addUserScript:script];
+    return script;
+}
+
+//- (NSArray *)injectValues
+//{
+//    NSArray *arr = [NSArray arrayWithObjects:
+//                    [NSNumber numberWithInt:WKUserScriptInjectionTimeAtDocumentStart],
+//                    [NSNumber numberWithInt:WKUserScriptInjectionTimeAtDocumentEnd],
+//                    nil];
+//    return arr;
+//}
+
+- (void)windowDidLoad
+{
+    [super windowDidLoad];
+
+//    [injectValues addObject:[NSNumber numberWithInt: WKUserScriptInjectionTimeAtDocumentStart]];
+//    [injectValues addObject:[NSNumber numberWithInt: WKUserScriptInjectionTimeAtDocumentEnd]];
+//    [injectValues addObject:@"WKUserScriptInjectionTimeAtDocumentStart"];
+//    [injectValues addObject:@"WKUserScriptInjectionTimeAtDocumentEnd"];
+
+    [_userScripts enumerateKeysAndObjectsUsingBlock:^(NSURL *url, WKUserScript *script, BOOL* stop) {
+        ScriptCellInfo* cellInfo = [[[ScriptCellInfo alloc] initWithURL:url] autorelease];
+        cellInfo.injectionTime = [NSNumber numberWithInt:script.injectionTime];
+        cellInfo.items = [NSArray arrayWithObjects:
+         [NSNumber numberWithInt:WKUserScriptInjectionTimeAtDocumentStart],
+         [NSNumber numberWithInt:WKUserScriptInjectionTimeAtDocumentEnd],
+         nil];
+        [arrayController addObject:cellInfo];
+    }];
+}
+
+- (void)dealloc
+{
+    [_userContentWorld release];
+    [_userScripts release];
+
+    [super dealloc];
+}
+
+- (IBAction)add:(id)sender
+{
+    NSOpenPanel *openPanel = [[NSOpenPanel openPanel] retain];
+    openPanel.allowedFileTypes = @[ @"js" ];
+
+    [openPanel beginSheetModalForWindow:self.window completionHandler:^(NSInteger result)
+    {
+        if (result != NSFileHandlingPanelOKButton)
+            return;
+
+        ScriptCellInfo* cellInfo = [[[ScriptCellInfo alloc] initWithURL:[openPanel.URLs objectAtIndex:0]] autorelease];
+        cellInfo.items = [NSArray arrayWithObjects:
+                          [NSNumber numberWithInt:WKUserScriptInjectionTimeAtDocumentStart],
+                          [NSNumber numberWithInt:WKUserScriptInjectionTimeAtDocumentEnd],
+                          nil];
+        [arrayController addObject:cellInfo];
+    }];
+
+}
+
+- (IBAction)remove:(id)sender
+{
+    [arrayController removeObjectAtArrangedObjectIndex:[arrayController selectionIndex]];
+}
+
+- (IBAction)done:(id)sender
+{
+    BrowserAppDelegate* appDelegate = (BrowserAppDelegate *)[[NSApplication sharedApplication] delegate];
+    [appDelegate.userContentContoller removeAllUserScripts];
+
+    [_userScripts removeAllObjects];
+    NSMutableArray* installedUserScripts = [NSMutableArray arrayWithCapacity:[arrayController.arrangedObjects count]];
+    for (ScriptCellInfo* info in arrayController.arrangedObjects) {
+        NSError *readError = nil;
+        WKUserScript *script = [self loadScriptFromPath:info.url injectionTime:[info.injectionTime intValue] error:&readError];
+        if (nil == readError && nil != script) {
+            [_userScripts setObject:script forKey:info.url];
+            [installedUserScripts addObject:@{@"url": [info.url absoluteString], @"injectionTime": info.injectionTime}];
+        } else {
+            NSAlert *alert = [NSAlert alertWithError:readError];
+            [alert runModal];
+        }
+    }
+    [[NSUserDefaults standardUserDefaults] setObject:installedUserScripts forKey:@"InstalledUserScripts"];
+    [self close];
+}
+@end
+
+@implementation WKUserScriptInjectionTimeToNameTransformer
+
++(Class)transformedValueClass {
+    return [NSString class];
+}
+
+-(NSString *)transformedValue:(NSNumber *)value {
+    WKUserScriptInjectionTime injectionTime = [value intValue];
+    if (injectionTime == WKUserScriptInjectionTimeAtDocumentStart)
+        return @"WKUserScriptInjectionTimeAtDocumentStart";
+    else if (injectionTime == WKUserScriptInjectionTimeAtDocumentEnd)
+        return @"WKUserScriptInjectionTimeAtDocumentEnd";
+
+    NSLog(@"returning nil");
+    return nil;
+}
+
++(BOOL)allowsReverseTransformation {
+    return YES;
+}
+
+-(NSNumber *)reverseTransformedValue:(NSString *)value {
+    if ([@"WKUserScriptInjectionTimeAtDocumentStart" isEqualToString:value])
+        return [NSNumber numberWithInt: WKUserScriptInjectionTimeAtDocumentStart];
+    else if ([@"WKUserScriptInjectionTimeAtDocumentEnd" isEqualToString:value])
+        return [NSNumber numberWithInt: WKUserScriptInjectionTimeAtDocumentEnd];
+
+    return nil;
+}
+
+@end
+
+#endif
diff --git a/Tools/MiniBrowser/mac/UserScriptsManagerWindowController.xib b/Tools/MiniBrowser/mac/UserScriptsManagerWindowController.xib
new file mode 100644
index 00000000000..5d1d006b030
--- /dev/null
+++ b/Tools/MiniBrowser/mac/UserScriptsManagerWindowController.xib
@@ -0,0 +1,209 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<document type="com.apple.InterfaceBuilder3.Cocoa.XIB" version="3.0" toolsVersion="11542" systemVersion="16B2555" targetRuntime="MacOSX.Cocoa" propertyAccessControl="none" useAutolayout="YES">
+    <dependencies>
+        <deployment identifier="macosx"/>
+        <plugIn identifier="com.apple.InterfaceBuilder.CocoaPlugin" version="11542"/>
+        <capability name="documents saved in the Xcode 8 format" minToolsVersion="8.0"/>
+    </dependencies>
+    <objects>
+        <customObject id="-2" userLabel="File's Owner" customClass="UserScriptsManagerWindowController">
+            <connections>
+                <outlet property="arrayController" destination="xeI-l9-8Xv" id="O8f-gY-5FH"/>
+                <outlet property="window" destination="F0z-JX-Cv5" id="gIp-Ho-8D9"/>
+            </connections>
+        </customObject>
+        <customObject id="-1" userLabel="First Responder" customClass="FirstResponder"/>
+        <customObject id="-3" userLabel="Application" customClass="NSObject"/>
+        <window title="User Scripts Manager" allowsToolTipsWhenApplicationIsInactive="NO" autorecalculatesKeyViewLoop="NO" oneShot="NO" releasedWhenClosed="NO" animationBehavior="default" id="F0z-JX-Cv5">
+            <windowStyleMask key="styleMask" titled="YES" closable="YES" miniaturizable="YES" resizable="YES"/>
+            <windowPositionMask key="initialPositionMask" leftStrut="YES" rightStrut="YES" topStrut="YES" bottomStrut="YES"/>
+            <rect key="contentRect" x="196" y="240" width="480" height="268"/>
+            <rect key="screenRect" x="0.0" y="0.0" width="1280" height="800"/>
+            <view key="contentView" id="se5-gp-TjO">
+                <rect key="frame" x="0.0" y="0.0" width="480" height="268"/>
+                <autoresizingMask key="autoresizingMask"/>
+                <subviews>
+                    <scrollView autohidesScrollers="YES" horizontalLineScroll="19" horizontalPageScroll="10" verticalLineScroll="19" verticalPageScroll="10" usesPredominantAxisScrolling="NO" translatesAutoresizingMaskIntoConstraints="NO" id="3Ps-vx-3Rj">
+                        <rect key="frame" x="20" y="58" width="440" height="190"/>
+                        <clipView key="contentView" id="228-qF-Rc1">
+                            <rect key="frame" x="1" y="0.0" width="438" height="189"/>
+                            <autoresizingMask key="autoresizingMask" widthSizable="YES" heightSizable="YES"/>
+                            <subviews>
+                                <tableView verticalHuggingPriority="750" allowsExpansionToolTips="YES" columnAutoresizingStyle="lastColumnOnly" columnReordering="NO" multipleSelection="NO" autosaveColumns="NO" rowSizeStyle="automatic" headerView="Qq0-pi-1X0" viewBased="YES" id="mmd-0v-4hR">
+                                    <rect key="frame" x="0.0" y="0.0" width="438" height="166"/>
+                                    <autoresizingMask key="autoresizingMask"/>
+                                    <size key="intercellSpacing" width="3" height="2"/>
+                                    <color key="backgroundColor" name="controlBackgroundColor" catalog="System" colorSpace="catalog"/>
+                                    <color key="gridColor" name="gridColor" catalog="System" colorSpace="catalog"/>
+                                    <tableColumns>
+                                        <tableColumn width="286" minWidth="40" maxWidth="1000" id="6PD-e9-GfD">
+                                            <tableHeaderCell key="headerCell" lineBreakMode="truncatingTail" borderStyle="border" alignment="left" title="Script">
+                                                <font key="font" metaFont="smallSystem"/>
+                                                <color key="textColor" name="headerTextColor" catalog="System" colorSpace="catalog"/>
+                                                <color key="backgroundColor" name="headerColor" catalog="System" colorSpace="catalog"/>
+                                            </tableHeaderCell>
+                                            <textFieldCell key="dataCell" lineBreakMode="truncatingTail" selectable="YES" editable="YES" alignment="left" title="Text Cell" id="Sq0-um-maR">
+                                                <font key="font" metaFont="system"/>
+                                                <color key="textColor" name="controlTextColor" catalog="System" colorSpace="catalog"/>
+                                                <color key="backgroundColor" name="controlBackgroundColor" catalog="System" colorSpace="catalog"/>
+                                            </textFieldCell>
+                                            <tableColumnResizingMask key="resizingMask" resizeWithTable="YES" userResizable="YES"/>
+                                            <prototypeCellViews>
+                                                <tableCellView id="R3S-7i-hkn">
+                                                    <rect key="frame" x="1" y="1" width="286" height="17"/>
+                                                    <autoresizingMask key="autoresizingMask" widthSizable="YES" heightSizable="YES"/>
+                                                    <subviews>
+                                                        <textField verticalHuggingPriority="750" horizontalCompressionResistancePriority="250" misplaced="YES" translatesAutoresizingMaskIntoConstraints="NO" id="DqA-Ee-O6f">
+                                                            <rect key="frame" x="0.0" y="0.0" width="434" height="17"/>
+                                                            <textFieldCell key="cell" scrollable="YES" lineBreakMode="clipping" sendsActionOnEndEditing="YES" title="Table View Cell" id="syf-BT-XBf">
+                                                                <font key="font" metaFont="system"/>
+                                                                <color key="textColor" name="controlTextColor" catalog="System" colorSpace="catalog"/>
+                                                                <color key="backgroundColor" name="controlColor" catalog="System" colorSpace="catalog"/>
+                                                            </textFieldCell>
+                                                            <connections>
+                                                                <binding destination="R3S-7i-hkn" name="value" keyPath="objectValue.url.lastPathComponent" id="Xks-Q2-qeb"/>
+                                                            </connections>
+                                                        </textField>
+                                                    </subviews>
+                                                    <constraints>
+                                                        <constraint firstAttribute="bottom" secondItem="DqA-Ee-O6f" secondAttribute="bottom" id="Eob-Am-Ity"/>
+                                                        <constraint firstItem="DqA-Ee-O6f" firstAttribute="leading" secondItem="R3S-7i-hkn" secondAttribute="leading" constant="2" id="acg-V8-jUr"/>
+                                                        <constraint firstAttribute="trailing" secondItem="DqA-Ee-O6f" secondAttribute="trailing" constant="2" id="gTj-qL-A7r"/>
+                                                        <constraint firstItem="DqA-Ee-O6f" firstAttribute="top" secondItem="R3S-7i-hkn" secondAttribute="top" id="lKF-M8-hn7"/>
+                                                    </constraints>
+                                                    <connections>
+                                                        <outlet property="textField" destination="DqA-Ee-O6f" id="cpI-Wh-atT"/>
+                                                    </connections>
+                                                </tableCellView>
+                                            </prototypeCellViews>
+                                            <connections>
+                                                <binding destination="xeI-l9-8Xv" name="value" keyPath="arrangedObjects" id="XV3-F0-wBr"/>
+                                            </connections>
+                                        </tableColumn>
+                                        <tableColumn identifier="" width="146" minWidth="10" maxWidth="3.4028234663852886e+38" id="go2-pS-ft4">
+                                            <tableHeaderCell key="headerCell" lineBreakMode="truncatingTail" borderStyle="border" alignment="left" title="Injection time">
+                                                <font key="font" metaFont="smallSystem"/>
+                                                <color key="textColor" name="headerTextColor" catalog="System" colorSpace="catalog"/>
+                                                <color key="backgroundColor" white="0.0" alpha="0.0" colorSpace="calibratedWhite"/>
+                                            </tableHeaderCell>
+                                            <textFieldCell key="dataCell" lineBreakMode="truncatingTail" selectable="YES" editable="YES" alignment="left" title="Text Cell" id="Fu7-f1-9Q3">
+                                                <font key="font" metaFont="system"/>
+                                                <color key="textColor" name="controlTextColor" catalog="System" colorSpace="catalog"/>
+                                                <color key="backgroundColor" name="controlBackgroundColor" catalog="System" colorSpace="catalog"/>
+                                            </textFieldCell>
+                                            <tableColumnResizingMask key="resizingMask" resizeWithTable="YES" userResizable="YES"/>
+                                            <prototypeCellViews>
+                                                <tableCellView id="j2E-ZW-hhJ">
+                                                    <rect key="frame" x="290" y="1" width="146" height="17"/>
+                                                    <autoresizingMask key="autoresizingMask" widthSizable="YES" heightSizable="YES"/>
+                                                    <subviews>
+                                                        <popUpButton verticalHuggingPriority="750" fixedFrame="YES" translatesAutoresizingMaskIntoConstraints="NO" id="ulY-fp-Jom">
+                                                            <rect key="frame" x="1" y="-5" width="146" height="26"/>
+                                                            <autoresizingMask key="autoresizingMask" widthSizable="YES" flexibleMinY="YES" flexibleMaxY="YES"/>
+                                                            <popUpButtonCell key="cell" type="push" bezelStyle="rounded" alignment="left" lineBreakMode="truncatingTail" borderStyle="borderAndBezel" imageScaling="proportionallyDown" inset="2" id="4sn-Pv-IFf">
+                                                                <behavior key="behavior" lightByBackground="YES" lightByGray="YES"/>
+                                                                <font key="font" metaFont="menu"/>
+                                                                <menu key="menu" id="BAx-nW-1Rp"/>
+                                                            </popUpButtonCell>
+                                                            <connections>
+                                                                <binding destination="j2E-ZW-hhJ" name="contentValues" keyPath="objectValue.items" id="j8Y-eY-YBA"/>
+                                                                <binding destination="j2E-ZW-hhJ" name="selectedValue" keyPath="objectValue.injectionTime" previousBinding="j8Y-eY-YBA" id="WIJ-UN-7Ur"/>
+                                                            </connections>
+                                                        </popUpButton>
+                                                    </subviews>
+                                                </tableCellView>
+                                            </prototypeCellViews>
+                                            <connections>
+                                                <binding destination="xeI-l9-8Xv" name="value" keyPath="arrangedObjects" id="rF2-ul-KqI"/>
+                                            </connections>
+                                        </tableColumn>
+                                    </tableColumns>
+                                    <connections>
+                                        <binding destination="xeI-l9-8Xv" name="content" keyPath="arrangedObjects" id="paH-6b-cxM"/>
+                                        <binding destination="xeI-l9-8Xv" name="selectionIndexes" keyPath="selectionIndexes" previousBinding="paH-6b-cxM" id="NDp-MB-3u8"/>
+                                    </connections>
+                                </tableView>
+                            </subviews>
+                        </clipView>
+                        <scroller key="horizontalScroller" hidden="YES" verticalHuggingPriority="750" horizontal="YES" id="iTc-lE-Pk6">
+                            <rect key="frame" x="1" y="175" width="438" height="16"/>
+                            <autoresizingMask key="autoresizingMask"/>
+                        </scroller>
+                        <scroller key="verticalScroller" hidden="YES" verticalHuggingPriority="750" horizontal="NO" id="ak3-QY-AvJ">
+                            <rect key="frame" x="224" y="17" width="15" height="102"/>
+                            <autoresizingMask key="autoresizingMask"/>
+                        </scroller>
+                        <tableHeaderView key="headerView" id="Qq0-pi-1X0">
+                            <rect key="frame" x="0.0" y="0.0" width="438" height="23"/>
+                            <autoresizingMask key="autoresizingMask"/>
+                        </tableHeaderView>
+                    </scrollView>
+                    <button verticalHuggingPriority="750" translatesAutoresizingMaskIntoConstraints="NO" id="27H-8l-ZRr">
+                        <rect key="frame" x="20" y="21" width="21" height="21"/>
+                        <constraints>
+                            <constraint firstAttribute="width" constant="21" id="Kv9-Ra-5xj"/>
+                            <constraint firstAttribute="height" constant="19" id="Nmn-14-1ea"/>
+                        </constraints>
+                        <buttonCell key="cell" type="smallSquare" bezelStyle="smallSquare" image="NSAddTemplate" imagePosition="overlaps" alignment="center" lineBreakMode="truncatingTail" state="on" borderStyle="border" imageScaling="proportionallyDown" inset="2" id="6T3-fu-laO">
+                            <behavior key="behavior" pushIn="YES" lightByBackground="YES" lightByGray="YES"/>
+                            <font key="font" metaFont="system"/>
+                        </buttonCell>
+                        <connections>
+                            <action selector="add:" target="-2" id="nIg-iE-xaG"/>
+                        </connections>
+                    </button>
+                    <button verticalHuggingPriority="750" translatesAutoresizingMaskIntoConstraints="NO" id="i46-AU-g9W">
+                        <rect key="frame" x="40" y="21" width="21" height="21"/>
+                        <constraints>
+                            <constraint firstAttribute="width" constant="21" id="ECG-hI-EML"/>
+                            <constraint firstAttribute="height" constant="19" id="b3A-2I-fDc"/>
+                        </constraints>
+                        <buttonCell key="cell" type="smallSquare" bezelStyle="smallSquare" image="NSRemoveTemplate" imagePosition="overlaps" alignment="center" lineBreakMode="truncatingTail" state="on" borderStyle="border" imageScaling="proportionallyDown" inset="2" id="gfs-sY-cBN">
+                            <behavior key="behavior" pushIn="YES" lightByBackground="YES" lightByGray="YES"/>
+                            <font key="font" metaFont="system"/>
+                        </buttonCell>
+                        <connections>
+                            <action selector="remove:" target="-2" id="BOW-Fc-AGp"/>
+                            <binding destination="xeI-l9-8Xv" name="enabled" keyPath="canRemove" id="pp1-d7-6Gd"/>
+                        </connections>
+                    </button>
+                    <button verticalHuggingPriority="750" translatesAutoresizingMaskIntoConstraints="NO" id="WP9-Nc-dpH">
+                        <rect key="frame" x="385" y="13" width="81" height="32"/>
+                        <constraints>
+                            <constraint firstAttribute="height" constant="21" id="kHJ-HV-xCQ"/>
+                            <constraint firstAttribute="width" constant="69" id="utK-fF-IMS"/>
+                        </constraints>
+                        <buttonCell key="cell" type="push" title="Done" bezelStyle="rounded" alignment="center" borderStyle="border" imageScaling="proportionallyDown" inset="2" id="mXR-bi-0jd">
+                            <behavior key="behavior" pushIn="YES" lightByBackground="YES" lightByGray="YES"/>
+                            <font key="font" metaFont="system"/>
+                        </buttonCell>
+                        <connections>
+                            <action selector="done:" target="-2" id="uW3-un-rV2"/>
+                        </connections>
+                    </button>
+                </subviews>
+                <constraints>
+                    <constraint firstAttribute="bottom" secondItem="WP9-Nc-dpH" secondAttribute="bottom" constant="20" id="00Y-35-mcn"/>
+                    <constraint firstAttribute="trailing" secondItem="WP9-Nc-dpH" secondAttribute="trailing" constant="20" id="HrZ-XX-9Pm"/>
+                    <constraint firstAttribute="bottom" secondItem="3Ps-vx-3Rj" secondAttribute="bottom" constant="58" id="Nej-YX-BMe"/>
+                    <constraint firstItem="i46-AU-g9W" firstAttribute="leading" secondItem="se5-gp-TjO" secondAttribute="leading" constant="40" id="SQS-4J-NJE"/>
+                    <constraint firstAttribute="bottom" secondItem="i46-AU-g9W" secondAttribute="bottom" constant="22" id="Tri-yU-fA4"/>
+                    <constraint firstItem="27H-8l-ZRr" firstAttribute="leading" secondItem="se5-gp-TjO" secondAttribute="leading" constant="20" id="URC-fD-No6"/>
+                    <constraint firstItem="3Ps-vx-3Rj" firstAttribute="leading" secondItem="se5-gp-TjO" secondAttribute="leading" constant="20" id="Udm-Eg-Fmx"/>
+                    <constraint firstAttribute="bottom" secondItem="27H-8l-ZRr" secondAttribute="bottom" constant="22" id="gVG-YX-oeX"/>
+                    <constraint firstAttribute="trailing" secondItem="3Ps-vx-3Rj" secondAttribute="trailing" constant="20" id="ggD-nm-PDi"/>
+                    <constraint firstItem="3Ps-vx-3Rj" firstAttribute="top" secondItem="se5-gp-TjO" secondAttribute="top" constant="20" id="qiw-wC-igh"/>
+                </constraints>
+            </view>
+            <connections>
+                <outlet property="delegate" destination="-2" id="0bl-1N-AYu"/>
+            </connections>
+            <point key="canvasLocation" x="200" y="130"/>
+        </window>
+        <arrayController id="xeI-l9-8Xv"/>
+    </objects>
+    <resources>
+        <image name="NSAddTemplate" width="11" height="11"/>
+        <image name="NSRemoveTemplate" width="11" height="11"/>
+    </resources>
+</document>
diff --git a/Tools/MiniBrowser/mac/WK2BrowserWindowController.m b/Tools/MiniBrowser/mac/WK2BrowserWindowController.m
index 3d5efc4fe97..810bbb0472b 100644
--- a/Tools/MiniBrowser/mac/WK2BrowserWindowController.m
+++ b/Tools/MiniBrowser/mac/WK2BrowserWindowController.m
@@ -29,6 +29,8 @@
 
 #import "AppDelegate.h"
 #import "SettingsController.h"
+#import <WebKit/WKDiscoveryService.h>
+#import <WebKit/WKDiscoveryDelegate.h>
 #import <WebKit/WKFrameInfo.h>
 #import <WebKit/WKNavigationActionPrivate.h>
 #import <WebKit/WKNavigationDelegate.h>
@@ -47,12 +49,13 @@
 static const int testHeaderBannerHeight = 42;
 static const int testFooterBannerHeight = 58;
 
-@interface WK2BrowserWindowController () <NSTextFinderBarContainer, WKNavigationDelegate, WKUIDelegate, _WKIconLoadingDelegate>
+@interface WK2BrowserWindowController () <NSTextFinderBarContainer, WKNavigationDelegate, WKUIDelegate, _WKIconLoadingDelegate, WKDiscoveryDelegate>
 @end
 
 @implementation WK2BrowserWindowController {
     WKWebViewConfiguration *_configuration;
     WKWebView *_webView;
+    WKDiscoveryService *_service;
     BOOL _zoomTextOnly;
     BOOL _isPrivateBrowsingWindow;
 
@@ -109,6 +112,10 @@ - (instancetype)initWithConfiguration:(WKWebViewConfiguration *)configuration
     if (!(self = [super initWithWindowNibName:@"BrowserWindow"]))
         return nil;
 
+    _service = [[WKDiscoveryService alloc] init];
+    _service.discoveryDelegate = self;
+    [_service start];
+
     _configuration = [configuration copy];
     _isPrivateBrowsingWindow = !_configuration.websiteDataStore.isPersistent;
 
@@ -127,6 +134,7 @@ - (void)dealloc
 
     [_webView release];
     [_configuration release];
+    [_service release];
 
     [super dealloc];
 }
@@ -763,6 +771,14 @@ - (void)findBarViewDidChangeHeight
 {
 }
 
+- (nullable WKWebView *)discoveryService:(WKDiscoveryService *)service launchWebViewforNavigationAction:(WKNavigationAction *)navigationAction
+{
+    WK2BrowserWindowController *newBrowserWindowController = [[WK2BrowserWindowController alloc] initWithConfiguration:_configuration];
+    [newBrowserWindowController.window makeKeyAndOrderFront:self];
+
+    return newBrowserWindowController->_webView;
+}
+
 @end
 
 #endif // WK_API_ENABLED
diff --git a/Tools/Scripts/webkitdirs.pm b/Tools/Scripts/webkitdirs.pm
index b2c3320b249..58c0de54362 100755
--- a/Tools/Scripts/webkitdirs.pm
+++ b/Tools/Scripts/webkitdirs.pm
@@ -2280,6 +2280,18 @@ sub installedMobileSafariBundle()
     return File::Spec->catfile(iosSimulatorApplicationsPath(), "MobileSafari.app");
 }
 
+sub mobileMiniBrowserBundle()
+{
+#determineConfigurationProductDir();
+
+    # Use MobileSafari.app in product directory if present.
+#if (isAppleCocoaWebKit() && -d "$configurationProductDir/MobileSafari.app") {
+#        return "$configurationProductDir/MobileSafari.app";
+#    }
+#    return installedMobileSafariBundle();
+    return File::Spec->catfile(productDir(), "MobileMiniBrowser.app");
+}
+
 sub mobileSafariBundle()
 {
     determineConfigurationProductDir();
@@ -2618,6 +2630,9 @@ sub runSafari
 
 sub runMiniBrowser
 {
+    if (isIOSWebKit()) {
+        return runIOSWebKitApp(mobileMiniBrowserBundle());
+    }
     if (isAppleCocoaWebKit()) {
         return runMacWebKitApp(File::Spec->catfile(productDir(), "MiniBrowser.app", "Contents", "MacOS", "MiniBrowser"));
     } elsif (isAppleWinWebKit()) {
diff --git a/Tools/Scripts/webkitperl/FeatureList.pm b/Tools/Scripts/webkitperl/FeatureList.pm
index 5fbef02a173..e29387e5f7f 100644
--- a/Tools/Scripts/webkitperl/FeatureList.pm
+++ b/Tools/Scripts/webkitperl/FeatureList.pm
@@ -135,6 +135,7 @@ my (
     $webAssemblySupport,
     $webAudioSupport,
     $webRTCSupport,
+    $webDialSupport,
     $webReplaySupport,
     $webSocketsSupport,
     $webTimingSupport,
@@ -386,6 +387,9 @@ my @features = (
     { option => "web-audio", desc => "Toggle Web Audio support",
       define => "ENABLE_WEB_AUDIO", default => (isGtk() || isWPE()), value => \$webAudioSupport },
 
+    { option => "web-dial", desc => "Toggle Web Discovery and Launch support",
+      define => "ENABLE_WEB_DIAL", default => (isAppleCocoaWebKit() || isIOSWebKit()), value => \$webDialSupport },
+
     { option => "web-replay", desc => "Toggle Web Replay support",
       define => "ENABLE_WEB_REPLAY", default => isAppleCocoaWebKit(), value => \$webReplaySupport },
 
diff --git a/Tools/TestWebKitAPI/Configurations/FeatureDefines.xcconfig b/Tools/TestWebKitAPI/Configurations/FeatureDefines.xcconfig
index 2e496d3f1fc..7a8c377e195 100644
--- a/Tools/TestWebKitAPI/Configurations/FeatureDefines.xcconfig
+++ b/Tools/TestWebKitAPI/Configurations/FeatureDefines.xcconfig
@@ -214,6 +214,7 @@ ENABLE_WEBGPU = ENABLE_WEBGPU;
 ENABLE_WEBGPU[sdk=iphonesimulator*] = ;
 ENABLE_WEB_ANIMATIONS = ENABLE_WEB_ANIMATIONS;
 ENABLE_WEB_AUDIO = ENABLE_WEB_AUDIO;
+ENABLE_WEB_DIAL = ENABLE_WEB_DIAL;
 ENABLE_WEB_REPLAY = $(ENABLE_WEB_REPLAY_$(PLATFORM_NAME)_$(CONFIGURATION));
 ENABLE_WEB_REPLAY_macosx_Debug = ENABLE_WEB_REPLAY;
 ENABLE_WEB_REPLAY_macosx_Release = ENABLE_WEB_REPLAY;
@@ -249,4 +250,4 @@ ENABLE_DRAG_SUPPORT[sdk=iphonesimulator11*] = ENABLE_DRAG_SUPPORT;
 ENABLE_DATA_INTERACTION[sdk=iphoneos11*] = ENABLE_DATA_INTERACTION;
 ENABLE_DATA_INTERACTION[sdk=iphonesimulator11*] = ENABLE_DATA_INTERACTION;
 
-FEATURE_DEFINES = $(ENABLE_3D_TRANSFORMS) $(ENABLE_ACCELERATED_2D_CANVAS) $(ENABLE_ACCELERATED_OVERFLOW_SCROLLING) $(ENABLE_APPLE_PAY) $(ENABLE_APPLE_PAY_SESSION_V3) $(ENABLE_ATTACHMENT_ELEMENT) $(ENABLE_AVF_CAPTIONS) $(ENABLE_CACHE_PARTITIONING) $(ENABLE_CANVAS_PATH) $(ENABLE_CANVAS_PROXY) $(ENABLE_CHANNEL_MESSAGING) $(ENABLE_CONTENT_FILTERING) $(ENABLE_CSS_ANIMATIONS_LEVEL_2) $(ENABLE_CSS_BOX_DECORATION_BREAK) $(ENABLE_CSS_COMPOSITING) $(ENABLE_CSS_DEVICE_ADAPTATION) $(ENABLE_CSS_IMAGE_ORIENTATION) $(ENABLE_CSS_IMAGE_RESOLUTION) $(ENABLE_CSS_REGIONS) $(ENABLE_CSS_SCROLL_SNAP) $(ENABLE_CSS_SELECTORS_LEVEL4) $(ENABLE_CSS_TRAILING_WORD) $(ENABLE_CSS3_TEXT) $(ENABLE_CURSOR_VISIBILITY) $(ENABLE_CUSTOM_SCHEME_HANDLER) $(ENABLE_DASHBOARD_SUPPORT) $(ENABLE_DATA_INTERACTION) $(ENABLE_DATA_TRANSFER_ITEMS) $(ENABLE_DATACUE_VALUE) $(ENABLE_DATALIST_ELEMENT) $(ENABLE_DEVICE_ORIENTATION) $(ENABLE_DRAG_SUPPORT) $(ENABLE_ENCRYPTED_MEDIA) $(ENABLE_FAST_JIT_PERMISSIONS) $(ENABLE_FETCH_API) $(ENABLE_FILTERS_LEVEL_2) $(ENABLE_FTL_JIT) $(ENABLE_FULLSCREEN_API) $(ENABLE_GAMEPAD_DEPRECATED) $(ENABLE_GAMEPAD) $(ENABLE_GEOLOCATION) $(ENABLE_ICONDATABASE) $(ENABLE_INDEXED_DATABASE_IN_WORKERS) $(ENABLE_INDEXED_DATABASE) $(ENABLE_INPUT_TYPE_COLOR_POPOVER) $(ENABLE_INPUT_TYPE_COLOR) $(ENABLE_INPUT_TYPE_DATE) $(ENABLE_INPUT_TYPE_DATETIME_INCOMPLETE) $(ENABLE_INPUT_TYPE_DATETIMELOCAL) $(ENABLE_INPUT_TYPE_MONTH) $(ENABLE_INPUT_TYPE_TIME) $(ENABLE_INPUT_TYPE_WEEK) $(ENABLE_INTERSECTION_OBSERVER) $(ENABLE_INTL) $(ENABLE_IOS_GESTURE_EVENTS) $(ENABLE_IOS_TOUCH_EVENTS) $(ENABLE_JIT) $(ENABLE_KEYBOARD_KEY_ATTRIBUTE) $(ENABLE_KEYBOARD_CODE_ATTRIBUTE) $(ENABLE_LEGACY_CSS_VENDOR_PREFIXES) $(ENABLE_LEGACY_ENCRYPTED_MEDIA) $(ENABLE_LEGACY_VENDOR_PREFIXES) $(ENABLE_LETTERPRESS) $(ENABLE_LINK_PREFETCH) $(ENABLE_MAC_GESTURE_EVENTS) $(ENABLE_MATHML) $(ENABLE_MEDIA_CAPTURE) $(ENABLE_MEDIA_CONTROLS_SCRIPT) $(ENABLE_MEDIA_SESSION) $(ENABLE_MEDIA_SOURCE) $(ENABLE_MEDIA_STATISTICS) $(ENABLE_MEDIA_STREAM) $(ENABLE_METER_ELEMENT) $(ENABLE_MHTML) $(ENABLE_MOUSE_CURSOR_SCALE) $(ENABLE_NAVIGATOR_CONTENT_UTILS) $(ENABLE_NAVIGATOR_HWCONCURRENCY) $(ENABLE_NOSNIFF) $(ENABLE_NOTIFICATIONS) $(ENABLE_PDFKIT_PLUGIN) $(ENABLE_POINTER_LOCK) $(ENABLE_PROXIMITY_EVENTS) $(ENABLE_PUBLIC_SUFFIX_LIST) $(ENABLE_QUOTA) $(ENABLE_REMOTE_INSPECTOR) $(ENABLE_REQUEST_AUTOCOMPLETE) $(ENABLE_RESOLUTION_MEDIA_QUERY) $(ENABLE_RESOURCE_USAGE) $(ENABLE_RUBBER_BANDING) $(ENABLE_SERVICE_CONTROLS) $(ENABLE_SPEECH_SYNTHESIS) $(ENABLE_STREAMS_API) $(ENABLE_SUBTLE_CRYPTO) $(ENABLE_SVG_FONTS) $(ENABLE_TELEPHONE_NUMBER_DETECTION) $(ENABLE_TEXT_AUTOSIZING) $(ENABLE_TOUCH_EVENTS) $(ENABLE_TOUCH_ICON_LOADING) $(ENABLE_USERSELECT_ALL) $(ENABLE_VARIATION_FONTS) $(ENABLE_VIDEO_PRESENTATION_MODE) $(ENABLE_MAC_VIDEO_TOOLBOX) $(ENABLE_VIDEO_TRACK) $(ENABLE_VIDEO) $(ENABLE_VIEW_MODE_CSS_MEDIA) $(ENABLE_WEB_ANIMATIONS) $(ENABLE_WEB_AUDIO) $(ENABLE_WEB_REPLAY) $(ENABLE_WEB_RTC) $(ENABLE_WEB_SOCKETS) $(ENABLE_WEB_TIMING) $(ENABLE_WEBASSEMBLY) $(ENABLE_WEBGL) $(ENABLE_WEBGL2) $(ENABLE_WEBGPU) $(ENABLE_WIRELESS_PLAYBACK_TARGET) $(ENABLE_XSLT);
+FEATURE_DEFINES = $(ENABLE_3D_TRANSFORMS) $(ENABLE_ACCELERATED_2D_CANVAS) $(ENABLE_ACCELERATED_OVERFLOW_SCROLLING) $(ENABLE_APPLE_PAY) $(ENABLE_APPLE_PAY_SESSION_V3) $(ENABLE_ATTACHMENT_ELEMENT) $(ENABLE_AVF_CAPTIONS) $(ENABLE_CACHE_PARTITIONING) $(ENABLE_CANVAS_PATH) $(ENABLE_CANVAS_PROXY) $(ENABLE_CHANNEL_MESSAGING) $(ENABLE_CONTENT_FILTERING) $(ENABLE_CSS_ANIMATIONS_LEVEL_2) $(ENABLE_CSS_BOX_DECORATION_BREAK) $(ENABLE_CSS_COMPOSITING) $(ENABLE_CSS_DEVICE_ADAPTATION) $(ENABLE_CSS_IMAGE_ORIENTATION) $(ENABLE_CSS_IMAGE_RESOLUTION) $(ENABLE_CSS_REGIONS) $(ENABLE_CSS_SCROLL_SNAP) $(ENABLE_CSS_SELECTORS_LEVEL4) $(ENABLE_CSS_TRAILING_WORD) $(ENABLE_CSS3_TEXT) $(ENABLE_CURSOR_VISIBILITY) $(ENABLE_CUSTOM_SCHEME_HANDLER) $(ENABLE_DASHBOARD_SUPPORT) $(ENABLE_DATA_INTERACTION) $(ENABLE_DATA_TRANSFER_ITEMS) $(ENABLE_DATACUE_VALUE) $(ENABLE_DATALIST_ELEMENT) $(ENABLE_DEVICE_ORIENTATION) $(ENABLE_DRAG_SUPPORT) $(ENABLE_ENCRYPTED_MEDIA) $(ENABLE_FAST_JIT_PERMISSIONS) $(ENABLE_FETCH_API) $(ENABLE_FILTERS_LEVEL_2) $(ENABLE_FTL_JIT) $(ENABLE_FULLSCREEN_API) $(ENABLE_GAMEPAD_DEPRECATED) $(ENABLE_GAMEPAD) $(ENABLE_GEOLOCATION) $(ENABLE_ICONDATABASE) $(ENABLE_INDEXED_DATABASE_IN_WORKERS) $(ENABLE_INDEXED_DATABASE) $(ENABLE_INPUT_TYPE_COLOR_POPOVER) $(ENABLE_INPUT_TYPE_COLOR) $(ENABLE_INPUT_TYPE_DATE) $(ENABLE_INPUT_TYPE_DATETIME_INCOMPLETE) $(ENABLE_INPUT_TYPE_DATETIMELOCAL) $(ENABLE_INPUT_TYPE_MONTH) $(ENABLE_INPUT_TYPE_TIME) $(ENABLE_INPUT_TYPE_WEEK) $(ENABLE_INTERSECTION_OBSERVER) $(ENABLE_INTL) $(ENABLE_IOS_GESTURE_EVENTS) $(ENABLE_IOS_TOUCH_EVENTS) $(ENABLE_JIT) $(ENABLE_KEYBOARD_KEY_ATTRIBUTE) $(ENABLE_KEYBOARD_CODE_ATTRIBUTE) $(ENABLE_LEGACY_CSS_VENDOR_PREFIXES) $(ENABLE_LEGACY_ENCRYPTED_MEDIA) $(ENABLE_LEGACY_VENDOR_PREFIXES) $(ENABLE_LETTERPRESS) $(ENABLE_LINK_PREFETCH) $(ENABLE_MAC_GESTURE_EVENTS) $(ENABLE_MATHML) $(ENABLE_MEDIA_CAPTURE) $(ENABLE_MEDIA_CONTROLS_SCRIPT) $(ENABLE_MEDIA_SESSION) $(ENABLE_MEDIA_SOURCE) $(ENABLE_MEDIA_STATISTICS) $(ENABLE_MEDIA_STREAM) $(ENABLE_METER_ELEMENT) $(ENABLE_MHTML) $(ENABLE_MOUSE_CURSOR_SCALE) $(ENABLE_NAVIGATOR_CONTENT_UTILS) $(ENABLE_NAVIGATOR_HWCONCURRENCY) $(ENABLE_NOSNIFF) $(ENABLE_NOTIFICATIONS) $(ENABLE_PDFKIT_PLUGIN) $(ENABLE_POINTER_LOCK) $(ENABLE_PROXIMITY_EVENTS) $(ENABLE_PUBLIC_SUFFIX_LIST) $(ENABLE_QUOTA) $(ENABLE_REMOTE_INSPECTOR) $(ENABLE_REQUEST_AUTOCOMPLETE) $(ENABLE_RESOLUTION_MEDIA_QUERY) $(ENABLE_RESOURCE_USAGE) $(ENABLE_RUBBER_BANDING) $(ENABLE_SERVICE_CONTROLS) $(ENABLE_SPEECH_SYNTHESIS) $(ENABLE_STREAMS_API) $(ENABLE_SUBTLE_CRYPTO) $(ENABLE_SVG_FONTS) $(ENABLE_TELEPHONE_NUMBER_DETECTION) $(ENABLE_TEXT_AUTOSIZING) $(ENABLE_TOUCH_EVENTS) $(ENABLE_TOUCH_ICON_LOADING) $(ENABLE_USERSELECT_ALL) $(ENABLE_VARIATION_FONTS) $(ENABLE_VIDEO_PRESENTATION_MODE) $(ENABLE_MAC_VIDEO_TOOLBOX) $(ENABLE_VIDEO_TRACK) $(ENABLE_VIDEO) $(ENABLE_VIEW_MODE_CSS_MEDIA) $(ENABLE_WEB_ANIMATIONS) $(ENABLE_WEB_AUDIO) $(ENABLE_WEB_DIAL) $(ENABLE_WEB_REPLAY) $(ENABLE_WEB_RTC) $(ENABLE_WEB_SOCKETS) $(ENABLE_WEB_TIMING) $(ENABLE_WEBASSEMBLY) $(ENABLE_WEBGL) $(ENABLE_WEBGL2) $(ENABLE_WEBGPU) $(ENABLE_WIRELESS_PLAYBACK_TARGET) $(ENABLE_XSLT);
diff --git a/WebKit.xcworkspace/xcshareddata/xcschemes/All Source.xcscheme b/WebKit.xcworkspace/xcshareddata/xcschemes/All Source.xcscheme
index 56cb8a2a622..623eb1131ee 100644
--- a/WebKit.xcworkspace/xcshareddata/xcschemes/All Source.xcscheme	
+++ b/WebKit.xcworkspace/xcshareddata/xcschemes/All Source.xcscheme	
@@ -149,6 +149,20 @@
                ReferencedContainer = "container:Source/WebKit2/WebKit2.xcodeproj">
             </BuildableReference>
          </BuildActionEntry>
+         <BuildActionEntry
+            buildForTesting = "YES"
+            buildForRunning = "YES"
+            buildForProfiling = "YES"
+            buildForArchiving = "YES"
+            buildForAnalyzing = "YES">
+            <BuildableReference
+               BuildableIdentifier = "primary"
+               BlueprintIdentifier = "CD1DAF911D709E3600017CF0"
+               BuildableName = "MobileMiniBrowser.app"
+               BlueprintName = "MobileMiniBrowser"
+               ReferencedContainer = "container:Tools/MobileMiniBrowser/MobileMiniBrowser.xcodeproj">
+            </BuildableReference>
+         </BuildActionEntry>
       </BuildActionEntries>
    </BuildAction>
    <TestAction
@@ -161,10 +175,10 @@
       <MacroExpansion>
          <BuildableReference
             BuildableIdentifier = "primary"
-            BlueprintIdentifier = "8D1107260486CEB800E47090"
-            BuildableName = "MiniBrowser.app"
-            BlueprintName = "MiniBrowser"
-            ReferencedContainer = "container:Tools/MiniBrowser/MiniBrowser.xcodeproj">
+            BlueprintIdentifier = "CD1DAF911D709E3600017CF0"
+            BuildableName = "MobileMiniBrowser.app"
+            BlueprintName = "MobileMiniBrowser"
+            ReferencedContainer = "container:Tools/MobileMiniBrowser/MobileMiniBrowser.xcodeproj">
          </BuildableReference>
       </MacroExpansion>
       <AdditionalOptions>
@@ -184,10 +198,10 @@
          runnableDebuggingMode = "0">
          <BuildableReference
             BuildableIdentifier = "primary"
-            BlueprintIdentifier = "8D1107260486CEB800E47090"
-            BuildableName = "MiniBrowser.app"
-            BlueprintName = "MiniBrowser"
-            ReferencedContainer = "container:Tools/MiniBrowser/MiniBrowser.xcodeproj">
+            BlueprintIdentifier = "CD1DAF911D709E3600017CF0"
+            BuildableName = "MobileMiniBrowser.app"
+            BlueprintName = "MobileMiniBrowser"
+            ReferencedContainer = "container:Tools/MobileMiniBrowser/MobileMiniBrowser.xcodeproj">
          </BuildableReference>
       </BuildableProductRunnable>
       <AdditionalOptions>
-- 
2.11.0 (Apple Git-81)

